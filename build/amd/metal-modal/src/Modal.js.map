{"version":3,"sources":["Modal.js"],"names":["Modal","eventHandler_","autoFocus_","autoFocus","autoFocusSelector","inDocument","visible","element","querySelector","focus","removeAllListeners","exitDocument","overlayElement","unrestrictFocus_","event","overlay","contains","target","keyCode","hide","restrictFocusHandle_","on","document","handleDocumentFocus_","bind","lastFocusedElement_","hideOnEscape","add","handleKeyup_","willShowOverlay","style","display","syncOverlay","activeElement","restrictFocus_","shiftFocusBack_","removeListener","buildFragment","firstChild","STATE","validator","val","isString","value","body","footer","header","isBoolean","noCloseButton","initOnly","valueFn","role","register"],"mappings":"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","file":"node_modules/metal-modal/src/Modal.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport { EventHandler } from 'metal-events';\nimport templates from './Modal.soy.js';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\n\n/**\n * Modal component.\n */\nclass Modal extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\tthis.eventHandler_ = new EventHandler();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.autoFocus_(this.autoFocus);\n\t}\n\n\t/**\n\t * Automatically focuses the element specified by the given selector.\n\t * @param {boolean|string} autoFocusSelector The selector, or false if no\n\t *   element should be automatically focused.\n\t * @protected\n\t */\n\tautoFocus_(autoFocusSelector) {\n\t\tif (this.inDocument && this.visible && autoFocusSelector) {\n\t\t\tvar element = this.element.querySelector(autoFocusSelector);\n\t\t\tif (element) {\n\t\t\t\telement.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tsuper.detached();\n\t\tthis.eventHandler_.removeAllListeners();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tdom.exitDocument(this.overlayElement);\n\t\tthis.unrestrictFocus_();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Handles a `focus` event on the document. If the focused element is\n\t * outside the modal and an overlay is being used, focuses the modal back.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleDocumentFocus_(event) {\n\t\tif (this.overlay && !this.element.contains(event.target)) {\n\t\t\tthis.autoFocus_('.modal-dialog');\n\t\t}\n\t}\n\n\t/**\n\t * Handles document click in order to close the alert.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleKeyup_(event) {\n\t\tif (event.keyCode === 27) {\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\t/**\n\t * Hides the modal, setting its `visible` state key to false.\n\t */\n\thide() {\n\t\tthis.visible = false;\n\t}\n\n\t/**\n\t * Restricts focus to the modal while it's visible.\n\t * @protected\n\t */\n\trestrictFocus_() {\n\t\tif (!this.restrictFocusHandle_) {\n\t\t\tthis.restrictFocusHandle_ = dom.on(document, 'focus', this.handleDocumentFocus_.bind(this), true);\n\t\t}\n\t}\n\n\t/**\n\t * Shifts the focus back to the last element that had been focused before the\n\t * modal was shown.\n\t * @protected\n\t */\n\tshiftFocusBack_() {\n\t\tif (this.lastFocusedElement_) {\n\t\t\tthis.lastFocusedElement_.focus();\n\t\t\tthis.lastFocusedElement_ = null;\n\t\t}\n\t}\n\n\t/**\n\t * Shows the modal, setting its `visible` state key to true.\n\t */\n\tshow() {\n\t\tthis.visible = true;\n\t}\n\n\t/**\n\t * Syncs the component according to the value of the `hideOnEscape` state key.\n\t * @param {boolean} hideOnEscape\n\t */\n\tsyncHideOnEscape(hideOnEscape) {\n\t\tif (hideOnEscape) {\n\t\t\tthis.eventHandler_.add(dom.on(document, 'keyup', this.handleKeyup_.bind(this)));\n\t\t} else {\n\t\t\tthis.eventHandler_.removeAllListeners();\n\t\t}\n\t}\n\n\t/**\n\t * Syncs the component according to the value of the `overlay` state key.\n\t * @param {boolean} overlay\n\t */\n\tsyncOverlay(overlay) {\n\t\tvar willShowOverlay = overlay && this.visible;\n\t\tdom[willShowOverlay ? 'enterDocument' : 'exitDocument'](this.overlayElement);\n\t}\n\n\t/**\n\t * Syncs the component according to the value of the `visible` state key.\n\t * @param {boolean} visible\n\t */\n\tsyncVisible(visible) {\n\t\tthis.element.style.display = visible ? 'block' : '';\n\t\tthis.syncOverlay(this.overlay);\n\t\tif (this.visible) {\n\t\t\tthis.lastFocusedElement_ = this.lastFocusedElement_ || document.activeElement;\n\t\t\tthis.autoFocus_(this.autoFocus);\n\t\t\tthis.restrictFocus_();\n\t\t} else {\n\t\t\tthis.unrestrictFocus_();\n\t\t\tthis.shiftFocusBack_();\n\t\t}\n\t}\n\n\t/**\n\t * Removes the handler that restricts focus to elements inside the modal.\n\t * @protected\n\t */\n\tunrestrictFocus_() {\n\t\tif (this.restrictFocusHandle_) {\n\t\t\tthis.restrictFocusHandle_.removeListener();\n\t\t\tthis.restrictFocusHandle_ = null;\n\t\t}\n\t}\n\n\t/**\n\t * Defines the default value for the `overlayElement` state key.\n\t * @protected\n\t */\n\tvalueOverlayElementFn_() {\n\t\treturn dom.buildFragment('<div class=\"modal-backdrop fade in\"></div>').firstChild;\n\t}\n}\n\nModal.STATE = {\n\t/**\n\t * A selector for the element that should be automatically focused when the modal\n\t * becomes visible, or `false` if no auto focus should happen. Defaults to the\n\t * modal's close button.\n\t * @type {boolean|string}\n\t */\n\tautoFocus: {\n\t\tvalidator: val => val === false || core.isString(val),\n\t\tvalue: '.close'\n\t},\n\n\t/**\n\t * Content to be placed inside modal body. Can be either an html string or\n\t * a function that calls incremental dom for rendeirng the body.\n\t * @type {string|function()}\n\t */\n\tbody: {\n\t},\n\n\t/**\n\t * Content to be placed inside modal footer. Can be either an html string or\n\t * a function that calls incremental dom for rendeirng the footer.\n\t * @type {string|function()}\n\t */\n\tfooter: {\n\t},\n\n\t/**\n\t * Content to be placed inside modal header. Can be either an html string or\n\t * a function that calls incremental dom for rendeirng the header.\n\t * @type {string|function()}\n\t */\n\theader: {\n\t},\n\n\t/**\n\t * Whether modal should hide on esc.\n\t * @type {boolean}\n\t * @default true\n\t */\n\thideOnEscape: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: true\n\t},\n\n\t/**\n\t * Flag indicating if the default \"x\" button for closing the modal should be\n\t * added or not.\n\t * @type {boolean}\n\t * @default false\n\t */\n\tnoCloseButton: {\n\t\tvalue: false\n\t},\n\n\t/**\n\t * Whether overlay should be visible when modal is visible.\n\t * @type {boolean}\n\t * @default true\n\t */\n\toverlay: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: true\n\t},\n\n\t/**\n\t * Element to be used as overlay.\n\t * @type {Element}\n\t */\n\toverlayElement: {\n\t\tinitOnly: true,\n\t\tvalueFn: 'valueOverlayElementFn_'\n\t},\n\n\t/**\n\t * The ARIA role to be used for this modal.\n\t * @type {string}\n\t * @default 'dialog'\n\t */\n\trole: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'dialog'\n\t}\n};\n\nSoy.register(Modal, templates);\n\nexport default Modal;\n"],"sourceRoot":"/source/"}