{"version":3,"sources":["Treeview.js"],"names":["Treeview","keyboardFocusManager_","setFocusHandler","handleNextFocus_","bind","start","on","EVENT_FOCUSED","handleKeyboardFocused_","dispose","path","obj","nodes","i","length","children","node","getAttribute","split","data","lastFocusedRef_","ref","expanded","pop","NODE_REF_PREFIX","join","event","stopPropagation","getPath_","delegateTarget","getNodeObj","keyCode","handleLeftArrow_","handleRightArrow_","toggleExpandedState_","parentNode","push","nodeObj","register","STATE","internal","validator","isString","Array","isArray","valueFn"],"mappings":"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","file":"node_modules/metal-treeview/src/Treeview.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport templates from './Treeview.soy.js';\nimport Component from 'metal-component';\nimport KeyboardFocusManager from 'metal-keyboard-focus';\nimport Soy from 'metal-soy';\n\n/**\n * Treeview component.\n */\nclass Treeview extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.keyboardFocusManager_ = new KeyboardFocusManager(this, 'li')\n\t\t\t.setFocusHandler(this.handleNextFocus_.bind(this))\n\t\t\t.start();\n\t\tthis.keyboardFocusManager_.on(\n\t\t\tKeyboardFocusManager.EVENT_FOCUSED,\n\t\t\tthis.handleKeyboardFocused_.bind(this)\n\t\t);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposed() {\n\t\tthis.keyboardFocusManager_.dispose();\n\t\tthis.keyboardFocusManager_ = null;\n\t}\n\n\t/**\n\t * Gets the node object from the `nodes` state that is located at the given\n\t * index path.\n\t * @param {!Array<number>} path An array of indexes indicating where the\n\t *   searched node is located inside the `nodes` state.\n\t * @return {!Object}\n\t */\n\tgetNodeObj(path) {\n\t\tvar obj = this.nodes[path[0]];\n\t\tfor (var i = 1; i < path.length; i++) {\n\t\t\tobj = obj.children[path[i]];\n\t\t}\n\t\treturn obj;\n\t}\n\n\t/**\n\t * Gets the treeview path for a given node.\n\t * @param {!Element} node\n\t * @return {!Array<string>}\n\t * @protected\n\t */\n\tgetPath_(node) {\n\t\treturn node.getAttribute('data-treeview-path').split('-');\n\t}\n\n\t/**\n\t * Handles the `focused` event from `KeyboardFocusManager`. Stores the ref\n\t * of the last focused tree item so that we can retain it in the tab order\n\t * when the user leaves the tree.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\thandleKeyboardFocused_(data) {\n\t\tthis.lastFocusedRef_ = data.ref;\n\t}\n\n\t/**\n\t * Handles the left arrow being pressed. If the node is expanded, it will be\n\t * closed. If it's closed, its parent's ref will be returned so it can be\n\t * focused by `KeyboardFocusManager`.\n\t * @param {!Array<string>} path\n\t * @param {!Object} obj\n\t * @return {?string}\n\t * @protected\n\t */\n\thandleLeftArrow_(path, obj) {\n\t\tif (obj.expanded) {\n\t\t\tobj.expanded = false;\n\t\t\tthis.nodes = this.nodes;\n\t\t} else if (path.length > 1) {\n\t\t\tpath.pop();\n\t\t\treturn Treeview.NODE_REF_PREFIX + path.join('-');\n\t\t}\n\t}\n\n\t/**\n\t * Handles focus through keyboard.\n\t * @param {!Event} event\n\t * @return {boolean|string|Element}\n\t * @protected\n\t */\n\thandleNextFocus_(event) {\n\t\tevent.stopPropagation();\n\n\t\tconst path = this.getPath_(event.delegateTarget);\n\t\tconst obj = this.getNodeObj(path);\n\t\tswitch (event.keyCode) {\n\t\t\tcase 37:\n\t\t\t\treturn this.handleLeftArrow_(path, obj);\n\t\t\tcase 39:\n\t\t\t\treturn this.handleRightArrow_(path, obj);\n\t\t\tdefault:\n\t\t\t\t// Use default behavior for other keys (like up/down arrows).\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * This is called when one of this tree view's nodes is clicked.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleNodeClicked_(event) {\n\t\tthis.toggleExpandedState_(event.delegateTarget.parentNode.parentNode);\n\t}\n\n\t/**\n\t * This is called when one of this tree view's nodes receives a keypress.\n\t * If the pressed key is ENTER or SPACE, the node's expanded state will be toggled.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleNodeKeyUp_(event) {\n\t\tif (event.keyCode === 13 || event.keyCode === 32) {\n\t\t\tthis.toggleExpandedState_(event.delegateTarget);\n\t\t\tevent.stopPropagation();\n\t\t}\n\t}\n\n\t/**\n\t * Handles the right arrow being pressed. If the node is closed, it will be\n\t * expanded. If it's already expanded, the ref of its first child will be\n\t * returned so it can be focused by `KeyboardFocusManager`.\n\t * @param {!Array<string>} path\n\t * @param {!Object} obj\n\t * @return {?string}\n\t * @protected\n\t */\n\thandleRightArrow_(path, obj) {\n\t\tif (obj.expanded) {\n\t\t\tpath.push(0);\n\t\t\treturn Treeview.NODE_REF_PREFIX + path.join('-');\n\t\t} else if (obj.children){\n\t\t\tobj.expanded = true;\n\t\t\tthis.nodes = this.nodes;\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the expanded state for the given tree node.\n\t * @param {!Element} node\n\t * @protected\n\t */\n\ttoggleExpandedState_(node) {\n\t\tvar nodeObj = this.getNodeObj(this.getPath_(node));\n\t\tnodeObj.expanded = !nodeObj.expanded;\n\t\tthis.nodes = this.nodes;\n\t}\n}\nSoy.register(Treeview, templates);\n\n// The prefix used for tree item nodes' refs.\nTreeview.NODE_REF_PREFIX = 'node-';\n\n/**\n * Treeview state definition.\n * @type {!Object}\n * @static\n */\nTreeview.STATE = {\n\t/**\n\t * The ref of the last item that has been focused, so that we can retain only\n\t * that node in the tab order.\n\t * @type {string}\n\t */\n\tlastFocusedRef_: {\n\t\tinternal: true,\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * This tree view's nodes. Each node should have a name, and can optionally\n\t * have nested children nodes. It should also indicate if its children are\n\t * expanded or not.\n\t * @type {Array<!{children: Array, expanded: boolean?, name: string}>}\n\t * @default []\n\t */\n\tnodes: {\n\t\tvalidator: Array.isArray,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t}\n};\n\nexport default Treeview;\n"],"sourceRoot":"/source/"}