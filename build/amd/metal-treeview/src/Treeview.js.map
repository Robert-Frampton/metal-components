{"version":3,"sources":["Treeview.js"],"names":["Treeview","attached","keyboardFocusManager_","setFocusHandler","handleNextFocus_","bind","start","on","EVENT_FOCUSED","handleKeyboardFocused_","disposed","dispose","getNodeObj","path","obj","nodes","i","length","children","getPath_","node","getAttribute","split","data","lastFocusedRef_","ref","handleLeftArrow_","expanded","pop","NODE_REF_PREFIX","join","event","stopPropagation","delegateTarget","keyCode","handleRightArrow_","handleNodeClicked_","toggleExpandedState_","parentNode","handleNodeKeyUp_","push","nodeObj","register","STATE","internal","validator","isString","Array","isArray","valueFn"],"mappings":"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","file":"node_modules/metal-treeview/src/Treeview.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport templates from './Treeview.soy.js';\nimport Component from 'metal-component';\nimport KeyboardFocusManager from 'metal-keyboard-focus';\nimport Soy from 'metal-soy';\n\n/**\n * Treeview component.\n */\nclass Treeview extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.keyboardFocusManager_ = new KeyboardFocusManager(this, 'li')\n\t\t\t.setFocusHandler(this.handleNextFocus_.bind(this))\n\t\t\t.start();\n\t\tthis.keyboardFocusManager_.on(\n\t\t\tKeyboardFocusManager.EVENT_FOCUSED,\n\t\t\tthis.handleKeyboardFocused_.bind(this)\n\t\t);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposed() {\n\t\tthis.keyboardFocusManager_.dispose();\n\t\tthis.keyboardFocusManager_ = null;\n\t}\n\n\t/**\n\t * Gets the node object from the `nodes` state that is located at the given\n\t * index path.\n\t * @param {!Array<number>} path An array of indexes indicating where the\n\t *   searched node is located inside the `nodes` state.\n\t * @return {!Object}\n\t */\n\tgetNodeObj(path) {\n\t\tvar obj = this.nodes[path[0]];\n\t\tfor (var i = 1; i < path.length; i++) {\n\t\t\tobj = obj.children[path[i]];\n\t\t}\n\t\treturn obj;\n\t}\n\n\t/**\n\t * Gets the treeview path for a given node.\n\t * @param {!Element} node\n\t * @return {!Array<string>}\n\t * @protected\n\t */\n\tgetPath_(node) {\n\t\treturn node.getAttribute('data-treeview-path').split('-');\n\t}\n\n\t/**\n\t * Handles the `focused` event from `KeyboardFocusManager`. Stores the ref\n\t * of the last focused tree item so that we can retain it in the tab order\n\t * when the user leaves the tree.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\thandleKeyboardFocused_(data) {\n\t\tthis.lastFocusedRef_ = data.ref;\n\t}\n\n\t/**\n\t * Handles the left arrow being pressed. If the node is expanded, it will be\n\t * closed. If it's closed, its parent's ref will be returned so it can be\n\t * focused by `KeyboardFocusManager`.\n\t * @param {!Array<string>} path\n\t * @param {!Object} obj\n\t * @return {?string}\n\t * @protected\n\t */\n\thandleLeftArrow_(path, obj) {\n\t\tif (obj.expanded) {\n\t\t\tobj.expanded = false;\n\t\t\tthis.nodes = this.nodes;\n\t\t} else if (path.length > 1) {\n\t\t\tpath.pop();\n\t\t\treturn Treeview.NODE_REF_PREFIX + path.join('-');\n\t\t}\n\t}\n\n\t/**\n\t * Handles focus through keyboard.\n\t * @param {!Event} event\n\t * @return {boolean|string|Element}\n\t * @protected\n\t */\n\thandleNextFocus_(event) {\n\t\tevent.stopPropagation();\n\n\t\tconst path = this.getPath_(event.delegateTarget);\n\t\tconst obj = this.getNodeObj(path);\n\t\tswitch (event.keyCode) {\n\t\t\tcase 37:\n\t\t\t\treturn this.handleLeftArrow_(path, obj);\n\t\t\tcase 39:\n\t\t\t\treturn this.handleRightArrow_(path, obj);\n\t\t\tdefault:\n\t\t\t\t// Use default behavior for other keys (like up/down arrows).\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * This is called when one of this tree view's nodes is clicked.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleNodeClicked_(event) {\n\t\tthis.toggleExpandedState_(event.delegateTarget.parentNode.parentNode);\n\t}\n\n\t/**\n\t * This is called when one of this tree view's nodes receives a keypress.\n\t * If the pressed key is ENTER or SPACE, the node's expanded state will be toggled.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleNodeKeyUp_(event) {\n\t\tif (event.keyCode === 13 || event.keyCode === 32) {\n\t\t\tthis.toggleExpandedState_(event.delegateTarget);\n\t\t\tevent.stopPropagation();\n\t\t}\n\t}\n\n\t/**\n\t * Handles the right arrow being pressed. If the node is closed, it will be\n\t * expanded. If it's already expanded, the ref of its first child will be\n\t * returned so it can be focused by `KeyboardFocusManager`.\n\t * @param {!Array<string>} path\n\t * @param {!Object} obj\n\t * @return {?string}\n\t * @protected\n\t */\n\thandleRightArrow_(path, obj) {\n\t\tif (obj.expanded) {\n\t\t\tpath.push(0);\n\t\t\treturn Treeview.NODE_REF_PREFIX + path.join('-');\n\t\t} else if (obj.children){\n\t\t\tobj.expanded = true;\n\t\t\tthis.nodes = this.nodes;\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the expanded state for the given tree node.\n\t * @param {!Element} node\n\t * @protected\n\t */\n\ttoggleExpandedState_(node) {\n\t\tvar nodeObj = this.getNodeObj(this.getPath_(node));\n\t\tnodeObj.expanded = !nodeObj.expanded;\n\t\tthis.nodes = this.nodes;\n\t}\n}\nSoy.register(Treeview, templates);\n\n// The prefix used for tree item nodes' refs.\nTreeview.NODE_REF_PREFIX = 'node-';\n\n/**\n * Treeview state definition.\n * @type {!Object}\n * @static\n */\nTreeview.STATE = {\n\t/**\n\t * The ref of the last item that has been focused, so that we can retain only\n\t * that node in the tab order.\n\t * @type {string}\n\t */\n\tlastFocusedRef_: {\n\t\tinternal: true,\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * This tree view's nodes. Each node should have a name, and can optionally\n\t * have nested children nodes. It should also indicate if its children are\n\t * expanded or not.\n\t * @type {Array<!{children: Array, expanded: boolean?, name: string}>}\n\t * @default []\n\t */\n\tnodes: {\n\t\tvalidator: Array.isArray,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t}\n};\n\nexport default Treeview;\n"],"sourceRoot":"/source/"}