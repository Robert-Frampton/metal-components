{"version":3,"sources":["Disposable.js"],"names":["Disposable","disposed_","dispose","disposeInternal","isDisposed"],"mappings":";AAAA;;AAEA;;;;;;;;;;;;;;;;;;KAOMA,U;AACL,wBAAc;AAAA;;AACb;;;;;AAKA,QAAKC,SAAL,GAAiB,KAAjB;AACA;;AAED;;;;;uBAGAC,O,sBAAU;AACT,OAAI,CAAC,KAAKD,SAAV,EAAqB;AACpB,SAAKE,eAAL;AACA,SAAKF,SAAL,GAAiB,IAAjB;AACA;AACD,G;;uBAODE,e,8BAAkB,CAAE,C;;uBAMpBC,U,yBAAa;AACZ,UAAO,KAAKH,SAAZ;AACA,G;;;;;mBAGaD,U","file":"node_modules/metal/src/disposable/Disposable.js","sourcesContent":["'use strict';\n\n/**\n * Disposable utility. When inherited provides the `dispose` function to its\n * subclass, which is responsible for disposing of any object references\n * when an instance won't be used anymore. Subclasses should override\n * `disposeInternal` to implement any specific disposing logic.\n * @constructor\n */\nclass Disposable {\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if this instance has already been disposed.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.disposed_ = false;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references. Calls `disposeInternal`.\n\t */\n\tdispose() {\n\t\tif (!this.disposed_) {\n\t\t\tthis.disposeInternal();\n\t\t\tthis.disposed_ = true;\n\t\t}\n\t}\n\n\t/**\n\t * Subclasses should override this method to implement any specific\n\t * disposing logic (like clearing references and calling `dispose` on other\n\t * disposables).\n\t */\n\tdisposeInternal() {}\n\n\t/**\n\t * Checks if this instance has already been disposed.\n\t * @return {boolean}\n\t */\n\tisDisposed() {\n\t\treturn this.disposed_;\n\t}\n}\n\nexport default Disposable;\n"],"sourceRoot":"/source/"}