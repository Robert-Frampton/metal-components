{"version":3,"sources":["Dropdown.js"],"names":["Dropdown","eventHandler_","add","on","document","handleDocClick_","bind","removeAllListeners","expanded","event","element","contains","target","close","val","mixin","valueClassMapFn_","isNumber","toLowerCase","TopLeft","BottomLeft","alignElementSelector","alignElement","querySelector","bodyElement","alignedPosition","align","position","isValidPosition","dropdownMenu","innerHTML","TopCenter","TopRight","BottomCenter","BottomRight","RightCenter","LeftCenter","wrapper","createElement","i","childNodes","length","hasClass","appendChild","cloneNode","register","STATE","validator","isString","body","isHtml","valueFn","classMap","setter","isObject","header","value","positionClassOnMenu"],"mappings":"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","file":"node_modules/metal-dropdown/src/Dropdown.js","sourcesContent":["'use strict';\n\nimport { core, object } from 'metal';\nimport dom from 'metal-dom';\nimport { Align } from 'metal-position';\nimport Component from 'metal-component';\nimport { EventHandler } from 'metal-events';\nimport Soy from 'metal-soy';\n\nimport templates from './Dropdown.soy.js';\n\n/**\n * Dropdown component.\n */\nclass Dropdown extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tsuper.attached();\n\t\tthis.eventHandler_.add(dom.on(document, 'click', this.handleDocClick_.bind(this)));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\tthis.eventHandler_ = new EventHandler();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tsuper.detached();\n\t\tthis.eventHandler_.removeAllListeners();\n\t}\n\n\t/**\n\t * Closes the dropdown.\n\t */\n\tclose() {\n\t\tthis.expanded = false;\n\t}\n\n\t/**\n\t * Checks if the dropdown is currently open.\n\t * @return {boolean}\n\t */\n\tisOpen() {\n\t\treturn this.expanded;\n\t}\n\n\t/**\n\t * Handles document click in order to hide menu.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleDocClick_(event) {\n\t\tif (this.element.contains(event.target)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.close();\n\t}\n\n\t/**\n\t * Opens the dropdown.\n\t */\n\topen() {\n\t\tthis.expanded = true;\n\t}\n\n\t/**\n\t * The setter function for the `classMap` staet.\n\t * @param {Object} val\n\t * @return {!Object}\n\t * @protected\n\t */\n\tsetterClassMapFn_(val) {\n\t\treturn object.mixin(this.valueClassMapFn_(), val);\n\t}\n\n\t/**\n\t * The setter function for the `position` state. Converts the supported\n\t * string positions into the appropriate `Align` position constants.\n\t * @param {string|number} val\n\t * @return {number}\n\t * @protected\n\t */\n\tsetterPositionFn_(val) {\n\t\tif (core.isNumber(val)) {\n\t\t\treturn val;\n\t\t}\n\t\treturn val.toLowerCase() === 'up' ? Align.TopLeft : Align.BottomLeft;\n\t}\n\n\t/**\n\t * Synchronization logic for `expanded` state.\n\t * @param {boolean} expanded\n\t */\n\tsyncExpanded(expanded) {\n\t\tif (expanded && this.alignElementSelector) {\n\t\t\tvar alignElement = this.element.querySelector(this.alignElementSelector);\n\t\t\tif (alignElement) {\n\t\t\t\tvar bodyElement = this.element.querySelector('.dropdown-menu');\n\t\t\t\tthis.alignedPosition = Align.align(bodyElement, alignElement, this.position);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the dropdown, closing it when open or opening it when closed.\n\t */\n\ttoggle() {\n\t\tthis.expanded = !this.expanded;\n\t}\n\n\t/**\n\t * Validator for the `position` state.\n\t * @param {string|number} position\n\t * @return {boolean}\n\t * @protected\n\t */\n\tvalidatePosition_(position) {\n\t\tif (Align.isValidPosition(position)) {\n\t\t\treturn true;\n\t\t}\n\t\tswitch (position.toLowerCase()) {\n\t\t\tcase 'up':\n\t\t\tcase 'down':\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the default value for the `body` state. Retrieves existing\n\t * html for the body from the element, if there is any.\n\t * @return {?string}\n\t * @protected\n\t */\n\tvalueBodyFn_() {\n\t\tvar dropdownMenu = this.element && this.element.querySelector('.dropdown-menu');\n\t\treturn dropdownMenu ? dropdownMenu.innerHTML : '';\n\t}\n\n\t/**\n\t * Gets the default value for the `classMap` state.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tvalueClassMapFn_() {\n\t\treturn {\n\t\t\t[Align.TopLeft]: 'dropup',\n\t\t\t[Align.TopCenter]: 'dropup',\n\t\t\t[Align.TopRight]: 'dropup',\n\t\t\t[Align.BottomLeft]: 'dropdown',\n\t\t\t[Align.BottomCenter]: 'dropdown',\n\t\t\t[Align.BottomRight]: 'dropdown',\n\t\t\t[Align.RightCenter]: 'dropright',\n\t\t\t[Align.LeftCenter]: 'dropleft'\n\t\t};\n\t}\n\n\t/**\n\t * Gets the default value for the `header` state. Retrieves existing\n\t * html for the header from the element, if there is any.\n\t * @return {?string}\n\t * @protected\n\t */\n\tvalueHeaderFn_() {\n\t\tif (this.element) {\n\t\t\tvar wrapper = document.createElement('div');\n\t\t\tfor (var i = 0; i < this.element.childNodes.length; i++) {\n\t\t\t\tif (dom.hasClass(this.element.childNodes[i], 'dropdown-menu')) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\twrapper.appendChild(this.element.childNodes[i].cloneNode(true));\n\t\t\t}\n\t\t\treturn wrapper.innerHTML;\n\t\t}\n\t\treturn '';\n\t}\n}\nSoy.register(Dropdown, templates);\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nDropdown.STATE = {\n\t/**\n\t * The current position of the tooltip after being aligned via `Align.align`.\n\t * @type {number}\n\t */\n\talignedPosition: {\n\t\tvalidator: Align.isValidPosition\n\t},\n\n\t/**\n\t * Optional selector for finding the element that the dropdown should be\n\t * aligned to. If given, the dropdown will automatically find the best position\n\t * to align, when the specified position doesn't work. Otherwise it will\n\t * always just follow the given position, even if it's not ideal.\n\t * @type {string}\n\t */\n\talignElementSelector: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The dropdown's body content.\n\t * @type {string}\n\t */\n\tbody: {\n\t\tisHtml: true,\n\t\tvalueFn: 'valueBodyFn_'\n\t},\n\n\t/**\n\t * A map from `Align` position constants to the CSS class that should be\n\t * added to the dropdown when it's aligned in that position.\n\t * @type {!Object}\n\t */\n\tclassMap: {\n\t\tsetter: 'setterClassMapFn_',\n\t\tvalidator: core.isObject,\n\t\tvalueFn: 'valueClassMapFn_'\n\t},\n\n\t/**\n\t * The dropdown's header content.\n\t * @type {string}\n\t */\n\theader: {\n\t\tisHtml: true,\n\t\tvalueFn: 'valueHeaderFn_'\n\t},\n\n\t/**\n\t * Flag indicating if the dropdown is expanded (open) or not.\n\t * @type {boolean}\n\t * @default false\n\t */\n\texpanded: {\n\t\tvalue: false\n\t},\n\n\t/**\n\t * The position of the dropdown (either 'up', 'down' or any of the position\n\t * constants available in `Align`).\n\t * @type {string|number}\n\t * @default Align.BottomLeft\n\t */\n\tposition: {\n\t\tsetter: 'setterPositionFn_',\n\t\tvalue: Align.BottomLeft,\n\t\tvalidator: 'validatePosition_'\n\t},\n\n\t/**\n\t * Flag indicating if the position class (specified by `classMap` state)\n\t * should be added on the \"dropdown-menu\" element, instead of the main element.\n\t * @type {boolean}\n\t */\n\tpositionClassOnMenu: {\n\t\tvalue: false\n\t}\n};\n\nexport default Dropdown;\n"],"sourceRoot":"/source/"}