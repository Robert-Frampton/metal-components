{"version":3,"sources":["Clipboard.js"],"names":["Clipboard","opt_config","listener_","on","selector","e","initialize","dispose","clipboardAction_","ClipboardAction","host","action","delegateTarget","target","text","trigger","STATE","validator","isFunction","value","getAttribute","isString","document","querySelector","selectValue","selectTarget","blur","window","getSelection","removeAllRanges","succeeded","execCommand","err","handleResult","removeFakeElement","emit","selectedText","clearSelection","bind","fake","exitDocument","removeFakeHandler","removeListener","nodeName","select","range","createRange","selection","selectNodeContents","addRange","toString","copyText","once","createElement","style","position","left","setAttribute","enterDocument","val","isElement"],"mappings":"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","file":"node_modules/metal-clipboard/src/Clipboard.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport State from 'metal-state';\n\n/**\n * Clipboard component.\n */\nclass Clipboard extends State {\n\t/**\n\t * Delegates a click event to the passed selector.\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\tthis.listener_ = dom.on(this.selector, 'click', (e) => this.initialize(e));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.listener_.dispose();\n\t\tthis.listener_ = null;\n\t\tif (this.clipboardAction_) {\n\t\t\tthis.clipboardAction_.dispose();\n\t\t\tthis.clipboardAction_ = null;\n\t\t}\n\t}\n\n\t/**\n\t * Defines a new `ClipboardAction` on each click event.\n\t * @param {!Event} e\n\t */\n\tinitialize(e) {\n\t\tif (this.clipboardAction_) {\n\t\t\tthis.clipboardAction_ = null;\n\t\t}\n\n\t\tthis.clipboardAction_ = new ClipboardAction({\n\t\t\thost: this,\n\t\t\taction: this.action(e.delegateTarget),\n\t\t\ttarget: this.target(e.delegateTarget),\n\t\t\ttext: this.text(e.delegateTarget),\n\t\t\ttrigger: e.delegateTarget\n\t\t});\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nClipboard.STATE = {\n\t/**\n\t * A function that returns the name of the clipboard action that should be done\n\t * when for the given element (either 'copy' or 'cut').\n\t * @type {!function(!Element)}\n\t */\n\taction: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(delegateTarget) {\n\t\t\treturn delegateTarget.getAttribute('data-action');\n\t\t}\n\t},\n\n\t/**\n\t * The selector for all elements that should be listened for clipboard actions.\n\t * @type {string}\n\t */\n\tselector: {\n\t\tvalue: '[data-clipboard]',\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * A function that returns an element that has the content to be copied to the\n\t * clipboard.\n\t * @type {!function(!Element)}\n\t */\n\ttarget: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(delegateTarget) {\n\t\t\treturn document.querySelector(delegateTarget.getAttribute('data-target'));\n\t\t}\n\t},\n\n\t/**\n\t * A function that returns the text to be copied to the clipboard.\n\t * @type {!function(!Element)}\n\t */\n\ttext: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(delegateTarget) {\n\t\t\treturn delegateTarget.getAttribute('data-text');\n\t\t}\n\t}\n};\n\n/**\n * ClipboardAction component.\n */\nclass ClipboardAction extends State {\n\t/**\n\t * Initializes selection either from a `text` or `target` state.\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\tif (this.text) {\n\t\t\tthis.selectValue();\n\t\t} else if (this.target) {\n\t\t\tthis.selectTarget();\n\t\t}\n\t}\n\n\t/**\n\t * Removes current selection and focus from `target` element.\n\t */\n\tclearSelection() {\n\t\tif (this.target) {\n\t\t\tthis.target.blur();\n\t\t}\n\n\t\twindow.getSelection().removeAllRanges();\n\t}\n\n\t/**\n\t * Executes the copy operation based on the current selection.\n\t */\n\tcopyText() {\n\t\tlet succeeded;\n\n\t\ttry {\n\t\t\tsucceeded = document.execCommand(this.action);\n\t\t} catch (err) {\n\t\t\tsucceeded = false;\n\t\t}\n\n\t\tthis.handleResult(succeeded);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.removeFakeElement();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Emits an event based on the copy operation result.\n\t * @param {boolean} succeeded\n\t */\n\thandleResult(succeeded) {\n\t\tif (succeeded) {\n\t\t\tthis.host.emit('success', {\n\t\t\t\taction: this.action,\n\t\t\t\ttext: this.selectedText,\n\t\t\t\ttrigger: this.trigger,\n\t\t\t\tclearSelection: this.clearSelection.bind(this)\n\t\t\t});\n\t\t} else {\n\t\t\tthis.host.emit('error', {\n\t\t\t\taction: this.action,\n\t\t\t\ttrigger: this.trigger,\n\t\t\t\tclearSelection: this.clearSelection.bind(this)\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Removes the fake element that was added to the document, as well as its\n\t * listener.\n\t */\n\tremoveFakeElement() {\n\t\tif (this.fake) {\n\t\t\tdom.exitDocument(this.fake);\n\t\t}\n\n\t\tif (this.removeFakeHandler) {\n\t\t\tthis.removeFakeHandler.removeListener();\n\t\t}\n\t}\n\n\t/**\n\t * Selects the content from element passed on `target` state.\n\t */\n\tselectTarget() {\n\t\tif (this.target.nodeName === 'INPUT' || this.target.nodeName === 'TEXTAREA') {\n\t\t\tthis.target.select();\n\t\t\tthis.selectedText = this.target.value;\n\t\t} else {\n\t\t\tlet range = document.createRange();\n\t\t\tlet selection = window.getSelection();\n\n\t\t\trange.selectNodeContents(this.target);\n\t\t\tselection.addRange(range);\n\t\t\tthis.selectedText = selection.toString();\n\t\t}\n\n\t\tthis.copyText();\n\t}\n\n\t/**\n\t * Selects the content from value passed on `text` state.\n\t */\n\tselectValue() {\n\t\tthis.removeFakeElement();\n\t\tthis.removeFakeHandler = dom.once(document, 'click', this.removeFakeElement.bind(this));\n\n\t\tthis.fake = document.createElement('textarea');\n\t\tthis.fake.style.position = 'fixed';\n\t\tthis.fake.style.left = '-9999px';\n\t\tthis.fake.setAttribute('readonly', '');\n\t\tthis.fake.value = this.text;\n\t\tthis.selectedText = this.text;\n\n\t\tdom.enterDocument(this.fake);\n\n\t\tthis.fake.select();\n\t\tthis.copyText();\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nClipboardAction.STATE = {\n\t/**\n\t * The action to be performed (either 'copy' or 'cut').\n\t * @type {string}\n\t * @default 'copy'\n\t */\n\taction: {\n\t\tvalue: 'copy',\n\t\tvalidator: function(val) {\n\t\t\treturn val === 'copy' || val === 'cut';\n\t\t}\n\t},\n\n\t/**\n\t * A reference to the `Clipboard` base class.\n\t * @type {!Clipboard}\n\t */\n\thost: {\n\t\tvalidator: function(val) {\n\t\t\treturn val instanceof Clipboard;\n\t\t}\n\t},\n\n\t/**\n\t * The text that is current selected.\n\t * @type {string}\n\t */\n\tselectedText: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The ID of an element that will be have its content copied.\n\t * @type {Element}\n\t */\n\ttarget: {\n\t\tvalidator: core.isElement\n\t},\n\n\t/**\n\t * The text to be copied.\n\t * @type {string}\n\t */\n\ttext: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The element that when clicked initiates a clipboard action.\n\t * @type {!Element}\n\t */\n\ttrigger: {\n\t\tvalidator: core.isElement\n\t}\n};\n\nexport default Clipboard;\n"],"sourceRoot":"/source/"}