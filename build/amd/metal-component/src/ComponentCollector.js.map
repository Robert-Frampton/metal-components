{"version":3,"sources":["ComponentCollector.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAKM;;;;;;;;;+BAKL,qCAAa,WAAW;AACvB,sBAAmB,UAAnB,CAA8B,UAAU,EAAV,CAA9B,GAA8C,SAA9C,CADuB;;;AALnB,+BAiBL,2CAAgB,qBAAqB,UAAU;AAC9C,OAAI,YAAY,mBAAmB,UAAnB,CAA8B,CAAC,YAAY,EAAZ,CAAD,CAAiB,EAAjB,CAA1C,CAD0C;AAE9C,OAAI,CAAC,SAAD,EAAY;AACf,QAAI,gBAAgB,mBAAhB,CADW;AAEf,QAAI,YAAK,QAAL,CAAc,aAAd,CAAJ,EAAkC;AACjC,qBAAgB,4BAAkB,cAAlB,CAAiC,mBAAjC,CAAhB,CADiC;KAAlC;AAGA,gBAAY,IAAI,aAAJ,CAAkB,QAAlB,CAAZ,CALe;IAAhB;AAOA,UAAO,SAAP,CAT8C;;;AAjB1C,+BAiCL,2CAAgB,WAAW;AAC1B,UAAO,mBAAmB,UAAnB,CAA8B,UAAU,EAAV,CAArC,CAD0B;;;AAjCtB,+BA2CL,2CAAgB,IAAI,UAAU;AAC7B,OAAI,YAAY,mBAAmB,UAAnB,CAA8B,EAA9B,CAAZ,CADyB;AAE7B,OAAI,aAAa,QAAb,EAAuB;AAC1B,cAAU,QAAV,CAAmB,QAAnB,EAD0B;IAA3B;AAGA,UAAO,SAAP,CAL6B;;;SA3CzB;;;;;;;;;;AAwDN,oBAAmB,UAAnB,GAAgC,EAAhC;;mBAEe","file":"node_modules/metal-component/src/ComponentCollector.js","sourcesContent":["'use strict';\n\nimport ComponentRegistry from './ComponentRegistry';\nimport { core, Disposable } from 'metal';\n\nclass ComponentCollector extends Disposable {\n\t/**\n\t * Adds a component to this collector.\n\t * @param {!Component} component\n\t */\n\taddComponent(component) {\n\t\tComponentCollector.components[component.id] = component;\n\t}\n\n\t/**\n\t * Creates the appropriate component from the given config data if it doesn't\n\t * exist yet.\n\t * @param {string|!Function} componentNameOrCtor The name or constructor for\n\t *     the component to be created.\n\t * @param {Object=} opt_data\n\t * @return {!Component} The component instance.\n\t */\n\tcreateComponent(componentNameOrCtor, opt_data) {\n\t\tvar component = ComponentCollector.components[(opt_data || {}).id];\n\t\tif (!component) {\n\t\t\tvar ConstructorFn = componentNameOrCtor;\n\t\t\tif (core.isString(ConstructorFn)) {\n\t\t\t\tConstructorFn = ComponentRegistry.getConstructor(componentNameOrCtor);\n\t\t\t}\n\t\t\tcomponent = new ConstructorFn(opt_data);\n\t\t}\n\t\treturn component;\n\t}\n\n\t/**\n\t * Removes the given component from this collector.\n\t * @param {!Component} component\n\t */\n\tremoveComponent(component) {\n\t\tdelete ComponentCollector.components[component.id];\n\t}\n\n\t/**\n\t * Updates an existing component instance with new state values.\n\t * @param {string} id The id of the component to be created or updated.\n\t * @param {Object=} opt_data\n\t * @return {Component} The extracted component instance.\n\t */\n\tupdateComponent(id, opt_data) {\n\t\tvar component = ComponentCollector.components[id];\n\t\tif (component && opt_data) {\n\t\t\tcomponent.setState(opt_data);\n\t\t}\n\t\treturn component;\n\t}\n}\n\n/**\n * Holds all collected components, indexed by their id.\n * @type {!Object<string, !Component>}\n */\nComponentCollector.components = {};\n\nexport default ComponentCollector;\n"],"sourceRoot":"/source/"}