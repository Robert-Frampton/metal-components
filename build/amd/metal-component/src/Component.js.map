{"version":3,"sources":["Component.js"],"names":["Component","opt_config","opt_parentElement","attachedListeners_","components","elementEventProxy_","eventsStateKeyHandler_","inDocument","initialConfig_","wasRendered","DEFAULT_ELEMENT_PARENT","document","body","mergeSuperClassesProperty","constructor","mergeElementClasses_","firstDefinedValue","element","renderer_","createRenderer","on","handleRendererRendered_","bind","dataManager_","createDataManager","emit","handleStateChanged_","newListenerHandle_","handleNewListener_","onEventsChanged_","addListenersFromObj_","get","created","componentCreated_","render_","onElementChanged_","events","eventNames","Object","keys","i","length","info","extractListenerInfo_","fn","handler","selector","delegate","add","attach","opt_siblingElement","renderElement_","parent","sibling","attached","addSubComponent","ref","component","DATA_MANAGER_MERGED","DATA","RENDERER_MERGED","eventName","callback","detach","parentNode","removeChild","detached","disposed","disposeInternal","dispose","disposeSubComponents","isDisposed","value","isObject","isFunction","isString","getListenerFn","getDataManager","getInitialConfig","fnName","console","error","getFunctionName","getState","getStateKeys","fireStateKeyChange_","key","opt_change","charAt","toUpperCase","slice","manager","newVal","prevVal","undefined","call","getRenderer","data","rendered","event","syncStateFromChanges_","changes","isComponentCtor","prototype","COMPONENT_FLAG","values","marked","filter","val","join","setUpProxy_","setOriginEmitter","syncVisible","removeAllListeners","render","Ctor","opt_configOrElement","opt_element","config","isElement","instance","opt_skipRender","syncState_","renderAsSubComponent","toElement","insertBefore","setState","state","opt_callback","setterElementClassesFn_","ELEMENT_CLASSES_MERGED","trim","proxy","map","proxyEvent","removeListener","getSyncKeys","style","display","validatorEventsFn_","isDefAndNotNull","elementVal_","prev","elementClasses","setter","validator","visible","isBoolean","DATA_MANAGER","ELEMENT_CLASSES","RENDERER","SYNC_UPDATES"],"mappings":"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","file":"node_modules/metal-component/src/Component.js","sourcesContent":["'use strict';\n\nimport { array, core, object } from 'metal';\nimport { dom, DomEventEmitterProxy } from 'metal-dom';\nimport ComponentDataManager from './ComponentDataManager';\nimport ComponentRenderer from './ComponentRenderer';\nimport { EventEmitter, EventHandler } from 'metal-events';\n\n/**\n * Component collects common behaviors to be followed by UI components, such\n * as Lifecycle, CSS classes management, events encapsulation and support for\n * different types of rendering.\n * Rendering logic can be done by either:\n *     - Listening to the `render` event inside the `created` lifecycle function\n *       and adding the rendering logic to the listener.\n *     - Using an existing implementation of `ComponentRenderer` like `Soy`,\n *       and following its patterns.\n *     - Building your own implementation of a `ComponentRenderer`.\n * Specifying the renderer that will be used can be done by setting the RENDERER\n * static variable to the renderer's constructor function.\n *\n * Example:\n *\n * <code>\n * class CustomComponent extends Component {\n *   constructor(config) {\n *     super(config);\n *   }\n *\n *   created() {\n *   }\n *\n *   rendered() {\n *   }\n *\n *   attached() {\n *   }\n *\n *   detached() {\n *   }\n * }\n *\n * CustomComponent.RENDERER = MyRenderer;\n *\n * CustomComponent.STATE = {\n *   title: { value: 'Title' },\n *   fontSize: { value: '10px' }\n * };\n * </code>\n *\n * @extends {State}\n */\nclass Component extends EventEmitter {\n\t/**\n\t * Constructor function for `Component`.\n\t * @param {Object=} opt_config An object with the initial values for this\n\t *     component's state.\n\t * @param {boolean|string|Element=} opt_parentElement The element where the\n\t *     component should be rendered. Can be given as a selector or an element.\n\t *     If `false` is passed, the component won't be rendered automatically\n\t *     after created.\n\t * @constructor\n\t */\n\tconstructor(opt_config, opt_parentElement) {\n\t\tsuper();\n\n\t\t/**\n\t\t * All listeners that were attached until the `DomEventEmitterProxy` instance\n\t\t * was created.\n\t\t * @type {!Object<string, bool>}\n\t\t * @protected\n\t\t */\n\t\tthis.attachedListeners_ = {};\n\n\t\t/**\n\t\t * Gets all nested components.\n\t\t * @type {!Array<!Component>}\n\t\t */\n\t\tthis.components = {};\n\n\t\t/**\n\t\t * Instance of `DomEventEmitterProxy` which proxies events from the component's\n\t\t * element to the component itself.\n\t\t * @type {DomEventEmitterProxy}\n\t\t * @protected\n\t\t */\n\t\tthis.elementEventProxy_ = null;\n\n\t\t/**\n\t\t * The `EventHandler` instance for events attached from the `events` state key.\n\t\t * @type {!EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.eventsStateKeyHandler_ = new EventHandler();\n\n\t\t/**\n\t\t * Whether the element is in document.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.inDocument = false;\n\n\t\t/**\n\t\t * The initial config option passed to this constructor.\n\t\t * @type {!Object}\n\t\t * @protected\n\t\t */\n\t\tthis.initialConfig_ = opt_config || {};\n\n\t\t/**\n\t\t * Whether the element was rendered.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.wasRendered = false;\n\n\t\t/**\n\t\t * The component's element will be appended to the element this variable is\n\t\t * set to, unless the user specifies another parent when calling `render` or\n\t\t * `attach`.\n\t\t * @type {!Element}\n\t\t */\n\t\tthis.DEFAULT_ELEMENT_PARENT = document.body;\n\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'ELEMENT_CLASSES', this.mergeElementClasses_);\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'SYNC_UPDATES', array.firstDefinedValue);\n\n\t\tthis.element = this.initialConfig_.element;\n\n\t\tthis.renderer_ = this.createRenderer();\n\t\tthis.renderer_.on('rendered', this.handleRendererRendered_.bind(this));\n\n\t\tthis.dataManager_ = this.createDataManager();\n\t\tthis.emit('dataManagerCreated');\n\n\t\tthis.on('stateChanged', this.handleStateChanged_);\n\t\tthis.newListenerHandle_ = this.on('newListener', this.handleNewListener_);\n\t\tthis.on('eventsChanged', this.onEventsChanged_);\n\t\tthis.addListenersFromObj_(this.dataManager_.get('events'));\n\n\t\tthis.created();\n\t\tthis.componentCreated_ = true;\n\t\tif (opt_parentElement !== false) {\n\t\t\tthis.render_(opt_parentElement);\n\t\t}\n\t\tthis.on('elementChanged', this.onElementChanged_);\n\t}\n\n\t/**\n\t * Getter logic for the element property.\n\t * @return {Element}\n\t */\n\tget element() {\n\t\treturn this.elementVal_;\n\t}\n\n\t/**\n\t * Adds the listeners specified in the given object.\n\t * @param {Object} events\n\t * @protected\n\t */\n\taddListenersFromObj_(events) {\n\t\tvar eventNames = Object.keys(events || {});\n\t\tfor (var i = 0; i < eventNames.length; i++) {\n\t\t\tvar info = this.extractListenerInfo_(events[eventNames[i]]);\n\t\t\tif (info.fn) {\n\t\t\t\tvar handler;\n\t\t\t\tif (info.selector) {\n\t\t\t\t\thandler = this.delegate(eventNames[i], info.selector, info.fn);\n\t\t\t\t} else {\n\t\t\t\t\thandler = this.on(eventNames[i], info.fn);\n\t\t\t\t}\n\t\t\t\tthis.eventsStateKeyHandler_.add(handler);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Invokes the attached Lifecycle. When attached, the component element is\n\t * appended to the DOM and any other action to be performed must be\n\t * implemented in this method, such as, binding DOM events. A component can\n\t * be re-attached multiple times.\n\t * @param {(string|Element)=} opt_parentElement Optional parent element\n\t *     to render the component.\n\t * @param {(string|Element)=} opt_siblingElement Optional sibling element\n\t *     to render the component before it. Relevant when the component needs\n\t *     to be rendered before an existing element in the DOM.\n\t * @protected\n\t * @chainable\n\t */\n\tattach(opt_parentElement, opt_siblingElement) {\n\t\tif (!this.inDocument) {\n\t\t\tthis.renderElement_(opt_parentElement, opt_siblingElement);\n\t\t\tthis.inDocument = true;\n\t\t\tthis.emit('attached', {\n\t\t\t\tparent: opt_parentElement,\n\t\t\t\tsibling: opt_siblingElement\n\t\t\t});\n\t\t\tthis.attached();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Lifecycle. When attached, the component element is appended to the DOM\n\t * and any other action to be performed must be implemented in this method,\n\t * such as, binding DOM events. A component can be re-attached multiple\n\t * times, therefore the undo behavior for any action performed in this phase\n\t * must be implemented on the detach phase.\n\t */\n\tattached() {}\n\n\t/**\n\t * Adds the given sub component, replacing any existing one with the same ref.\n\t * @param {string} ref\n\t * @param {!Component} component\n\t */\n\taddSubComponent(ref, component) {\n\t\tthis.components[ref] = component;\n\t}\n\n\t/**\n\t * Lifecycle. This is called when the component has just been created, before\n\t * it's rendered.\n\t */\n\tcreated() {}\n\n\t/**\n\t * Creates the data manager for this component. Sub classes can override this\n\t * to return a custom manager as needed.\n\t * @return {!ComponentDataManager}\n\t */\n\tcreateDataManager() {\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'DATA_MANAGER', array.firstDefinedValue);\n\t\treturn new this.constructor.DATA_MANAGER_MERGED(this, Component.DATA);\n\t}\n\n\t/**\n\t * Creates the renderer for this component. Sub classes can override this to\n\t * return a custom renderer as needed.\n\t * @return {!ComponentRenderer}\n\t */\n\tcreateRenderer() {\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'RENDERER', array.firstDefinedValue);\n\t\treturn new this.constructor.RENDERER_MERGED(this);\n\t}\n\n\t/**\n\t * Listens to a delegate event on the component's element.\n\t * @param {string} eventName The name of the event to listen to.\n\t * @param {string} selector The selector that matches the child elements that\n\t *   the event should be triggered for.\n\t * @param {!function(!Object)} callback Function to be called when the event is\n\t *   triggered. It will receive the normalized event object.\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tdelegate(eventName, selector, callback) {\n\t\treturn this.on('delegate:' + eventName + ':' + selector, callback);\n\t}\n\n\t/**\n\t * Invokes the detached Lifecycle. When detached, the component element is\n\t * removed from the DOM and any other action to be performed must be\n\t * implemented in this method, such as, unbinding DOM events. A component\n\t * can be detached multiple times.\n\t * @chainable\n\t */\n\tdetach() {\n\t\tif (this.inDocument) {\n\t\t\tif (this.element && this.element.parentNode) {\n\t\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t\t}\n\t\t\tthis.inDocument = false;\n\t\t\tthis.detached();\n\t\t}\n\t\tthis.emit('detached');\n\t\treturn this;\n\t}\n\n\t/**\n\t * Lifecycle. When detached, the component element is removed from the DOM\n\t * and any other action to be performed must be implemented in this method,\n\t * such as, unbinding DOM events. A component can be detached multiple\n\t * times, therefore the undo behavior for any action performed in this phase\n\t * must be implemented on the attach phase.\n\t */\n\tdetached() {}\n\n\t/**\n\t * Lifecycle. Called when the component is disposed. Should be overridden by\n\t * sub classes to dispose of any internal data or events.\n\t */\n\tdisposed() {}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.disposed();\n\n\t\tthis.detach();\n\n\t\tif (this.elementEventProxy_) {\n\t\t\tthis.elementEventProxy_.dispose();\n\t\t\tthis.elementEventProxy_ = null;\n\t\t}\n\n\t\tthis.disposeSubComponents(Object.keys(this.components));\n\t\tthis.components = null;\n\n\t\tthis.dataManager_.dispose();\n\t\tthis.dataManager_ = null;\n\n\t\tthis.renderer_.dispose();\n\t\tthis.renderer_ = null;\n\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Calls `dispose` on all subcomponents.\n\t * @param {!Array<string>} keys\n\t */\n\tdisposeSubComponents(keys) {\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tvar component = this.components[keys[i]];\n\t\t\tif (component && !component.isDisposed()) {\n\t\t\t\tcomponent.element = null;\n\t\t\t\tcomponent.dispose();\n\t\t\t\tdelete this.components[keys[i]];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Extracts listener info from the given value.\n\t * @param {function()|string|{selector:string,fn:function()|string}} value\n\t * @return {!{selector:string,fn:function()}}\n\t * @protected\n\t */\n\textractListenerInfo_(value) {\n\t\tvar info = {\n\t\t\tfn: value\n\t\t};\n\t\tif (core.isObject(value) && !core.isFunction(value)) {\n\t\t\tinfo.selector = value.selector;\n\t\t\tinfo.fn = value.fn;\n\t\t}\n\t\tif (core.isString(info.fn)) {\n\t\t\tinfo.fn = this.getListenerFn(info.fn);\n\t\t}\n\t\treturn info;\n\t}\n\n\t/**\n\t * Gets the `ComponentDataManager` instance being used.\n\t * @return {!ComponentDataManager}\n\t */\n\tgetDataManager() {\n\t\treturn this.dataManager_;\n\t}\n\n\t/**\n\t * Gets the configuration object that was passed to this component's constructor.\n\t * @return {!Object}\n\t */\n\tgetInitialConfig() {\n\t\treturn this.initialConfig_;\n\t}\n\n\t/**\n\t * Gets the listener function from its name. If the name is prefixed with a\n\t * component id, the function will be called on that specified component. Otherwise\n\t * it will be called on this component instead.\n\t * @param {string} fnName\n\t * @return {function()}\n\t */\n\tgetListenerFn(fnName) {\n\t\tif (core.isFunction(this[fnName])) {\n\t\t\treturn this[fnName].bind(this);\n\t\t} else {\n\t\t\tconsole.error('No function named \"' + fnName + '\" was found in the ' +\n\t\t\t\t'component \"' + core.getFunctionName(this.constructor) + '\". Make ' +\n\t\t\t\t'sure that you specify valid function names when adding inline listeners.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Gets state data for this component.\n\t * @return {!Object}\n\t */\n\tgetState() {\n\t\treturn this.dataManager_.getState();\n\t}\n\n\t/**\n\t * Gets the keys for the state data.\n\t * @return {!Array<string>}\n\t */\n\tgetStateKeys() {\n\t\treturn this.dataManager_.getStateKeys();\n\t}\n\n\t/**\n\t * Calls the synchronization function for the state key.\n\t * @param {string} key\n\t * @param {Object.<string, Object>=} opt_change Object containing newVal and\n\t *     prevVal keys.\n\t * @protected\n\t */\n\tfireStateKeyChange_(key, opt_change) {\n\t\tvar fn = this['sync' + key.charAt(0).toUpperCase() + key.slice(1)];\n\t\tif (core.isFunction(fn)) {\n\t\t\tif (!opt_change) {\n\t\t\t\tvar manager = this.getDataManager();\n\t\t\t\topt_change = {\n\t\t\t\t\tnewVal: manager.get(key),\n\t\t\t\t\tprevVal: undefined\n\t\t\t\t};\n\t\t\t}\n\t\t\tfn.call(this, opt_change.newVal, opt_change.prevVal);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the `ComponentRenderer` instance being used.\n\t * @return {!ComponentRenderer}\n\t */\n\tgetRenderer() {\n\t\treturn this.renderer_;\n\t}\n\n\t/**\n\t * Handles a `rendered` event from the current renderer instance.\n\t * @parma {!Object}\n\t * @protected\n\t */\n\thandleRendererRendered_(data) {\n\t\tthis.rendered(data);\n\t\tthis.emit('rendered', data);\n\t}\n\n\t/**\n\t * Handles state batch changes. Calls any existing `sync` functions that\n\t * match the changed state keys.\n\t * @param {Event} event\n\t * @protected\n\t */\n\thandleStateChanged_(event) {\n\t\tthis.syncStateFromChanges_(event.changes);\n\t\tthis.emit('stateSynced', event);\n\t}\n\n\t/**\n\t * Handles the `newListener` event. Just flags that this event type has been\n\t * attached, so we can start proxying it when `DomEventEmitterProxy` is created.\n\t * @param {string} event\n\t * @protected\n\t */\n\thandleNewListener_(event) {\n\t\tthis.attachedListeners_[event] = true;\n\t}\n\n\t/**\n\t * Checks if the given function is a component constructor.\n\t * @param {!function()} fn Any function\n\t * @return {boolean}\n\t */\n\tstatic isComponentCtor(fn) {\n\t\treturn fn.prototype && fn.prototype[Component.COMPONENT_FLAG];\n\t}\n\n\t/**\n\t * Merges an array of values for the ELEMENT_CLASSES property into a single object.\n\t * @param {!Array.<string>} values The values to be merged.\n\t * @return {!string} The merged value.\n\t * @protected\n\t */\n\tmergeElementClasses_(values) {\n\t\tvar marked = {};\n\t\treturn values.filter(function(val) {\n\t\t\tif (!val || marked[val]) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tmarked[val] = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}).join(' ');\n\t}\n\n\t/**\n\t * Fired when the `element` state value is changed.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\tonElementChanged_(event) {\n\t\tthis.setUpProxy_();\n\t\tthis.elementEventProxy_.setOriginEmitter(event.newVal);\n\t\tif (event.newVal) {\n\t\t\tthis.syncVisible(this.dataManager_.get('visible'));\n\t\t}\n\t}\n\n\t/**\n\t * Fired when the `events` state value is changed.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\tonEventsChanged_(event) {\n\t\tthis.eventsStateKeyHandler_.removeAllListeners();\n\t\tthis.addListenersFromObj_(event.newVal);\n\t}\n\n\t/**\n\t * Creates and renders a component for the given constructor function. This\n\t * will always make sure that the constructor runs without rendering the\n\t * component, having the `render` step happen only after it has finished.\n\t * @param {!function()} Ctor The component's constructor function.\n\t * @param {Object|Element=} opt_configOrElement Optional config data or parent\n\t *     for the component.\n\t * @param {Element=} opt_element Optional parent for the component.\n\t * @return {!Component} The rendered component's instance.\n\t */\n\tstatic render(Ctor, opt_configOrElement, opt_element) {\n\t\tvar config = opt_configOrElement;\n\t\tvar element = opt_element;\n\t\tif (core.isElement(opt_configOrElement)) {\n\t\t\tconfig = null;\n\t\t\telement = opt_configOrElement;\n\t\t}\n\t\tvar instance = new Ctor(config, false);\n\t\tinstance.render_(element);\n\t\treturn instance;\n\t}\n\n\t/**\n\t * Lifecycle. Renders the component into the DOM.\n\t *\n\t * Render Lifecycle:\n\t *   render event - The \"render\" event is emitted. Renderers act on this step.\n\t *   state synchronization - All synchronization methods are called.\n\t *   attach - Attach Lifecycle is called.\n\t *\n\t * @param {(string|Element|boolean)=} opt_parentElement Optional parent element\n\t *     to render the component. If set to `false`, the element won't be\n\t *     attached to any element after rendering. In this case, `attach` should\n\t *     be called manually later to actually attach it to the dom.\n\t * @param {boolean=} opt_skipRender Optional flag indicating that the actual\n\t *     rendering should be skipped. Only the other render lifecycle logic will\n\t *     be run, like syncing state and attaching the element. Should only\n\t *     be set if the component has already been rendered, like sub components.\n\t * @protected\n\t */\n\trender_(opt_parentElement, opt_skipRender) {\n\t\tif (!opt_skipRender) {\n\t\t\tthis.emit('render');\n\t\t}\n\t\tthis.setUpProxy_();\n\t\tthis.syncState_();\n\t\tthis.attach(opt_parentElement);\n\t\tthis.wasRendered = true;\n\t}\n\n\t/**\n\t * Renders this component as a subcomponent, meaning that no actual rendering is\n\t * needed since it was already rendered by the parent component. This just handles\n\t * other logics from the rendering lifecycle, like calling sync methods for the\n\t * state.\n\t */\n\trenderAsSubComponent() {\n\t\tthis.render_(null, true);\n\t}\n\n\t/**\n\t * Renders the component element into the DOM.\n\t * @param {(string|Element)=} opt_parentElement Optional parent element\n\t *     to render the component.\n\t * @param {(string|Element)=} opt_siblingElement Optional sibling element\n\t *     to render the component before it. Relevant when the component needs\n\t *     to be rendered before an existing element in the DOM, e.g.\n\t *     `component.attach(null, existingElement)`.\n\t * @protected\n\t */\n\trenderElement_(opt_parentElement, opt_siblingElement) {\n\t\tvar element = this.element;\n\t\tif (element && (opt_siblingElement || !element.parentNode)) {\n\t\t\tvar parent = dom.toElement(opt_parentElement) || this.DEFAULT_ELEMENT_PARENT;\n\t\t\tparent.insertBefore(element, dom.toElement(opt_siblingElement));\n\t\t}\n\t}\n\n\t/**\n\t * Setter logic for the element property.\n\t * @param {?string|Element} val\n\t */\n\tset element(val) {\n\t\tif (!core.isElement(val) && !core.isString(val) && core.isDefAndNotNull(val)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (val) {\n\t\t\tval = dom.toElement(val) || this.elementVal_;\n\t\t}\n\n\t\tif (this.elementVal_ !== val) {\n\t\t\tvar prev = this.elementVal_;\n\t\t\tthis.elementVal_ = val;\n\t\t\tif (this.componentCreated_) {\n\t\t\t\tthis.emit('elementChanged', {\n\t\t\t\t\tprevVal: prev,\n\t\t\t\t\tnewVal: val\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of all the specified state keys.\n\t * @param {!Object.<string,*>} values A map of state keys to the values they\n\t *   should be set to.\n\t * @param {function()=} opt_callback An optional function that will be run\n\t *   after the next batched update is triggered.\n\t */\n\tsetState(state, opt_callback) {\n\t\tthis.dataManager_.setState(state, opt_callback);\n\t}\n\n\t/**\n\t * Setter for the `elementClasses` data property. Appends given value with\n\t * the one specified in `ELEMENT_CLASSES`.\n\t * @param {string} val\n\t * @return {string}\n\t * @protected\n\t */\n\tsetterElementClassesFn_(val) {\n\t\tif (this.constructor.ELEMENT_CLASSES_MERGED) {\n\t\t\tval += ' ' + this.constructor.ELEMENT_CLASSES_MERGED;\n\t\t}\n\t\treturn val.trim();\n\t}\n\n\t/**\n\t * Creates the `DomEventEmitterProxy` instance and has it start proxying any\n\t * listeners that have already been listened to.\n\t * @protected\n\t */\n\tsetUpProxy_() {\n\t\tif (this.elementEventProxy_) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar proxy = new DomEventEmitterProxy(this.element, this);\n\t\tthis.elementEventProxy_ = proxy;\n\n\t\tobject.map(this.attachedListeners_, proxy.proxyEvent.bind(proxy));\n\t\tthis.attachedListeners_ = null;\n\n\t\tthis.newListenerHandle_.removeListener();\n\t\tthis.newListenerHandle_ = null;\n\t}\n\n\t/**\n\t * Fires state synchronization functions.\n\t * @protected\n\t */\n\tsyncState_() {\n\t\tvar keys = this.dataManager_.getSyncKeys();\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tthis.fireStateKeyChange_(keys[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Fires synchronization changes for state keys.\n\t * @param {Object.<string, Object>} changes Object containing the state key\n\t *     name as key and an object with newVal and prevVal as value.\n\t * @protected\n\t */\n\tsyncStateFromChanges_(changes) {\n\t\tfor (var key in changes) {\n\t\t\tthis.fireStateKeyChange_(key, changes[key]);\n\t\t}\n\t}\n\n\t/**\n\t * State synchronization logic for `visible` state key.\n\t * Updates the element's display value according to its visibility.\n\t * @param {boolean} newVal\n\t */\n\tsyncVisible(newVal) {\n\t\tif (this.element) {\n\t\t\tthis.element.style.display = newVal ? '' : 'none';\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle. Called whenever the component has just been rendered.\n\t * @param {boolean} firstRender Flag indicating if this was the component's\n\t *     first render.\n\t */\n\trendered() {}\n\n\t/**\n\t * Validator logic for the `events` state key.\n\t * @param {Object} val\n\t * @return {boolean}\n\t * @protected\n\t */\n\tvalidatorEventsFn_(val) {\n\t\treturn !core.isDefAndNotNull(val) || core.isObject(val);\n\t}\n}\n\n/**\n * Component data definition.\n * @type {Object}\n * @static\n */\nComponent.DATA = {\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @type {string}\n\t */\n\telementClasses: {\n\t\tsetter: 'setterElementClassesFn_',\n\t\tvalidator: core.isString,\n\t\tvalue: ''\n\t},\n\n\t/**\n\t * Listeners that should be attached to this component. Should be provided as an object,\n\t * where the keys are event names and the values are the listener functions (or function\n\t * names).\n\t * @type {Object<string, (function()|string|{selector: string, fn: function()|string})>}\n\t */\n\tevents: {\n\t\tvalidator: 'validatorEventsFn_',\n\t\tvalue: null\n\t},\n\n\t/**\n\t * Indicates if the component is visible or not.\n\t * @type {boolean}\n\t */\n\tvisible: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: true\n\t}\n};\n\nComponent.COMPONENT_FLAG = '__metal_component__';\n\n/**\n * The `ComponentDataManager` class that should be used. This class will be\n * responsible for handling the component's data. Each component may have its\n * own implementation.\n */\nComponent.DATA_MANAGER = ComponentDataManager;\n\n/**\n * CSS classes to be applied to the element.\n * @type {string}\n * @protected\n * @static\n */\nComponent.ELEMENT_CLASSES = '';\n\n/**\n * The `ComponentRenderer` that should be used. Components need to set this\n * to a subclass of `ComponentRenderer` that has the rendering logic, like\n * `SoyRenderer`.\n * @type {!ComponentRenderer}\n * @static\n */\nComponent.RENDERER = ComponentRenderer;\n\n/**\n * Flag indicating if component updates will happen synchronously. Updates are\n * done asynchronously by default, which allows changes to be batched and\n * applied together.\n * @type {boolean}\n */\nComponent.SYNC_UPDATES = false;\n\n/**\n * Sets a prototype flag to easily determine if a given constructor is for\n * a component or not.\n */\nComponent.prototype[Component.COMPONENT_FLAG] = true;\n\nexport default Component;\n"],"sourceRoot":"/source/"}