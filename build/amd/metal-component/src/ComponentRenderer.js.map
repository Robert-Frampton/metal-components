{"version":3,"sources":["ComponentRenderer.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAQM,iB;;;;;;;;;AAML,6BAAY,SAAZ,EAAuB;AAAA;;AAAA,gDACtB,wBADsB;;AAEtB,SAAK,UAAL,GAAkB,SAAlB;;AAEA,SAAK,wBAAL,GAAgC,0BAAhC;AACA,SAAK,wBAAL,CAA8B,GAA9B,CACC,MAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB,EAA+B,MAAK,MAAL,CAAY,IAAZ,OAA/B,CADD;;AAIA,OAAI,MAAK,UAAL,CAAgB,WAAhB,CAA4B,mBAAhC,EAAqD;AACpD,UAAK,wBAAL,CAA8B,GAA9B,CACC,MAAK,UAAL,CAAgB,EAAhB,CACC,iBADD,EAEC,MAAK,uCAAL,CAA6C,IAA7C,OAFD,CADD;AAMA,IAPD,MAOO;AACN,UAAK,wBAAL,CAA8B,GAA9B,CACC,MAAK,UAAL,CAAgB,EAAhB,CACC,cADD,EAEC,MAAK,oCAAL,CAA0C,IAA1C,OAFD,CADD;AAMA;AAvBqB;AAwBtB;;;;;;;8BAKD,e,8BAAkB;AACjB,QAAK,wBAAL,CAA8B,kBAA9B;AACA,QAAK,wBAAL,GAAgC,IAAhC;AACA,G;;8BAWD,oC,iDAAqC,O,EAAS;AAC7C,OAAI,KAAK,UAAL,CAAgB,WAApB,EAAiC;AAChC,SAAK,MAAL,CAAY,OAAZ;AACA;AACD,G;;8BASD,uC,oDAAwC,I,EAAM;AAC7C,OAAI,KAAK,UAAL,CAAgB,WAApB,EAAiC;AAChC,SAAK,MAAL,CAAY;AACX,kCACE,KAAK,GADP,EACc,IADd;AADW,KAAZ;AAKA;AACD,G;;8BAKD,M,qBAAS;AACR,OAAI,CAAC,KAAK,UAAL,CAAgB,OAArB,EAA8B;AAC7B,SAAK,UAAL,CAAgB,OAAhB,GAA0B,SAAS,aAAT,CAAuB,KAAvB,CAA1B;AACA;AACD,G;;8BASD,M,qBAAS,CAAE,C;;;;;mBAGG,iB","file":"node_modules/metal-component/src/ComponentRenderer.js","sourcesContent":["'use strict';\n\nimport { EventEmitter, EventHandler } from 'metal-events';\n\n/**\n * Base class that component renderers should extend from. It defines the\n * required methods all renderers should have.\n */\nclass ComponentRenderer extends EventEmitter {\n\t/**\n\t * Constructor function for `ComponentRenderer`.\n\t * @param {!Component} component The component that this renderer is\n\t *     responsible for.\n\t */\n\tconstructor(component) {\n\t\tsuper();\n\t\tthis.component_ = component;\n\n\t\tthis.componentRendererEvents_ = new EventHandler();\n\t\tthis.componentRendererEvents_.add(\n\t\t\tthis.component_.once('render', this.render.bind(this))\n\t\t);\n\n\t\tif (this.component_.constructor.SYNC_UPDATES_MERGED) {\n\t\t\tthis.componentRendererEvents_.add(\n\t\t\t\tthis.component_.on(\n\t\t\t\t\t'stateKeyChanged',\n\t\t\t\t\tthis.handleComponentRendererStateKeyChanged_.bind(this)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tthis.componentRendererEvents_.add(\n\t\t\t\tthis.component_.on(\n\t\t\t\t\t'stateChanged',\n\t\t\t\t\tthis.handleComponentRendererStateChanged_.bind(this)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.componentRendererEvents_.removeAllListeners();\n\t\tthis.componentRendererEvents_ = null;\n\t}\n\n\t/**\n\t * Handles a `stateChanged` event from this renderer's component. Calls the\n\t * `update` function if the component has already been rendered for the first\n\t * time.\n\t * @param {!Object<string, Object>} changes Object containing the names\n\t *     of all changed state keys, each mapped to an object with its new\n\t *     (newVal) and previous (prevVal) values.\n\t * @protected\n\t */\n\thandleComponentRendererStateChanged_(changes) {\n\t\tif (this.component_.wasRendered) {\n\t\t\tthis.update(changes);\n\t\t}\n\t}\n\n\t/**\n\t * Handles a `stateKeyChanged` event from this renderer's component. This is\n\t * similar to `handleComponentRendererStateChanged_`, but only called for\n\t * components that have requested updates to happen synchronously.\n\t * @param {!{key: string, newVal: *, prevVal: *}} data\n\t * @protected\n\t */\n\thandleComponentRendererStateKeyChanged_(data) {\n\t\tif (this.component_.wasRendered) {\n\t\t\tthis.update({\n\t\t\t\tchanges: {\n\t\t\t\t\t[data.key] : data\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Renders the component's whole content (including its main element).\n\t */\n\trender() {\n\t\tif (!this.component_.element) {\n\t\t\tthis.component_.element = document.createElement('div');\n\t\t}\n\t}\n\n\t/**\n\t * Updates the component's element html. This is automatically called by\n\t * the component when the value of at least one of its state keys has changed.\n\t * @param {Object.<string, Object>} changes Object containing the names\n\t *     of all changed state keys, each mapped to an object with its new\n\t *     (newVal) and previous (prevVal) values.\n\t */\n\tupdate() {}\n}\n\nexport default ComponentRenderer;\n"],"sourceRoot":"/source/"}