{"version":3,"sources":["ComponentDataManager.js"],"names":["ComponentDataManager","component","data","component_","mergeSuperClassesProperty","constructor","firstDefinedValue","mergeStateStatic","createState_","add","state_","addToState","arguments","buildStateInstanceData_","mixin","STATE_MERGED","holder","state","setKeysBlacklist_","BLACKLIST_MERGED","getInitialConfig","listener","emit_","bind","on","proxy_","disposeInternal","dispose","event","orig","type","name","emit","get","getSyncKeys","getStateKeys","getState","getStateInstance","replaceNonInternal","keys","i","length","key","getStateKeyConfig","internal","hasOwnProperty","set","setDefaultValue","setState","opt_callback","BLACKLIST","components","context","element","refs","wasRendered"],"mappings":"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","file":"node_modules/metal-component/src/ComponentDataManager.js","sourcesContent":["'use strict';\n\nimport { array, core, object } from 'metal';\nimport { EventEmitter, EventEmitterProxy } from 'metal-events';\nimport State from 'metal-state';\n\nclass ComponentDataManager extends EventEmitter {\n\t/**\n\t * Constructor for `ComponentDataManager`.\n\t * @param {!Component} component\n\t * @param {!Object} data\n\t */\n\tconstructor(component, data) {\n\t\tsuper();\n\t\tthis.component_ = component;\n\n\t\tcore.mergeSuperClassesProperty(\n\t\t\tthis.constructor,\n\t\t\t'BLACKLIST',\n\t\t\tarray.firstDefinedValue\n\t\t);\n\t\tState.mergeStateStatic(this.component_.constructor);\n\n\t\tthis.createState_(data, this.component_);\n\t}\n\n\t/**\n\t * Adds a state property to the component.\n\t * @param {string} name\n\t * @param {!Object} config\n\t * @param {*} opt_initialValue\n\t */\n\tadd() {\n\t\tthis.state_.addToState(...arguments);\n\t}\n\n\t/**\n\t * Builds the configuration data that will be passed to the `State` instance.\n\t * @param {!Object} data\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildStateInstanceData_(data) {\n\t\treturn object.mixin({}, data, this.component_.constructor.STATE_MERGED);\n\t}\n\n\t/**\n\t * Creates the `State` instance that will handle the main component data.\n\t * @param {!Object} data\n\t * @param {!Object} holder The object that should hold the data properties.\n\t * @protected\n\t */\n\tcreateState_(data, holder) {\n\t\tconst state = new State({}, holder, this.component_);\n\t\tstate.setKeysBlacklist_(this.constructor.BLACKLIST_MERGED);\n\t\tstate.addToState(\n\t\t\tthis.buildStateInstanceData_(data),\n\t\t\tthis.component_.getInitialConfig()\n\t\t);\n\n\t\tconst listener = this.emit_.bind(this);\n\t\tstate.on('stateChanged', listener);\n\t\tstate.on('stateKeyChanged', listener);\n\t\tthis.state_ = state;\n\n\t\tthis.proxy_ = new EventEmitterProxy(state, this.component_);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\n\t\tthis.state_.dispose();\n\t\tthis.state_ = null;\n\n\t\tthis.proxy_.dispose();\n\t\tthis.proxy_ = null;\n\t}\n\n\t/**\n\t * Emits the specified event.\n\t * @param {!Object} data\n\t * @param {!Object} event\n\t * @protected\n\t */\n\temit_(data, event) {\n\t\tconst orig = event.type;\n\t\tconst name = orig === 'stateChanged' ? 'dataChanged' : 'dataPropChanged';\n\t\tthis.emit(name, data);\n\t}\n\n\t/**\n\t * Gets the data with the given name.\n\t * @param {string} name\n\t * @return {*}\n\t */\n\tget(name) {\n\t\treturn this.state_.get(name);\n\t}\n\n\t/**\n\t * Gets the keys for state data that can be synced via `sync` functions.\n\t * @return {!Array<string>}\n\t */\n\tgetSyncKeys() {\n\t\treturn this.state_.getStateKeys();\n\t}\n\n\t/**\n\t * Gets the keys for state data.\n\t * @return {!Array<string>}\n\t */\n\tgetStateKeys() {\n\t\treturn this.state_.getStateKeys();\n\t}\n\n\t/**\n\t * Gets the whole state data.\n\t * @return {!Object}\n\t */\n\tgetState() {\n\t\treturn this.state_.getState();\n\t}\n\n\t/**\n\t * Gets the `State` instance being used.\n\t * @return {!Object}\n\t */\n\tgetStateInstance() {\n\t\treturn this.state_;\n\t}\n\n\t/**\n\t * Updates all non internal data with the given values (or to the default\n\t * value if none is given).\n\t * @param {!Object} data\n\t */\n\treplaceNonInternal(data) {\n\t\tComponentDataManager.replaceNonInternal(data, this.state_);\n\t}\n\n\t/**\n\t * Updates all non internal data with the given values (or to the default\n\t * value if none is given).\n\t * @param {!Object} data\n\t * @param {!State} state\n\t */\n\tstatic replaceNonInternal(data, state) {\n\t\tconst keys = state.getStateKeys();\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst key = keys[i];\n\t\t\tif (!state.getStateKeyConfig(key).internal) {\n\t\t\t\tif (data.hasOwnProperty(key)) {\n\t\t\t\t\tstate.set(key, data[key]);\n\t\t\t\t} else {\n\t\t\t\t\tstate.setDefaultValue(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of all the specified state keys.\n\t * @param {!Object.<string,*>} values A map of state keys to the values they\n\t *   should be set to.\n\t * @param {function()=} opt_callback An optional function that will be run\n\t *   after the next batched update is triggered.\n\t */\n\tsetState(state, opt_callback) {\n\t\tthis.state_.setState(state, opt_callback);\n\t}\n}\n\nComponentDataManager.BLACKLIST = {\n\tcomponents: true,\n\tcontext: true,\n\telement: true,\n\trefs: true,\n\twasRendered: true\n};\n\nexport default ComponentDataManager;\n"],"sourceRoot":"/source/"}