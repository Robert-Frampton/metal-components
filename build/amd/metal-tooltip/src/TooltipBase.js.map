{"version":3,"sources":["TooltipBase.js"],"names":["TooltipBase","attached","align","syncTriggerEvents","triggerEvents","created","eventHandler_","detached","removeAllListeners","disposeInternal","clearTimeout","delay_","opt_alignElement","syncAlignElement","alignElement","callAsync_","fn","delay","setTimeout","bind","handleHide","event","delegateTarget","interactingWithDifferentTarget","locked_","visible","syncVisible","handleShow","handleToggle","lock","unlock","prevAlignElement","removeAttribute","dataTitle","getAttribute","title","inDocument","alignedPosition","Align","element","position","syncPosition","syncSelector","selector","add","on","delegate","document","STATE","validator","isValidPosition","setter","toElement","Array","isArray","value","isString","Bottom","PositionClasses"],"mappings":"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","file":"node_modules/metal-tooltip/src/TooltipBase.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport { Align } from 'metal-position';\nimport Component from 'metal-component';\nimport { EventHandler } from 'metal-events';\n\n/**\n * The base class to be shared between components that have tooltip behavior.\n * This helps decouple this behavior logic from the UI, which may be different\n * between components. The Tooltip component itself extends from this, as does\n * the crystal Popover component, which can be accessed at metal/crystal-popover.\n */\nclass TooltipBase extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.align();\n\t\tthis.syncTriggerEvents(this.triggerEvents);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\tthis.eventHandler_ = new EventHandler();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tthis.eventHandler_.removeAllListeners();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tclearTimeout(this.delay_);\n\t}\n\n\t/**\n\t * Aligns the tooltip with the best region around alignElement. The best\n\t * region is defined by clockwise rotation starting from the specified\n\t * `position`. The element is always aligned in the middle of alignElement\n\t * axis.\n\t * @param {Element=} opt_alignElement Optional element to align with.\n\t */\n\talign(opt_alignElement) {\n\t\tthis.syncAlignElement(opt_alignElement || this.alignElement);\n\t}\n\n\t/**\n\t * @param {!function()} fn\n\t * @param {number} delay\n\t * @private\n\t */\n\tcallAsync_(fn, delay) {\n\t\tclearTimeout(this.delay_);\n\t\tthis.delay_ = setTimeout(fn.bind(this), delay);\n\t}\n\n\t/**\n\t * Handles hide event triggered by `events`.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleHide(event) {\n\t\tvar delegateTarget = event.delegateTarget;\n\t\tvar interactingWithDifferentTarget = delegateTarget && (delegateTarget !== this.alignElement);\n\t\tthis.callAsync_(function() {\n\t\t\tif (this.locked_) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (interactingWithDifferentTarget) {\n\t\t\t\tthis.alignElement = delegateTarget;\n\t\t\t} else {\n\t\t\t\tthis.visible = false;\n\t\t\t\tthis.syncVisible(false);\n\t\t\t}\n\t\t}, this.delay[1]);\n\t}\n\n\t/**\n\t * Handles show event triggered by `events`.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleShow(event) {\n\t\tvar delegateTarget = event.delegateTarget;\n\t\tsuper.syncVisible(true);\n\t\tthis.callAsync_(function() {\n\t\t\tthis.alignElement = delegateTarget;\n\t\t\tthis.visible = true;\n\t\t}, this.delay[0]);\n\t}\n\n\t/**\n\t * Handles toggle event triggered by `events`.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleToggle(event) {\n\t\tif (this.visible) {\n\t\t\tthis.handleHide(event);\n\t\t} else {\n\t\t\tthis.handleShow(event);\n\t\t}\n\t}\n\n\t/**\n\t * Locks tooltip visibility.\n\t * @param {!Event} event\n\t */\n\tlock() {\n\t\tthis.locked_ = true;\n\t}\n\n\t/**\n\t * Unlocks tooltip visibility.\n\t * @param {!Event} event\n\t */\n\tunlock(event) {\n\t\tthis.locked_ = false;\n\t\tthis.handleHide(event);\n\t}\n\n\t/**\n\t * State synchronization logic for `alignElement`.\n\t * @param {Element} alignElement\n\t * @param {Element} prevAlignElement\n\t */\n\tsyncAlignElement(alignElement, prevAlignElement) {\n\t\tif (prevAlignElement) {\n\t\t\talignElement.removeAttribute('aria-describedby');\n\t\t}\n\t\tif (alignElement) {\n\t\t\tvar dataTitle = alignElement.getAttribute('data-title');\n\t\t\tif (dataTitle) {\n\t\t\t\tthis.title = dataTitle;\n\t\t\t}\n\t\t\tif (this.inDocument) {\n\t\t\t\tthis.alignedPosition = TooltipBase.Align.align(this.element, alignElement, this.position);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * State synchronization logic for `position`.\n\t */\n\tsyncPosition() {\n\t\tthis.syncAlignElement(this.alignElement);\n\t}\n\n\t/**\n\t * State synchronization logic for `selector`.\n\t */\n\tsyncSelector() {\n\t\tthis.syncTriggerEvents(this.triggerEvents);\n\t}\n\n\t/**\n\t * State synchronization logic for `triggerEvents`.\n\t * @param {!Array<string>} triggerEvents\n\t */\n\tsyncTriggerEvents(triggerEvents) {\n\t\tif (!this.inDocument) {\n\t\t\treturn;\n\t\t}\n\t\tthis.eventHandler_.removeAllListeners();\n\t\tvar selector = this.selector;\n\t\tif (!selector) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.eventHandler_.add(\n\t\t\tthis.on('mouseenter', this.lock),\n\t\t\tthis.on('mouseleave', this.unlock));\n\n\t\tif (triggerEvents[0] === triggerEvents[1]) {\n\t\t\tthis.eventHandler_.add(\n\t\t\t\tdom.delegate(document, triggerEvents[0], selector, this.handleToggle.bind(this)));\n\t\t} else {\n\t\t\tthis.eventHandler_.add(\n\t\t\t\tdom.delegate(document, triggerEvents[0], selector, this.handleShow.bind(this)),\n\t\t\t\tdom.delegate(document, triggerEvents[1], selector, this.handleHide.bind(this)));\n\t\t}\n\t}\n\n\t/**\n\t * State synchronization logic for `visible`. Realigns the tooltip.\n\t */\n\tsyncVisible() {\n\t\tthis.align();\n\t}\n}\n\n/**\n * @inheritDoc\n * @see `Align` class.\n * @static\n */\nTooltipBase.Align = Align;\n\n/**\n * TooltipBase state definition.\n * @type {!Object}\n * @static\n */\nTooltipBase.STATE = {\n\t/**\n\t * The current position of the tooltip after being aligned via `Align.align`.\n\t * @type {number}\n\t */\n\talignedPosition: {\n\t\tvalidator: TooltipBase.Align.isValidPosition\n\t},\n\n\t/**\n\t * Element to align tooltip with.\n\t * @type {Element}\n\t */\n\talignElement: {\n\t\tsetter: dom.toElement\n\t},\n\n\t/**\n\t * Delay showing and hiding the tooltip (ms).\n\t * @type {!Array<number>}\n\t * @default [ 500, 250 ]\n\t */\n\tdelay: {\n\t\tvalidator: Array.isArray,\n\t\tvalue: [500, 250]\n\t},\n\n\t/**\n\t * Trigger events used to bind handlers to show and hide tooltip.\n\t * @type {!Array<string>}\n\t * @default ['mouseenter', 'mouseleave']\n\t */\n\ttriggerEvents: {\n\t\tvalidator: Array.isArray,\n\t\tvalue: ['mouseenter', 'mouseleave']\n\t},\n\n\t/**\n\t * If a selector is provided, tooltip objects will be delegated to the\n\t * specified targets by setting the `alignElement`.\n\t * @type {?string}\n\t */\n\tselector: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The position to try alignment. If not possible the best position will be\n\t * found.\n\t * @type {number}\n\t * @default Align.Bottom\n\t */\n\tposition: {\n\t\tvalidator: TooltipBase.Align.isValidPosition,\n\t\tvalue: TooltipBase.Align.Bottom\n\t},\n\n\t/**\n\t * Content to be placed inside tooltip.\n\t * @type {string}\n\t */\n\ttitle: {\n\t}\n};\n\n/**\n * CSS classes used for each align position.\n * @type {!Array}\n * @static\n */\nTooltipBase.PositionClasses = ['top', 'right', 'bottom', 'left'];\n\nexport default TooltipBase;\n"],"sourceRoot":"/source/"}