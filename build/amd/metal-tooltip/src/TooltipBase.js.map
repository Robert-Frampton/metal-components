{"version":3,"sources":["TooltipBase.js"],"names":["TooltipBase","align","syncTriggerEvents","triggerEvents","eventHandler_","removeAllListeners","clearTimeout","delay_","opt_alignElement","syncAlignElement","alignElement","fn","delay","setTimeout","bind","event","delegateTarget","interactingWithDifferentTarget","callAsync_","locked_","visible","syncVisible","handleHide","handleShow","prevAlignElement","removeAttribute","dataTitle","getAttribute","title","inDocument","alignedPosition","Align","element","position","selector","add","on","lock","unlock","delegate","document","handleToggle","STATE","validator","isValidPosition","setter","toElement","Array","isArray","value","isString","Bottom","isHtml","PositionClasses"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAcMA,W;;;;;;;;;;;8BAIM;AACV,SAAKC,KAAL;AACA,SAAKC,iBAAL,CAAuB,KAAKC,aAA5B;AACA;;;6BAKS;AACT,SAAKC,aAAL,GAAqB,0BAArB;AACA;;;8BAKU;AACV,SAAKA,aAAL,CAAmBC,kBAAnB;AACA;;;qCAKiB;AACjB;AACAC,iBAAa,KAAKC,MAAlB;AACA;;;yBASKC,gB,EAAkB;AACvB,SAAKC,gBAAL,CAAsBD,oBAAoB,KAAKE,YAA/C;AACA;;;8BAOUC,E,EAAIC,K,EAAO;AACrBN,iBAAa,KAAKC,MAAlB;AACA,SAAKA,MAAL,GAAcM,WAAWF,GAAGG,IAAH,CAAQ,IAAR,CAAX,EAA0BF,KAA1B,CAAd;AACA;;;8BAOUG,K,EAAO;AACjB,QAAIC,iBAAiBD,MAAMC,cAA3B;AACA,QAAIC,iCAAiCD,kBAAmBA,mBAAmB,KAAKN,YAAhF;AACA,SAAKQ,UAAL,CAAgB,YAAW;AAC1B,SAAI,KAAKC,OAAT,EAAkB;AACjB;AACA;AACD,SAAIF,8BAAJ,EAAoC;AACnC,WAAKP,YAAL,GAAoBM,cAApB;AACA,MAFD,MAEO;AACN,WAAKI,OAAL,GAAe,KAAf;AACA,WAAKC,WAAL,CAAiB,KAAjB;AACA;AACD,KAVD,EAUG,KAAKT,KAAL,CAAW,CAAX,CAVH;AAWA;;;8BAOUG,K,EAAO;AACjB,QAAIC,iBAAiBD,MAAMC,cAA3B;AACA,0HAAkB,IAAlB;AACA,SAAKE,UAAL,CAAgB,YAAW;AAC1B,UAAKR,YAAL,GAAoBM,cAApB;AACA,UAAKI,OAAL,GAAe,IAAf;AACA,KAHD,EAGG,KAAKR,KAAL,CAAW,CAAX,CAHH;AAIA;;;gCAOYG,K,EAAO;AACnB,QAAI,KAAKK,OAAT,EAAkB;AACjB,UAAKE,UAAL,CAAgBP,KAAhB;AACA,KAFD,MAEO;AACN,UAAKQ,UAAL,CAAgBR,KAAhB;AACA;AACD;;;0BAMM;AACN,SAAKI,OAAL,GAAe,IAAf;AACA;;;0BAMMJ,K,EAAO;AACb,SAAKI,OAAL,GAAe,KAAf;AACA,SAAKG,UAAL,CAAgBP,KAAhB;AACA;;;oCAOgBL,Y,EAAcc,gB,EAAkB;AAChD,QAAIA,gBAAJ,EAAsB;AACrBd,kBAAae,eAAb,CAA6B,kBAA7B;AACA;AACD,QAAIf,YAAJ,EAAkB;AACjB,SAAIgB,YAAYhB,aAAaiB,YAAb,CAA0B,YAA1B,CAAhB;AACA,SAAID,SAAJ,EAAe;AACd,WAAKE,KAAL,GAAaF,SAAb;AACA;AACD,SAAI,KAAKG,UAAT,EAAqB;AACpB,WAAKC,eAAL,GAAuB9B,YAAY+B,KAAZ,CAAkB9B,KAAlB,CAAwB,KAAK+B,OAA7B,EAAsCtB,YAAtC,EAAoD,KAAKuB,QAAzD,CAAvB;AACA;AACD;AACD;;;kCAKc;AACd,SAAKxB,gBAAL,CAAsB,KAAKC,YAA3B;AACA;;;kCAKc;AACd,SAAKR,iBAAL,CAAuB,KAAKC,aAA5B;AACA;;;qCAMiBA,a,EAAe;AAChC,QAAI,CAAC,KAAK0B,UAAV,EAAsB;AACrB;AACA;AACD,SAAKzB,aAAL,CAAmBC,kBAAnB;AACA,QAAI6B,WAAW,KAAKA,QAApB;AACA,QAAI,CAACA,QAAL,EAAe;AACd;AACA;;AAED,SAAK9B,aAAL,CAAmB+B,GAAnB,CACC,KAAKC,EAAL,CAAQ,YAAR,EAAsB,KAAKC,IAA3B,CADD,EAEC,KAAKD,EAAL,CAAQ,YAAR,EAAsB,KAAKE,MAA3B,CAFD;;AAIA,QAAInC,cAAc,CAAd,MAAqBA,cAAc,CAAd,CAAzB,EAA2C;AAC1C,UAAKC,aAAL,CAAmB+B,GAAnB,CACC,cAAII,QAAJ,CAAaC,QAAb,EAAuBrC,cAAc,CAAd,CAAvB,EAAyC+B,QAAzC,EAAmD,KAAKO,YAAL,CAAkB3B,IAAlB,CAAuB,IAAvB,CAAnD,CADD;AAEA,KAHD,MAGO;AACN,UAAKV,aAAL,CAAmB+B,GAAnB,CACC,cAAII,QAAJ,CAAaC,QAAb,EAAuBrC,cAAc,CAAd,CAAvB,EAAyC+B,QAAzC,EAAmD,KAAKX,UAAL,CAAgBT,IAAhB,CAAqB,IAArB,CAAnD,CADD,EAEC,cAAIyB,QAAJ,CAAaC,QAAb,EAAuBrC,cAAc,CAAd,CAAvB,EAAyC+B,QAAzC,EAAmD,KAAKZ,UAAL,CAAgBR,IAAhB,CAAqB,IAArB,CAAnD,CAFD;AAGA;AACD;;;iCAKa;AACb,SAAKb,KAAL;AACA;;;;;;AAGF;;;;;AAKAD,aAAY+B,KAAZ;;AAEA;;;;;AAKA/B,aAAY0C,KAAZ,GAAoB;AACnB;;;;AAIAZ,mBAAiB;AAChBa,cAAW3C,YAAY+B,KAAZ,CAAkBa;AADb,GALE;;AASnB;;;;AAIAlC,gBAAc;AACbmC,WAAQ,cAAIC;AADC,GAbK;;AAiBnB;;;;;AAKAlC,SAAO;AACN+B,cAAWI,MAAMC,OADX;AAENC,UAAO,CAAC,GAAD,EAAM,GAAN;AAFD,GAtBY;;AA2BnB;;;;;AAKA9C,iBAAe;AACdwC,cAAWI,MAAMC,OADH;AAEdC,UAAO,CAAC,YAAD,EAAe,YAAf;AAFO,GAhCI;;AAqCnB;;;;;AAKAf,YAAU;AACTS,cAAW,gBAAKO;AADP,GA1CS;;AA8CnB;;;;;;AAMAjB,YAAU;AACTU,cAAW3C,YAAY+B,KAAZ,CAAkBa,eADpB;AAETK,UAAOjD,YAAY+B,KAAZ,CAAkBoB;AAFhB,GApDS;;AAyDnB;;;;AAIAvB,SAAO;AACNwB,WAAQ;AADF;AA7DY,EAApB;;AAkEA;;;;;AAKApD,aAAYqD,eAAZ,GAA8B,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA2B,MAA3B,CAA9B;;mBAEerD,W","file":"node_modules/metal-tooltip/src/TooltipBase.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport { Align } from 'metal-position';\nimport Component from 'metal-component';\nimport { EventHandler } from 'metal-events';\n\n/**\n * The base class to be shared between components that have tooltip behavior.\n * This helps decouple this behavior logic from the UI, which may be different\n * between components. The Tooltip component itself extends from this, as does\n * the crystal Popover component, which can be accessed at metal/crystal-popover.\n */\nclass TooltipBase extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.align();\n\t\tthis.syncTriggerEvents(this.triggerEvents);\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\tthis.eventHandler_ = new EventHandler();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tthis.eventHandler_.removeAllListeners();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tclearTimeout(this.delay_);\n\t}\n\n\t/**\n\t * Aligns the tooltip with the best region around alignElement. The best\n\t * region is defined by clockwise rotation starting from the specified\n\t * `position`. The element is always aligned in the middle of alignElement\n\t * axis.\n\t * @param {Element=} opt_alignElement Optional element to align with.\n\t */\n\talign(opt_alignElement) {\n\t\tthis.syncAlignElement(opt_alignElement || this.alignElement);\n\t}\n\n\t/**\n\t * @param {!function()} fn\n\t * @param {number} delay\n\t * @private\n\t */\n\tcallAsync_(fn, delay) {\n\t\tclearTimeout(this.delay_);\n\t\tthis.delay_ = setTimeout(fn.bind(this), delay);\n\t}\n\n\t/**\n\t * Handles hide event triggered by `events`.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleHide(event) {\n\t\tvar delegateTarget = event.delegateTarget;\n\t\tvar interactingWithDifferentTarget = delegateTarget && (delegateTarget !== this.alignElement);\n\t\tthis.callAsync_(function() {\n\t\t\tif (this.locked_) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (interactingWithDifferentTarget) {\n\t\t\t\tthis.alignElement = delegateTarget;\n\t\t\t} else {\n\t\t\t\tthis.visible = false;\n\t\t\t\tthis.syncVisible(false);\n\t\t\t}\n\t\t}, this.delay[1]);\n\t}\n\n\t/**\n\t * Handles show event triggered by `events`.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleShow(event) {\n\t\tvar delegateTarget = event.delegateTarget;\n\t\tsuper.syncVisible(true);\n\t\tthis.callAsync_(function() {\n\t\t\tthis.alignElement = delegateTarget;\n\t\t\tthis.visible = true;\n\t\t}, this.delay[0]);\n\t}\n\n\t/**\n\t * Handles toggle event triggered by `events`.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleToggle(event) {\n\t\tif (this.visible) {\n\t\t\tthis.handleHide(event);\n\t\t} else {\n\t\t\tthis.handleShow(event);\n\t\t}\n\t}\n\n\t/**\n\t * Locks tooltip visibility.\n\t * @param {!Event} event\n\t */\n\tlock() {\n\t\tthis.locked_ = true;\n\t}\n\n\t/**\n\t * Unlocks tooltip visibility.\n\t * @param {!Event} event\n\t */\n\tunlock(event) {\n\t\tthis.locked_ = false;\n\t\tthis.handleHide(event);\n\t}\n\n\t/**\n\t * State synchronization logic for `alignElement`.\n\t * @param {Element} alignElement\n\t * @param {Element} prevAlignElement\n\t */\n\tsyncAlignElement(alignElement, prevAlignElement) {\n\t\tif (prevAlignElement) {\n\t\t\talignElement.removeAttribute('aria-describedby');\n\t\t}\n\t\tif (alignElement) {\n\t\t\tvar dataTitle = alignElement.getAttribute('data-title');\n\t\t\tif (dataTitle) {\n\t\t\t\tthis.title = dataTitle;\n\t\t\t}\n\t\t\tif (this.inDocument) {\n\t\t\t\tthis.alignedPosition = TooltipBase.Align.align(this.element, alignElement, this.position);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * State synchronization logic for `position`.\n\t */\n\tsyncPosition() {\n\t\tthis.syncAlignElement(this.alignElement);\n\t}\n\n\t/**\n\t * State synchronization logic for `selector`.\n\t */\n\tsyncSelector() {\n\t\tthis.syncTriggerEvents(this.triggerEvents);\n\t}\n\n\t/**\n\t * State synchronization logic for `triggerEvents`.\n\t * @param {!Array<string>} triggerEvents\n\t */\n\tsyncTriggerEvents(triggerEvents) {\n\t\tif (!this.inDocument) {\n\t\t\treturn;\n\t\t}\n\t\tthis.eventHandler_.removeAllListeners();\n\t\tvar selector = this.selector;\n\t\tif (!selector) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.eventHandler_.add(\n\t\t\tthis.on('mouseenter', this.lock),\n\t\t\tthis.on('mouseleave', this.unlock));\n\n\t\tif (triggerEvents[0] === triggerEvents[1]) {\n\t\t\tthis.eventHandler_.add(\n\t\t\t\tdom.delegate(document, triggerEvents[0], selector, this.handleToggle.bind(this)));\n\t\t} else {\n\t\t\tthis.eventHandler_.add(\n\t\t\t\tdom.delegate(document, triggerEvents[0], selector, this.handleShow.bind(this)),\n\t\t\t\tdom.delegate(document, triggerEvents[1], selector, this.handleHide.bind(this)));\n\t\t}\n\t}\n\n\t/**\n\t * State synchronization logic for `visible`. Realigns the tooltip.\n\t */\n\tsyncVisible() {\n\t\tthis.align();\n\t}\n}\n\n/**\n * @inheritDoc\n * @see `Align` class.\n * @static\n */\nTooltipBase.Align = Align;\n\n/**\n * TooltipBase state definition.\n * @type {!Object}\n * @static\n */\nTooltipBase.STATE = {\n\t/**\n\t * The current position of the tooltip after being aligned via `Align.align`.\n\t * @type {number}\n\t */\n\talignedPosition: {\n\t\tvalidator: TooltipBase.Align.isValidPosition\n\t},\n\n\t/**\n\t * Element to align tooltip with.\n\t * @type {Element}\n\t */\n\talignElement: {\n\t\tsetter: dom.toElement\n\t},\n\n\t/**\n\t * Delay showing and hiding the tooltip (ms).\n\t * @type {!Array<number>}\n\t * @default [ 500, 250 ]\n\t */\n\tdelay: {\n\t\tvalidator: Array.isArray,\n\t\tvalue: [500, 250]\n\t},\n\n\t/**\n\t * Trigger events used to bind handlers to show and hide tooltip.\n\t * @type {!Array<string>}\n\t * @default ['mouseenter', 'mouseleave']\n\t */\n\ttriggerEvents: {\n\t\tvalidator: Array.isArray,\n\t\tvalue: ['mouseenter', 'mouseleave']\n\t},\n\n\t/**\n\t * If a selector is provided, tooltip objects will be delegated to the\n\t * specified targets by setting the `alignElement`.\n\t * @type {?string}\n\t */\n\tselector: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The position to try alignment. If not possible the best position will be\n\t * found.\n\t * @type {number}\n\t * @default Align.Bottom\n\t */\n\tposition: {\n\t\tvalidator: TooltipBase.Align.isValidPosition,\n\t\tvalue: TooltipBase.Align.Bottom\n\t},\n\n\t/**\n\t * Content to be placed inside tooltip.\n\t * @type {string}\n\t */\n\ttitle: {\n\t\tisHtml: true\n\t}\n};\n\n/**\n * CSS classes used for each align position.\n * @type {!Array}\n * @static\n */\nTooltipBase.PositionClasses = ['top', 'right', 'bottom', 'left'];\n\nexport default TooltipBase;\n"],"sourceRoot":"/source/"}