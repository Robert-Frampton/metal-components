{"version":3,"sources":["Datatable.js"],"names":["Datatable","assertNoMixedTypesInArrays_","value","lastType","acceptArray","v","type","getValueType_","assertSameTypes_","acceptObject","visit_","type1","type2","Error","collectColumnsFromArrayValues_","expandedValue","isFirstArrayItemObject","TYPES","OBJECT","columns","columnsType","forEach","item","Object","keys","key","formatColumns","formatColumnsType","collectColumnsFromObjectKeys_","collectColumnsFromValues_","ARRAY","NULL","undefined","UNDEFINED","Array","isArray","isObject","contentKind","STRING","isAlreadyExpanded","data","setData_","visitValuesAndExpandType_","visitValuesAndWrapStringValues_","toggleTableContents","event","label","delegateTarget","toggleClasses","labelClasses","next","hiddenClasses","k","val","reference","expanded","toIncDom","register","STATE","setter","displayColumnsType","validator","isBoolean","isFunction","sort","columnstype","isString","tableClasses","BOOLEAN","NUMBER"],"mappings":"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","file":"node_modules/metal-datatable/src/Datatable.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport templates from './Datatable.soy.js';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\n\nclass Datatable extends Component {\n\n\t/**\n\t * Visits array items and asserts that it only contains one literal type.\n\t * @param {array} value\n\t * @protected\n\t * @throws {Error} If types are different.\n\t */\n\tassertNoMixedTypesInArrays_(value) {\n\t\tvar lastType;\n\t\tvar acceptArray = (v) => {\n\t\t\tvar type = this.getValueType_(v);\n\t\t\tthis.assertSameTypes_(lastType, type);\n\t\t\tlastType = type;\n\t\t\tthis.assertNoMixedTypesInArrays_(v);\n\t\t};\n\t\tvar acceptObject = (v) => this.assertNoMixedTypesInArrays_(v);\n\t\tthis.visit_(value, acceptArray, acceptObject);\n\t}\n\n\t/**\n\t * Asserts literal types are not the same.\n\t * @param {string} type1\n\t * @param {string} type2\n\t * @protected\n\t * @throws {Error} If types are different.\n\t */\n\tassertSameTypes_(type1, type2) {\n\t\tif (type1 && type2 && type1 !== type2) {\n\t\t\tthrow new Error('Datatable does not support mixed types in arrays.');\n\t\t}\n\t}\n\n\t/**\n\t * Extract keys from an array of objects. Column values are aggregated from\n\t * extracting 1-deep key values. For other array types keys are not\n\t * extracted and values are plotted in one column vertically.\n\t * @param {object} expandedValue\n\t * @protected\n\t */\n\tcollectColumnsFromArrayValues_(expandedValue) {\n\t\tvar value = expandedValue.value;\n\t\tvar isFirstArrayItemObject = value[0] && value[0].type === Datatable.TYPES.OBJECT;\n\t\tif (isFirstArrayItemObject) {\n\t\t\tlet columns = {};\n\t\t\tlet columnsType = {};\n\t\t\tvalue.forEach((item) => Object.keys(item.value).forEach((key) => {\n\t\t\t\tcolumns[key] = true;\n\t\t\t\tcolumnsType[key] = item.value[key].type;\n\t\t\t}));\n\t\t\texpandedValue.columns = this.formatColumns(Object.keys(columns));\n\t\t\texpandedValue.columnsType = this.formatColumnsType(columnsType);\n\t\t}\n\t}\n\n\t/**\n\t * Extract columns from object keys.\n\t * @param {object} expandedValue\n\t * @protected\n\t */\n\tcollectColumnsFromObjectKeys_(expandedValue) {\n\t\tvar value = expandedValue.value;\n\t\tlet columns = {};\n\t\tlet columnsType = {};\n\t\tObject.keys(value).forEach((key) => {\n\t\t\tcolumns[key] = true;\n\t\t\tcolumnsType[key] = value[key].type;\n\t\t});\n\t\texpandedValue.columns = this.formatColumns(Object.keys(columns));\n\t\texpandedValue.columnsType = this.formatColumnsType(columnsType);\n\t}\n\n\t/**\n\t * Analyzes the expanded object containing type and value and extracts an\n\t * array of columns to be used for plotting.\n\t * @param {object} expandedValue\n\t * @protected\n\t */\n\tcollectColumnsFromValues_(expandedValue) {\n\t\tswitch (expandedValue.type) {\n\t\t\tcase Datatable.TYPES.ARRAY:\n\t\t\t\tthis.collectColumnsFromArrayValues_(expandedValue);\n\t\t\t\tbreak;\n\t\t\tcase Datatable.TYPES.OBJECT:\n\t\t\t\tthis.collectColumnsFromObjectKeys_(expandedValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Internal helper to get literal JSON type of a value.\n\t * @param {*} value\n\t * @return {string} Type inferred from JSON value.\n\t */\n\tgetValueType_(value) {\n\t\tif (value === null) {\n\t\t\treturn Datatable.TYPES.NULL;\n\t\t}\n\t\tif (value === undefined) {\n\t\t\treturn Datatable.TYPES.UNDEFINED;\n\t\t}\n\t\tif (Array.isArray(value)) {\n\t\t\treturn Datatable.TYPES.ARRAY;\n\t\t}\n\t\tif (core.isObject(value) && value.contentKind === 'HTML') {\n\t\t\treturn Datatable.TYPES.STRING;\n\t\t}\n\t\treturn typeof value;\n\t}\n\n\t/**\n\t * Returns true if data is already expanded, false otherwise.\n\t * @param {*} data\n\t * @return {boolean}\n\t */\n\tisAlreadyExpanded(data) {\n\t\treturn core.isObject(data) && 'columns' in data && 'type' in data;\n\t}\n\n\tsetData_(data) {\n\t\tif (!this.isAlreadyExpanded(data)) {\n\t\t\tthis.assertNoMixedTypesInArrays_(data);\n\t\t\tdata = this.visitValuesAndExpandType_(data);\n\t\t}\n\t\treturn this.visitValuesAndWrapStringValues_(data);\n\t}\n\n\t/**\n\t * Toggles sibling table content of <code>event.delegateTarget</code>.\n\t * @param {Event} event\n\t */\n\ttoggleTableContents(event) {\n\t\tvar label = event.delegateTarget;\n\t\tdom.toggleClasses(label, this.labelClasses);\n\t\tdom.toggleClasses(dom.next(label, 'table'), this.hiddenClasses);\n\t}\n\n\t/**\n\t * Internal non-recursive visitor helper to navigate over JSON values.\n\t * @param {*} value The value to start the visit.\n\t * @param {!function} acceptArray Accept logic for array items.\n\t * @param {!function} acceptObject Accept logic for object keys and values.\n\t * @protected\n\t */\n\tvisit_(value, acceptArray, acceptObject) {\n\t\tswitch (this.getValueType_(value)) {\n\t\t\tcase Datatable.TYPES.ARRAY:\n\t\t\t\tvalue.forEach((v, k) => acceptArray(v, k, value));\n\t\t\t\tbreak;\n\t\t\tcase Datatable.TYPES.OBJECT:\n\t\t\t\tObject.keys(value).forEach((k) => acceptObject(value[k], k, value));\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Visits all json values and wraps it in object containing its type and\n\t * value.\n\t * @param {*} value The value to start the visit.\n\t * @return {object} Wrapped object containing type and value.\n\t * @protected\n\t */\n\tvisitValuesAndExpandType_(value) {\n\t\tvar acceptArray = (val, key, reference) => reference[key] = this.visitValuesAndExpandType_(val);\n\t\tvar acceptObject = (val, key, reference) => reference[key] = this.visitValuesAndExpandType_(val);\n\t\tthis.visit_(value, acceptArray, acceptObject);\n\t\tvar type = this.getValueType_(value);\n\t\tvar expanded = {\n\t\t\ttype: type,\n\t\t\tvalue: value\n\t\t};\n\t\tthis.collectColumnsFromValues_(expanded);\n\t\treturn expanded;\n\t}\n\n\t/**\n\t * Visits all json values and wraps it in special `Soy.toIncDom` helper if\n\t * it's string.\n\t * @param {*} value The value to start the visit.\n\t * @return {object} Wrapped string.\n\t * @protected\n\t */\n\tvisitValuesAndWrapStringValues_(value) {\n\t\tvar acceptArray = (val, key, reference) => reference[key] = this.visitValuesAndWrapStringValues_(val);\n\t\tvar acceptObject = (val, key, reference) => reference[key] = this.visitValuesAndWrapStringValues_(val);\n\t\tthis.visit_(value, acceptArray, acceptObject);\n\t\tif (core.isObject(value)) {\n\t\t\tvar type = this.getValueType_(value.value);\n\t\t\tif (type === Datatable.TYPES.STRING) {\n\t\t\t\tvalue.value = Soy.toIncDom(value.value);\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n}\nSoy.register(Datatable, templates);\n\nDatatable.STATE = {\n\t/**\n\t * Data to be plotted on datatable. Any JSON type is supported if it does\n\t * not contain mixed types inside an array.\n\t * @type {*}\n\t */\n\tdata: {\n\t\tsetter: 'setData_'\n\t},\n\n\t/**\n\t * If true displays types in column.\n\t * @type {boolean}\n\t * @default true\n\t */\n\tdisplayColumnsType: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: true\n\t},\n\n\t/**\n\t * Formats array of columns extracted from JSON data. Relevant for operates\n\t * over column values, such as sorting and formatting.\n\t * @type {function(array.<string>)}\n\t */\n\tformatColumns: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(columns) {\n\t\t\treturn columns.sort();\n\t\t}\n\t},\n\n\t/**\n\t * Formats map of columns type extracted from JSON data. Relevant for\n\t * operates over column values, such as sorting and formatting.\n\t * @type {function(map.<string,string>)}\n\t */\n\tformatColumnsType: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(columnstype) {\n\t\t\treturn columnstype;\n\t\t}\n\t},\n\n\t/**\n\t * Css classes to be used for hidden state.\n\t * @type {string}\n\t * @default 'hidden'\n\t */\n\thiddenClasses: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'hidden'\n\t},\n\n\t/**\n\t * Css classes to be used for labels.\n\t * @type {string}\n\t * @default 'collapsed expanded'\n\t */\n\tlabelClasses: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'collapsed expanded'\n\t},\n\n\t/**\n\t * Css classes to be used for tables.\n\t * @type {string}\n\t * @default 'table table-condensed table-hover'\n\t */\n\ttableClasses: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'table table-bordered table-condensed table-hover'\n\t}\n};\n\n/**\n * Datatable supported types.\n * @type {object}\n * @static\n */\nDatatable.TYPES = {\n\tARRAY: 'array',\n\tBOOLEAN: 'boolean',\n\tNULL: 'null',\n\tNUMBER: 'number',\n\tOBJECT: 'object',\n\tSTRING: 'string',\n\tUNDEFINED: 'undefined'\n};\n\nexport default Datatable;\n"],"sourceRoot":"/source/"}