{"version":3,"sources":["DragAutoScroll.js"],"names":["DragAutoScroll","opt_config","scrollTimeout_","stop","scrollContainer","isDocument","height","window","innerHeight","width","innerWidth","makeRegion","getRegion","scrollContainers","mouseX","mouseY","setTimeout","scrollInternal_","bind","delay","element","deltaX","deltaY","scrollBy","scrollTop","scrollLeft","i","length","scrollRegion","getRegionWithoutScroll_","pointInsideRegion","getScrollTop","getScrollLeft","Math","abs","left","maxDistance","speed","right","top","bottom","scrollElement_","scroll","clearTimeout","STATE","validator","isNumber","value"],"mappings":"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","file":"node_modules/metal-drag-drop/src/helpers/DragAutoScroll.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport State from 'metal-state';\nimport Position from 'metal-position';\n\n/**\n * Helper called by the `Drag` instance that scrolls elements when the\n * mouse is near their boundaries.\n */\nclass DragAutoScroll extends State {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * The handler for the current call to `setTimeout`.\n\t\t * @type {?number}\n\t\t * @protected\n\t\t */\n\t\tthis.scrollTimeout_ = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.stop();\n\t}\n\n\t/**\n\t * Gets the region for the given scroll container, without including scroll.\n\t * @param {!Element} scrollContainer\n\t * @return {!Object}\n\t * @protected\n\t */\n\tgetRegionWithoutScroll_(scrollContainer) {\n\t\tif (core.isDocument(scrollContainer)) {\n\t\t\tvar height = window.innerHeight;\n\t\t\tvar width = window.innerWidth;\n\t\t\treturn Position.makeRegion(height, height, 0, width, 0, width);\n\t\t} else {\n\t\t\treturn Position.getRegion(scrollContainer);\n\t\t}\n\t}\n\n\t/**\n\t * Schedules a function to scroll the given containers.\n\t * @param {!Array<!Element>} scrollContainers\n\t * @param {number} mouseX\n\t * @param {number} mouseY\n\t */\n\tscroll(scrollContainers, mouseX, mouseY) {\n\t\tthis.stop();\n\t\tthis.scrollTimeout_ = setTimeout(\n\t\t\tthis.scrollInternal_.bind(this, scrollContainers, mouseX, mouseY),\n\t\t\tthis.delay\n\t\t);\n\t}\n\n\t/**\n\t * Adds the given deltas to the given element's scroll position.\n\t * @param {!Element} element\n\t * @param {number} deltaX\n\t * @param {number} deltaY\n\t * @protected\n\t */\n\tscrollElement_(element, deltaX, deltaY) {\n\t\tif (core.isDocument(element)) {\n\t\t\twindow.scrollBy(deltaX, deltaY);\n\t\t} else {\n\t\t\telement.scrollTop += deltaY;\n\t\t\telement.scrollLeft += deltaX;\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls the given containers if the mouse is near their boundaries.\n\t * @param {!Array<!Element>} scrollContainers\n\t * @param {number} mouseX\n\t * @param {number} mouseY\n\t * @protected\n\t */\n\tscrollInternal_(scrollContainers, mouseX, mouseY) {\n\t\tfor (var i = 0; i < scrollContainers.length; i++) {\n\t\t\tvar scrollRegion = this.getRegionWithoutScroll_(scrollContainers[i]);\n\t\t\tif (!Position.pointInsideRegion(mouseX, mouseY, scrollRegion)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar deltaX = 0;\n\t\t\tvar deltaY = 0;\n\t\t\tvar scrollTop = Position.getScrollTop(scrollContainers[i]);\n\t\t\tvar scrollLeft = Position.getScrollLeft(scrollContainers[i]);\n\t\t\tif (scrollLeft > 0 && Math.abs(mouseX - scrollRegion.left) <= this.maxDistance) {\n\t\t\t\tdeltaX -= this.speed;\n\t\t\t} else if (Math.abs(mouseX - scrollRegion.right) <= this.maxDistance) {\n\t\t\t\tdeltaX += this.speed;\n\t\t\t}\n\t\t\tif (scrollTop > 0 && Math.abs(mouseY - scrollRegion.top) <= this.maxDistance) {\n\t\t\t\tdeltaY -= this.speed;\n\t\t\t} else if (Math.abs(mouseY - scrollRegion.bottom) <= this.maxDistance) {\n\t\t\t\tdeltaY += this.speed;\n\t\t\t}\n\n\t\t\tif (deltaX || deltaY) {\n\t\t\t\tthis.scrollElement_(scrollContainers[i], deltaX, deltaY);\n\t\t\t\tthis.scroll(scrollContainers, mouseX, mouseY);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stops any auto scrolling that was scheduled to happen in the future.\n\t */\n\tstop() {\n\t\tclearTimeout(this.scrollTimeout_);\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nDragAutoScroll.STATE = {\n\t/**\n\t * The delay in ms before an element is scrolled automatically.\n\t * @type {number}\n\t * @default 200\n\t */\n\tdelay: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 50\n\t},\n\n\t/**\n\t * The maximum distance the mouse needs to be from an element before\n\t * it will be scrolled automatically.\n\t * @type {number}\n\t * @default 10\n\t */\n\tmaxDistance: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 20\n\t},\n\n\t/**\n\t * The number of pixels that will be scrolled each time.\n\t * @type {number}\n\t * @default 10\n\t */\n\tspeed: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 20\n\t}\n};\n\nexport default DragAutoScroll;\n"],"sourceRoot":"/source/"}