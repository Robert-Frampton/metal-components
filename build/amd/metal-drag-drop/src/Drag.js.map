{"version":3,"sources":["Drag.js"],"names":["Drag","opt_config","activeDragPlaceholder_","activeDragSource_","distanceDragged_","dragging_","dragHandler_","dragScrollDelta_","mousePos_","mouseSourceDelta_","sourceHandler_","sourceRegion_","sourceRelativePos_","attachSourceEvents_","on","Events","DRAG","defaultDragFn_","END","defaultEndFn_","handleSourcesChanged_","bind","handleContainerChanged_","handleScrollDelta_","document","handleKeyDown_","toAttach","keydown","handleSourceKeyDown_","mousedown","handleDragStartEvent_","touchstart","eventTypes","Object","keys","i","length","listenerFn","isString","sources","add","delegate","container","buildEventObject_","placeholder","source","relativeX","x","relativeY","y","left","top","calculateInitialPosition_","event","mixin","getRegion","offsetLeft","offsetTop","isDef","clientX","clientY","canStartDrag_","disabled","button","isDragging","isWithinHandle_","target","cleanUpAfterDragging_","setAttribute","removeClasses","draggingClass","dragPlaceholder","Placeholder","CLONE","exitDocument","removeAllListeners","cloneActiveDrag_","cloneNode","style","position","append","parentNode","constrain_","region","constrainToAxis_","constrainToSteps_","constrainToRegion_","axis","bottom","right","constrain","isFunction","isElement","width","height","deltaX","deltaY","steps","createActiveDragPlaceholder_","moveToPosition_","disposeInternal","dispose","getActiveDrag","handleDragEndEvent_","autoScroll","stop","hideDocShim","emit","handleDragMoveEvent_","targetTouches","distanceX","distanceY","hasReachedMinimumDistance_","startDragging_","start","scrollContainers","scroll","updatePositionFromMouse","delegateTarget","currentTarget","preventDefault","type","apply","attachDocListeners","useShim","mousemove","touchmove","mouseup","touchend","keyCode","speedX","keyboardSpeed","speedY","updatePositionFromDelta","prevScrollContainersSelector_","Math","abs","minimumDragDistance","element","handles","match","contains","setterAutoScrollFn_","val","setterConstrainFn","toElement","setterScrollContainersFn_","elements","toElements_","push","addClasses","START","originalEvent","elementOrSelector","matched","querySelectorAll","Array","prototype","slice","call","updatePosition","newRegion","validateElementOrString_","validatorConstrainFn","isObject","STATE","setter","value","writeOnce","validator","isBoolean","isNumber","valueFn"],"mappings":"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","file":"node_modules/metal-drag-drop/src/Drag.js","sourcesContent":["'use strict';\n\nimport { core, object } from 'metal';\nimport dom from 'metal-dom';\nimport DragAutoScroll from './helpers/DragAutoScroll';\nimport DragScrollDelta from './helpers/DragScrollDelta';\nimport DragShim from './helpers/DragShim';\nimport { EventHandler } from 'metal-events';\nimport Position from 'metal-position';\nimport State from 'metal-state';\n\n/**\n * Responsible for making elements draggable. Handles all the logic\n * for dragging elements. Dropping is handled by `DragDrop`.\n * @extends {State}\n */\nclass Drag extends State {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * The drag placeholder that is active at the moment.\n\t\t * @type {Element}\n\t\t * @protected\n\t\t */\n\t\tthis.activeDragPlaceholder_ = null;\n\n\t\t/**\n\t\t * The drag source that is active at the moment.\n\t\t * @type {Element}\n\t\t * @protected\n\t\t */\n\t\tthis.activeDragSource_ = null;\n\n\t\t/**\n\t\t * The distance that has been dragged.\n\t\t * @type {number}\n\t\t * @protected\n\t\t */\n\t\tthis.distanceDragged_ = 0;\n\n\t\t/**\n\t\t * Flag indicating if one of the sources are being dragged.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.dragging_ = false;\n\n\t\t/**\n\t\t * The `EventHandler` instance that holds events that keep track of the drag action.\n\t\t * @type {!EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.dragHandler_ = new EventHandler();\n\n\t\t/**\n\t\t * `DragScrollDelta` instance.\n\t\t * @type {!DragScrollDelta}\n\t\t * @protected\n\t\t */\n\t\tthis.dragScrollDelta_ = new DragScrollDelta();\n\n\t\t/**\n\t\t * The current x and y positions of the mouse (or null if not dragging).\n\t\t * @type {{x: number, y: number}}\n\t\t * @protected\n\t\t */\n\t\tthis.mousePos_ = null;\n\n\t\t/**\n\t\t * The distance between the mouse position and the dragged source position\n\t\t * (or null if not dragging).\n\t\t * @type {{x: number, y: number}}\n\t\t * @protected\n\t\t */\n\t\tthis.mouseSourceDelta_ = null;\n\n\t\t/**\n\t\t * The `EventHandler` instance that holds events for the source (or sources).\n\t\t * @type {!EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.sourceHandler_ = new EventHandler();\n\n\t\t/**\n\t\t * The current region values of the element being dragged, relative to\n\t\t * the document (or null if not dragging).\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.sourceRegion_ = null;\n\n\t\t/**\n\t\t * The current x and y positions of the element being dragged relative to its\n\t\t * `offsetParent`, or to the viewport if there's no `offsetParent`\n\t\t * (or null if not dragging).\n\t\t * @type {{x: number, y: number}}\n\t\t * @protected\n\t\t */\n\t\tthis.sourceRelativePos_ = null;\n\n\t\tthis.attachSourceEvents_();\n\t\tthis.on(Drag.Events.DRAG, this.defaultDragFn_, true);\n\t\tthis.on(Drag.Events.END, this.defaultEndFn_, true);\n\t\tthis.on('sourcesChanged', this.handleSourcesChanged_.bind(this));\n\t\tthis.on('containerChanged', this.handleContainerChanged_.bind(this));\n\t\tthis.dragScrollDelta_.on('scrollDelta', this.handleScrollDelta_.bind(this));\n\t\tdom.on(document, 'keydown', this.handleKeyDown_.bind(this));\n\t}\n\n\t/**\n\t * Attaches the necessary events to the source (or sources).\n\t * @protected\n\t */\n\tattachSourceEvents_() {\n\t\tvar toAttach = {\n\t\t\tkeydown: this.handleSourceKeyDown_.bind(this),\n\t\t\tmousedown: this.handleDragStartEvent_.bind(this),\n\t\t\ttouchstart: this.handleDragStartEvent_.bind(this)\n\t\t};\n\t\tvar eventTypes = Object.keys(toAttach);\n\t\tfor (var i = 0; i < eventTypes.length; i++) {\n\t\t\tvar listenerFn = toAttach[eventTypes[i]];\n\t\t\tif (core.isString(this.sources)) {\n\t\t\t\tthis.sourceHandler_.add(dom.delegate(this.container, eventTypes[i], this.sources, listenerFn));\n\t\t\t} else {\n\t\t\t\tthis.sourceHandler_.add(dom.on(this.sources, eventTypes[i], listenerFn));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Builds the object with data to be passed to a drag event.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildEventObject_() {\n\t\treturn {\n\t\t\tplaceholder: this.activeDragPlaceholder_,\n\t\t\tsource: this.activeDragSource_,\n\t\t\trelativeX: this.sourceRelativePos_.x,\n\t\t\trelativeY: this.sourceRelativePos_.y,\n\t\t\tx: this.sourceRegion_.left,\n\t\t\ty: this.sourceRegion_.top\n\t\t};\n\t}\n\n\t/**\n\t * Calculates the initial positions for the drag action.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\tcalculateInitialPosition_(event) {\n\t\tthis.sourceRegion_ = object.mixin({}, Position.getRegion(this.activeDragSource_, true));\n\t\tthis.sourceRelativePos_ = {\n\t\t\tx: this.activeDragSource_.offsetLeft,\n\t\t\ty: this.activeDragSource_.offsetTop\n\t\t};\n\t\tif (core.isDef(event.clientX)) {\n\t\t\tthis.mousePos_ = {\n\t\t\t\tx: event.clientX,\n\t\t\t\ty: event.clientY\n\t\t\t};\n\t\t\tthis.mouseSourceDelta_ = {\n\t\t\t\tx: this.sourceRegion_.left - this.mousePos_.x,\n\t\t\t\ty: this.sourceRegion_.top - this.mousePos_.y\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event can start a drag operation.\n\t * @param {!Event} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tcanStartDrag_(event) {\n\t\treturn !this.disabled &&\n\t\t\t(!core.isDef(event.button) || event.button === 0) &&\n\t\t\t!this.isDragging() &&\n\t\t\tthis.isWithinHandle_(event.target);\n\t}\n\n\t/**\n\t * Resets all variables to their initial values and detaches drag listeners.\n\t * @protected\n\t */\n\tcleanUpAfterDragging_() {\n\t\tif (this.activeDragPlaceholder_) {\n\t\t\tthis.activeDragPlaceholder_.setAttribute('aria-grabbed', 'false');\n\t\t\tdom.removeClasses(this.activeDragPlaceholder_, this.draggingClass);\n\t\t\tif (this.dragPlaceholder === Drag.Placeholder.CLONE) {\n\t\t\t\tdom.exitDocument(this.activeDragPlaceholder_);\n\t\t\t}\n\t\t}\n\t\tthis.activeDragPlaceholder_ = null;\n\t\tthis.activeDragSource_ = null;\n\t\tthis.sourceRegion_ = null;\n\t\tthis.sourceRelativePos_ = null;\n\t\tthis.mousePos_ = null;\n\t\tthis.mouseSourceDelta_ = null;\n\t\tthis.dragging_ = false;\n\t\tthis.dragHandler_.removeAllListeners();\n\t}\n\n\t/**\n\t * Clones the active drag source and adds the clone to the document.\n\t * @return {!Element}\n\t * @protected\n\t */\n\tcloneActiveDrag_() {\n\t\tvar placeholder = this.activeDragSource_.cloneNode(true);\n\t\tplaceholder.style.position = 'absolute';\n\t\tplaceholder.style.left = this.sourceRelativePos_.x + 'px';\n\t\tplaceholder.style.top = this.sourceRelativePos_.y + 'px';\n\t\tdom.append(this.activeDragSource_.parentNode, placeholder);\n\t\treturn placeholder;\n\t}\n\n\t/**\n\t * Constrains the given region according to the current state configuration.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrain_(region) {\n\t\tthis.constrainToAxis_(region);\n\t\tthis.constrainToSteps_(region);\n\t\tthis.constrainToRegion_(region);\n\t}\n\n\t/**\n\t * Constrains the given region according to the chosen drag axis, if any.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrainToAxis_(region) {\n\t\tif (this.axis === 'x') {\n\t\t\tregion.top = this.sourceRegion_.top;\n\t\t\tregion.bottom = this.sourceRegion_.bottom;\n\t\t} else if (this.axis === 'y') {\n\t\t\tregion.left = this.sourceRegion_.left;\n\t\t\tregion.right = this.sourceRegion_.right;\n\t\t}\n\t}\n\n\t/**\n\t * Constrains the given region within the region defined by the `constrain` state.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrainToRegion_(region) {\n\t\tvar constrain = this.constrain;\n\t\tif (!constrain) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (core.isFunction(constrain)) {\n\t\t\tobject.mixin(region, constrain(region));\n\n\t\t} else {\n\t\t\tif (core.isElement(constrain)) {\n\t\t\t\tconstrain = Position.getRegion(constrain, true);\n\t\t\t}\n\t\t\tif (region.left < constrain.left) {\n\t\t\t\tregion.left = constrain.left;\n\t\t\t} else if (region.right > constrain.right) {\n\t\t\t\tregion.left -= region.right - constrain.right;\n\t\t\t}\n\t\t\tif (region.top < constrain.top) {\n\t\t\t\tregion.top = constrain.top;\n\t\t\t} else if (region.bottom > constrain.bottom) {\n\t\t\t\tregion.top -= region.bottom - constrain.bottom;\n\t\t\t}\n\t\t\tregion.right = region.left + region.width;\n\t\t\tregion.bottom = region.top + region.height;\n\t\t}\n\t}\n\n\t/**\n\t * Constrains the given region to change according to the `steps` state.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrainToSteps_(region) {\n\t\tvar deltaX = region.left - this.sourceRegion_.left;\n\t\tvar deltaY = region.top - this.sourceRegion_.top;\n\t\tregion.left -= deltaX % this.steps.x;\n\t\tregion.right = region.left + region.width;\n\t\tregion.top -= deltaY % this.steps.y;\n\t\tregion.bottom = region.top + region.height;\n\t}\n\n\t/**\n\t * Creates the active drag placeholder, unless it already exists.\n\t * @protected\n\t */\n\tcreateActiveDragPlaceholder_() {\n\t\tvar dragPlaceholder = this.dragPlaceholder;\n\t\tif (dragPlaceholder === Drag.Placeholder.CLONE) {\n\t\t\tthis.activeDragPlaceholder_ = this.cloneActiveDrag_();\n\t\t} else if (core.isElement(dragPlaceholder)) {\n\t\t\tthis.activeDragPlaceholder_ = dragPlaceholder;\n\t\t} else {\n\t\t\tthis.activeDragPlaceholder_ = this.activeDragSource_;\n\t\t}\n\t}\n\n\t/**\n\t * The default behavior for the `Drag.Events.DRAG` event. Can be prevented\n\t * by calling the `preventDefault` function on the event's facade. Moves\n\t * the placeholder to the new calculated source position.\n\t * @protected\n\t */\n\tdefaultDragFn_() {\n\t\tthis.moveToPosition_(this.activeDragPlaceholder_);\n\t}\n\n\t/**\n\t * The default behavior for the `Drag.Events.END` event. Can be prevented\n\t * by calling the `preventDefault` function on the event's facade. Moves\n\t * the source element to the final calculated position.\n\t * @protected\n\t */\n\tdefaultEndFn_() {\n\t\tthis.moveToPosition_(this.activeDragSource_);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.cleanUpAfterDragging_();\n\t\tthis.dragHandler_ = null;\n\t\tthis.dragScrollDelta_.dispose();\n\t\tthis.dragScrollDelta_ = null;\n\t\tthis.sourceHandler_.removeAllListeners();\n\t\tthis.sourceHandler_ = null;\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Gets the active drag source.\n\t * @return {Element}\n\t */\n\tgetActiveDrag() {\n\t\treturn this.activeDragSource_;\n\t}\n\n\t/**\n\t * Handles events that can end a drag action, like \"mouseup\" and \"touchend\".\n\t * Triggered when the mouse drag action ends.\n\t * @protected\n\t */\n\thandleDragEndEvent_() {\n\t\tif (this.autoScroll) {\n\t\t\tthis.autoScroll.stop();\n\t\t}\n\t\tthis.dragScrollDelta_.stop();\n\t\tDragShim.hideDocShim();\n\t\tthis.emit(Drag.Events.END, this.buildEventObject_());\n\t\tthis.cleanUpAfterDragging_();\n\t}\n\n\t/**\n\t * Handles events that can move a draggable element, like \"mousemove\" and \"touchmove\".\n\t * Tracks the movement on the screen to update the drag action.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleDragMoveEvent_(event) {\n\t\tvar position = event.targetTouches ? event.targetTouches[0] : event;\n\t\tvar distanceX = position.clientX - this.mousePos_.x;\n\t\tvar distanceY = position.clientY - this.mousePos_.y;\n\t\tthis.mousePos_.x = position.clientX;\n\t\tthis.mousePos_.y = position.clientY;\n\t\tif (!this.isDragging() && !this.hasReachedMinimumDistance_(distanceX, distanceY)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.isDragging()) {\n\t\t\tthis.startDragging_(event);\n\t\t\tthis.dragScrollDelta_.start(this.activeDragPlaceholder_, this.scrollContainers);\n\t\t}\n\t\tif (this.autoScroll) {\n\t\t\tthis.autoScroll.scroll(this.scrollContainers, this.mousePos_.x, this.mousePos_.y);\n\t\t}\n\t\tthis.updatePositionFromMouse();\n\t}\n\n\t/**\n\t * Handles events that can start a drag action, like \"mousedown\" and \"touchstart\".\n\t * When this is triggered and the sources were not already being dragged, more\n\t * listeners will be attached to keep track of the drag action.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleDragStartEvent_(event) {\n\t\tthis.activeDragSource_ = event.delegateTarget || event.currentTarget;\n\n\t\tif (this.canStartDrag_(event)) {\n\t\t\tthis.calculateInitialPosition_(event.targetTouches ? event.targetTouches[0] : event);\n\t\t\tevent.preventDefault();\n\t\t\tif (event.type === 'keydown') {\n\t\t\t\tthis.startDragging_(event);\n\t\t\t} else {\n\t\t\t\tthis.dragHandler_.add.apply(\n\t\t\t\t\tthis.dragHandler_,\n\t\t\t\t\tDragShim.attachDocListeners(this.useShim, {\n\t\t\t\t\t\tmousemove: this.handleDragMoveEvent_.bind(this),\n\t\t\t\t\t\ttouchmove: this.handleDragMoveEvent_.bind(this),\n\t\t\t\t\t\tmouseup: this.handleDragEndEvent_.bind(this),\n\t\t\t\t\t\ttouchend: this.handleDragEndEvent_.bind(this)\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tthis.distanceDragged_ = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles a `keydown` event on the document. Ends the drag if ESC was the pressed key.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleKeyDown_(event) {\n\t\tif (event.keyCode === 27 && this.isDragging()) {\n\t\t\tthis.handleDragEndEvent_();\n\t\t}\n\t}\n\n\t/**\n\t * Handles a \"scrollDelta\" event. Updates the position data for the source,\n\t * as well as the placeholder's position on the screen when \"move\" is set to true.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\thandleScrollDelta_(event) {\n\t\tthis.mouseSourceDelta_.x += event.deltaX;\n\t\tthis.mouseSourceDelta_.y += event.deltaY;\n\t\tthis.updatePositionFromMouse();\n\t}\n\n\t/**\n\t * Handles a `keydown` event from `KeyboardDrag`. Does the appropriate drag action\n\t * for the pressed key.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\thandleSourceKeyDown_(event) {\n\t\tif (this.isDragging()) {\n\t\t\tvar currentTarget = event.delegateTarget || event.currentTarget;\n\t\t\tif (currentTarget !== this.activeDragSource_) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (event.keyCode >= 37 && event.keyCode <= 40) {\n\t\t\t\t// Arrow keys during drag move the source.\n\t\t\t\tvar deltaX = 0;\n\t\t\t\tvar deltaY = 0;\n\t\t\t\tvar speedX = this.keyboardSpeed >= this.steps.x ? this.keyboardSpeed : this.steps.x;\n\t\t\t\tvar speedY = this.keyboardSpeed >= this.steps.y ? this.keyboardSpeed : this.steps.y;\n\t\t\t\tif (event.keyCode === 37) {\n\t\t\t\t\tdeltaX -= speedX;\n\t\t\t\t} else if (event.keyCode === 38) {\n\t\t\t\t\tdeltaY -= speedY;\n\t\t\t\t} else if (event.keyCode === 39) {\n\t\t\t\t\tdeltaX += speedX;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaY += speedY;\n\t\t\t\t}\n\t\t\t\tthis.updatePositionFromDelta(deltaX, deltaY);\n\t\t\t\tevent.preventDefault();\n\t\t\t} else if (event.keyCode === 13 || event.keyCode === 32 || event.keyCode === 27) {\n\t\t\t\t// Enter, space or esc during drag will end it.\n\t\t\t\tthis.handleDragEndEvent_();\n\t\t\t}\n\t\t} else if (event.keyCode === 13 || event.keyCode === 32) {\n\t\t\t// Enter or space will start the drag action.\n\t\t\tthis.handleDragStartEvent_(event);\n\t\t}\n\t}\n\n\t/**\n\t * Triggers when the `container` state changes. Detaches events attached to the\n\t * previous container and attaches them to the new value instead.\n\t * @protected\n\t */\n\thandleContainerChanged_() {\n\t\tif (core.isString(this.sources)) {\n\t\t\tthis.sourceHandler_.removeAllListeners();\n\t\t\tthis.attachSourceEvents_();\n\t\t}\n\t\tif (this.prevScrollContainersSelector_) {\n\t\t\tthis.scrollContainers = this.prevScrollContainersSelector_;\n\t\t}\n\t}\n\n\t/**\n\t * Triggers when the `sources` state changes. Detaches events attached to the\n\t * previous sources and attaches them to the new value instead.\n\t * @protected\n\t */\n\thandleSourcesChanged_() {\n\t\tthis.sourceHandler_.removeAllListeners();\n\t\tthis.attachSourceEvents_();\n\t}\n\n\t/**\n\t * Checks if the minimum distance for dragging has been reached after\n\t * adding the given values.\n\t * @param {number} distanceX\n\t * @param {number} distanceY\n\t * @return {boolean}\n\t * @protected\n\t */\n\thasReachedMinimumDistance_(distanceX, distanceY) {\n\t\tthis.distanceDragged_ += Math.abs(distanceX) + Math.abs(distanceY);\n\t\treturn this.distanceDragged_ >= this.minimumDragDistance;\n\t}\n\n\t/**\n\t * Checks if one of the sources are being dragged.\n\t * @return {boolean}\n\t */\n\tisDragging() {\n\t\treturn this.dragging_;\n\t}\n\n\t/**\n\t * Checks if the given element is within a valid handle.\n\t * @param {!Element} element\n\t * @protected\n\t */\n\tisWithinHandle_(element) {\n\t\tvar handles = this.handles;\n\t\tif (!handles) {\n\t\t\treturn true;\n\t\t} else if (core.isString(handles)) {\n\t\t\treturn dom.match(element, handles + ', ' + handles + ' *');\n\t\t} else {\n\t\t\treturn dom.contains(handles, element);\n\t\t}\n\t}\n\n\t/**\n\t * Moves the given element to the current source coordinates.\n\t * @param {!Element} element\n\t * @protected\n\t */\n\tmoveToPosition_(element) {\n\t\telement.style.left = this.sourceRelativePos_.x + 'px';\n\t\telement.style.top = this.sourceRelativePos_.y + 'px';\n\t}\n\n\t/**\n\t * Setter for the `autoScroll` state key.\n\t * @param {*} val\n\t * @return {!DragAutoScroll}\n\t */\n\tsetterAutoScrollFn_(val) {\n\t\tif (val !== false) {\n\t\t\treturn new DragAutoScroll(val);\n\t\t}\n\t}\n\n\t/**\n\t * Setter for the `constrain` state key.\n\t * @param {!Element|Object|string} val\n\t * @return {!Element|Object}\n\t * @protected\n\t */\n\tsetterConstrainFn(val) {\n\t\tif (core.isString(val)) {\n\t\t\tval = dom.toElement(val);\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t * Sets the `scrollContainers` state key.\n\t * @param {Element|string} val\n\t * @return {!Array<!Element>}\n\t * @protected\n\t */\n\tsetterScrollContainersFn_(val) {\n\t\tthis.prevScrollContainersSelector_ = core.isString(val) ? val : null;\n\t\tvar elements = this.toElements_(val);\n\t\telements.push(document);\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Starts dragging the selected source.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\tstartDragging_(event) {\n\t\tthis.dragging_ = true;\n\t\tthis.createActiveDragPlaceholder_();\n\t\tdom.addClasses(this.activeDragPlaceholder_, this.draggingClass);\n\t\tthis.activeDragPlaceholder_.setAttribute('aria-grabbed', 'true');\n\t\tthis.emit(Drag.Events.START, {\n\t\t\toriginalEvent: event\n\t\t});\n\t}\n\n\t/**\n\t * Converts the given element or selector into an array of elements.\n\t * @param {Element|string} elementOrSelector\n\t * @return {!Array<!Element>}\n\t * @protected\n\t */\n\ttoElements_(elementOrSelector) {\n\t\tif (core.isString(elementOrSelector)) {\n\t\t\tvar matched = this.container.querySelectorAll(elementOrSelector);\n\t\t\treturn Array.prototype.slice.call(matched, 0);\n\t\t} else if (elementOrSelector) {\n\t\t\treturn [elementOrSelector];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Updates the dragged element's position using the given calculated region.\n\t * @param {!Object} newRegion\n\t */\n\tupdatePosition(newRegion) {\n\t\tthis.constrain_(newRegion);\n\t\tvar deltaX = newRegion.left - this.sourceRegion_.left;\n\t\tvar deltaY = newRegion.top - this.sourceRegion_.top;\n\t\tif (deltaX !== 0 || deltaY !== 0) {\n\t\t\tthis.sourceRegion_ = newRegion;\n\t\t\tthis.sourceRelativePos_.x += deltaX;\n\t\t\tthis.sourceRelativePos_.y += deltaY;\n\t\t\tthis.emit(Drag.Events.DRAG, this.buildEventObject_());\n\t\t}\n\t}\n\n\t/**\n\t * Updates the dragged element's position, moving its placeholder if `move`\n\t * is set to true.\n\t * @param {number} deltaX\n\t * @param {number} deltaY\n\t */\n\tupdatePositionFromDelta(deltaX, deltaY) {\n\t\tvar newRegion = object.mixin({}, this.sourceRegion_);\n\t\tnewRegion.left += deltaX;\n\t\tnewRegion.right += deltaX;\n\t\tnewRegion.top += deltaY;\n\t\tnewRegion.bottom += deltaY;\n\t\tthis.updatePosition(newRegion);\n\t}\n\n\t/**\n\t * Updates the dragged element's position, according to the current mouse position.\n\t */\n\tupdatePositionFromMouse() {\n\t\tvar newRegion = {\n\t\t\theight: this.sourceRegion_.height,\n\t\t\tleft: this.mousePos_.x + this.mouseSourceDelta_.x,\n\t\t\ttop: this.mousePos_.y + this.mouseSourceDelta_.y,\n\t\t\twidth: this.sourceRegion_.width\n\t\t};\n\t\tnewRegion.right = newRegion.left + newRegion.width;\n\t\tnewRegion.bottom = newRegion.top + newRegion.height;\n\t\tthis.updatePosition(newRegion);\n\t}\n\n\t/**\n\t * Validates the given value, making sure that it's either an element or a string.\n\t * @param {*} val\n\t * @return {boolean}\n\t * @protected\n\t */\n\tvalidateElementOrString_(val) {\n\t\treturn core.isString(val) || core.isElement(val);\n\t}\n\n\t/**\n\t * Validates the value of the `constrain` state.\n\t * @param {*} val\n\t * @return {boolean}\n\t * @protected\n\t */\n\tvalidatorConstrainFn(val) {\n\t\treturn core.isString(val) || core.isObject(val);\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nDrag.STATE = {\n\t/**\n\t * Configuration object for the `DragAutoScroll` instance that will be used for\n\t * automatically scrolling the elements in `scrollContainers` during drag when\n\t * the mouse is near their boundaries. If set to `false`, auto scrolling will be\n\t * disabled (default).\n\t * @type {!Object|boolean}\n\t * @default false\n\t */\n\tautoScroll: {\n\t\tsetter: 'setterAutoScrollFn_',\n\t\tvalue: false,\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * The axis that allows dragging. Can be set to just x, just y or both (default).\n\t * @type {string}\n\t */\n\taxis: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Object with the boundaries, that the dragged element should not leave\n\t * while being dragged. If not set, the element is free to be dragged\n\t * to anywhere on the page. Can be either already an object with the\n\t * boundaries relative to the document, or an element to use the boundaries\n\t * from, or even a selector for finding that element.\n\t * @type {!Element|Object|function()|string}\n\t */\n\tconstrain: {\n\t\tsetter: 'setterConstrainFn',\n\t\tvalidator: 'validatorConstrainFn'\n\t},\n\n\t/**\n\t * An element that contains all sources, targets and scroll containers. This\n\t * will be used when delegate events are attached or when looking for elements\n\t * by selector. Defaults to `document`.\n\t * @type {!Element|string}\n\t * @default document\n\t */\n\tcontainer: {\n\t\tsetter: dom.toElement,\n\t\tvalidator: 'validateElementOrString_',\n\t\tvalue: document\n\t},\n\n\t/**\n\t * Flag indicating if drag operations are disabled. When set to true, it\n\t * dragging won't work.\n\t * @type {boolean}\n\t * @default false\n\t */\n\tdisabled: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: false\n\t},\n\n\t/**\n\t * The CSS class that should be added to the node being dragged.\n\t * @type {string}\n\t * @default 'dragging'\n\t */\n\tdraggingClass: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'dragging'\n\t},\n\n\t/**\n\t * The placeholder element that should be moved during drag. Can be either\n\t * an element or the \"clone\" string, indicating that a clone of the source\n\t * being dragged should be used. If nothing is set, the original source element\n\t * will be used.\n\t * @type {Element|?string}\n\t */\n\tdragPlaceholder: {\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * Elements inside the source that should be the drag handles. Can be\n\t * either a single element or a selector for multiple elements.\n\t * @type {Element|?string}\n\t */\n\thandles: {\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * The number of pixels that the source should move when dragged via\n\t * the keyboard controls.\n\t * @default 10\n\t */\n\tkeyboardSpeed: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 10\n\t},\n\n\t/**\n\t * The minimum distance, in pixels, that the mouse needs to move before\n\t * the action is considered a drag.\n\t * @type {number}\n\t * @default 5\n\t */\n\tminimumDragDistance: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 5,\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * Elements with scroll, besides the document, that contain any of the given\n\t * sources. Can be either a single element or a selector for multiple elements.\n\t * @type {Element|string}\n\t */\n\tscrollContainers: {\n\t\tsetter: 'setterScrollContainersFn_',\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * Elements that should be draggable. Can be either a single element\n\t * or a selector for multiple elements.\n\t * @type {!Element|string}\n\t */\n\tsources: {\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * The number of pixels that the source element should move at a time,\n\t * for each axis. When set to a value higher than 1, dragging won't be\n\t * a continuous movement, since the source element will move by multiple\n\t * pixels on each step.\n\t * @type {!{x: number, y: number}}\n\t */\n\tsteps: {\n\t\tvalidator: core.isObject,\n\t\tvalueFn: () => {\n\t\t\treturn {\n\t\t\t\tx: 1,\n\t\t\t\ty: 1\n\t\t\t};\n\t\t}\n\t},\n\n\t/**\n\t * Flag indicating if a shim should be used for capturing document events.\n\t * This is important for allowing dragging nodes over iframes. If false,\n\t * events will be listened in the document itself instead.\n\t * @type {boolean}\n\t * @default true\n\t */\n\tuseShim: {\n\t\tvalue: true\n\t}\n};\n\n/**\n * Holds the names of events that can be emitted by `Drag`.\n * @type {!Object}\n * @static\n */\nDrag.Events = {\n\tDRAG: 'drag',\n\tEND: 'end',\n\tSTART: 'start'\n};\n\n/**\n * Holds the values that can be passed to the `dragPlaceholder` state key.\n * @type {!Object}\n * @static\n */\nDrag.Placeholder = {\n\tCLONE: 'clone'\n};\n\nexport default Drag;\n"],"sourceRoot":"/source/"}