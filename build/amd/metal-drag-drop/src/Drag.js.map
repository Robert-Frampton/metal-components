{"version":3,"sources":["Drag.js"],"names":["Drag","opt_config","activeDragPlaceholder_","activeDragSource_","distanceDragged_","dragging_","dragHandler_","dragScrollDelta_","mousePos_","mouseSourceDelta_","sourceHandler_","sourceRegion_","sourceRelativePos_","attachSourceEvents_","on","Events","DRAG","defaultDragFn_","END","defaultEndFn_","handleSourcesChanged_","bind","handleContainerChanged_","handleScrollDelta_","document","handleKeyDown_","toAttach","keydown","handleSourceKeyDown_","mousedown","handleDragStartEvent_","touchstart","eventTypes","Object","keys","i","length","listenerFn","isString","sources","add","delegate","container","placeholder","source","relativeX","x","relativeY","y","left","top","event","mixin","getRegion","offsetLeft","offsetTop","isDef","clientX","clientY","disabled","button","isDragging","isWithinHandle_","target","setAttribute","removeClasses","draggingClass","dragPlaceholder","Placeholder","CLONE","exitDocument","removeAllListeners","cloneNode","style","position","append","parentNode","region","constrainToSteps_","constrainToRegion_","constrainToAxis_","axis","bottom","right","constrain","isFunction","isElement","width","height","deltaX","deltaY","steps","cloneActiveDrag_","moveToPosition_","cleanUpAfterDragging_","dispose","autoScroll","stop","hideDocShim","emit","buildEventObject_","targetTouches","distanceX","distanceY","hasReachedMinimumDistance_","startDragging_","start","scrollContainers","scroll","updatePositionFromMouse","delegateTarget","currentTarget","canStartDrag_","calculateInitialPosition_","preventDefault","type","apply","attachDocListeners","useShim","mousemove","handleDragMoveEvent_","touchmove","mouseup","handleDragEndEvent_","touchend","keyCode","speedX","keyboardSpeed","speedY","updatePositionFromDelta","prevScrollContainersSelector_","Math","abs","minimumDragDistance","element","handles","match","contains","val","toElement","elements","toElements_","push","createActiveDragPlaceholder_","addClasses","START","originalEvent","elementOrSelector","matched","querySelectorAll","Array","prototype","slice","call","newRegion","constrain_","updatePosition","isObject","STATE","setter","value","writeOnce","validator","isBoolean","isNumber","valueFn"],"mappings":"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","file":"node_modules/metal-drag-drop/src/Drag.js","sourcesContent":["'use strict';\n\nimport { core, object } from 'metal';\nimport dom from 'metal-dom';\nimport DragAutoScroll from './helpers/DragAutoScroll';\nimport DragScrollDelta from './helpers/DragScrollDelta';\nimport DragShim from './helpers/DragShim';\nimport { EventHandler } from 'metal-events';\nimport Position from 'metal-position';\nimport State from 'metal-state';\n\n/**\n * Responsible for making elements draggable. Handles all the logic\n * for dragging elements. Dropping is handled by `DragDrop`.\n * @extends {State}\n */\nclass Drag extends State {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * The drag placeholder that is active at the moment.\n\t\t * @type {Element}\n\t\t * @protected\n\t\t */\n\t\tthis.activeDragPlaceholder_ = null;\n\n\t\t/**\n\t\t * The drag source that is active at the moment.\n\t\t * @type {Element}\n\t\t * @protected\n\t\t */\n\t\tthis.activeDragSource_ = null;\n\n\t\t/**\n\t\t * The distance that has been dragged.\n\t\t * @type {number}\n\t\t * @protected\n\t\t */\n\t\tthis.distanceDragged_ = 0;\n\n\t\t/**\n\t\t * Flag indicating if one of the sources are being dragged.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.dragging_ = false;\n\n\t\t/**\n\t\t * The `EventHandler` instance that holds events that keep track of the drag action.\n\t\t * @type {!EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.dragHandler_ = new EventHandler();\n\n\t\t/**\n\t\t * `DragScrollDelta` instance.\n\t\t * @type {!DragScrollDelta}\n\t\t * @protected\n\t\t */\n\t\tthis.dragScrollDelta_ = new DragScrollDelta();\n\n\t\t/**\n\t\t * The current x and y positions of the mouse (or null if not dragging).\n\t\t * @type {{x: number, y: number}}\n\t\t * @protected\n\t\t */\n\t\tthis.mousePos_ = null;\n\n\t\t/**\n\t\t * The distance between the mouse position and the dragged source position\n\t\t * (or null if not dragging).\n\t\t * @type {{x: number, y: number}}\n\t\t * @protected\n\t\t */\n\t\tthis.mouseSourceDelta_ = null;\n\n\t\t/**\n\t\t * The `EventHandler` instance that holds events for the source (or sources).\n\t\t * @type {!EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.sourceHandler_ = new EventHandler();\n\n\t\t/**\n\t\t * The current region values of the element being dragged, relative to\n\t\t * the document (or null if not dragging).\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.sourceRegion_ = null;\n\n\t\t/**\n\t\t * The current x and y positions of the element being dragged relative to its\n\t\t * `offsetParent`, or to the viewport if there's no `offsetParent`\n\t\t * (or null if not dragging).\n\t\t * @type {{x: number, y: number}}\n\t\t * @protected\n\t\t */\n\t\tthis.sourceRelativePos_ = null;\n\n\t\tthis.attachSourceEvents_();\n\t\tthis.on(Drag.Events.DRAG, this.defaultDragFn_, true);\n\t\tthis.on(Drag.Events.END, this.defaultEndFn_, true);\n\t\tthis.on('sourcesChanged', this.handleSourcesChanged_.bind(this));\n\t\tthis.on('containerChanged', this.handleContainerChanged_.bind(this));\n\t\tthis.dragScrollDelta_.on('scrollDelta', this.handleScrollDelta_.bind(this));\n\t\tdom.on(document, 'keydown', this.handleKeyDown_.bind(this));\n\t}\n\n\t/**\n\t * Attaches the necessary events to the source (or sources).\n\t * @protected\n\t */\n\tattachSourceEvents_() {\n\t\tvar toAttach = {\n\t\t\tkeydown: this.handleSourceKeyDown_.bind(this),\n\t\t\tmousedown: this.handleDragStartEvent_.bind(this),\n\t\t\ttouchstart: this.handleDragStartEvent_.bind(this)\n\t\t};\n\t\tvar eventTypes = Object.keys(toAttach);\n\t\tfor (var i = 0; i < eventTypes.length; i++) {\n\t\t\tvar listenerFn = toAttach[eventTypes[i]];\n\t\t\tif (core.isString(this.sources)) {\n\t\t\t\tthis.sourceHandler_.add(dom.delegate(this.container, eventTypes[i], this.sources, listenerFn));\n\t\t\t} else {\n\t\t\t\tthis.sourceHandler_.add(dom.on(this.sources, eventTypes[i], listenerFn));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Builds the object with data to be passed to a drag event.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildEventObject_() {\n\t\treturn {\n\t\t\tplaceholder: this.activeDragPlaceholder_,\n\t\t\tsource: this.activeDragSource_,\n\t\t\trelativeX: this.sourceRelativePos_.x,\n\t\t\trelativeY: this.sourceRelativePos_.y,\n\t\t\tx: this.sourceRegion_.left,\n\t\t\ty: this.sourceRegion_.top\n\t\t};\n\t}\n\n\t/**\n\t * Calculates the initial positions for the drag action.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\tcalculateInitialPosition_(event) {\n\t\tthis.sourceRegion_ = object.mixin({}, Position.getRegion(this.activeDragSource_, true));\n\t\tthis.sourceRelativePos_ = {\n\t\t\tx: this.activeDragSource_.offsetLeft,\n\t\t\ty: this.activeDragSource_.offsetTop\n\t\t};\n\t\tif (core.isDef(event.clientX)) {\n\t\t\tthis.mousePos_ = {\n\t\t\t\tx: event.clientX,\n\t\t\t\ty: event.clientY\n\t\t\t};\n\t\t\tthis.mouseSourceDelta_ = {\n\t\t\t\tx: this.sourceRegion_.left - this.mousePos_.x,\n\t\t\t\ty: this.sourceRegion_.top - this.mousePos_.y\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event can start a drag operation.\n\t * @param {!Event} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tcanStartDrag_(event) {\n\t\treturn !this.disabled &&\n\t\t\t(!core.isDef(event.button) || event.button === 0) &&\n\t\t\t!this.isDragging() &&\n\t\t\tthis.isWithinHandle_(event.target);\n\t}\n\n\t/**\n\t * Resets all variables to their initial values and detaches drag listeners.\n\t * @protected\n\t */\n\tcleanUpAfterDragging_() {\n\t\tif (this.activeDragPlaceholder_) {\n\t\t\tthis.activeDragPlaceholder_.setAttribute('aria-grabbed', 'false');\n\t\t\tdom.removeClasses(this.activeDragPlaceholder_, this.draggingClass);\n\t\t\tif (this.dragPlaceholder === Drag.Placeholder.CLONE) {\n\t\t\t\tdom.exitDocument(this.activeDragPlaceholder_);\n\t\t\t}\n\t\t}\n\t\tthis.activeDragPlaceholder_ = null;\n\t\tthis.activeDragSource_ = null;\n\t\tthis.sourceRegion_ = null;\n\t\tthis.sourceRelativePos_ = null;\n\t\tthis.mousePos_ = null;\n\t\tthis.mouseSourceDelta_ = null;\n\t\tthis.dragging_ = false;\n\t\tthis.dragHandler_.removeAllListeners();\n\t}\n\n\t/**\n\t * Clones the active drag source and adds the clone to the document.\n\t * @return {!Element}\n\t * @protected\n\t */\n\tcloneActiveDrag_() {\n\t\tvar placeholder = this.activeDragSource_.cloneNode(true);\n\t\tplaceholder.style.position = 'absolute';\n\t\tplaceholder.style.left = this.sourceRelativePos_.x + 'px';\n\t\tplaceholder.style.top = this.sourceRelativePos_.y + 'px';\n\t\tdom.append(this.activeDragSource_.parentNode, placeholder);\n\t\treturn placeholder;\n\t}\n\n\t/**\n\t * Constrains the given region according to the current state configuration.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrain_(region) {\n\t\tthis.constrainToSteps_(region);\n\t\tthis.constrainToRegion_(region);\n\t\tthis.constrainToAxis_(region);\n\t}\n\n\t/**\n\t * Constrains the given region according to the chosen drag axis, if any.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrainToAxis_(region) {\n\t\tif (this.axis === 'x') {\n\t\t\tregion.top = this.sourceRegion_.top;\n\t\t\tregion.bottom = this.sourceRegion_.bottom;\n\t\t} else if (this.axis === 'y') {\n\t\t\tregion.left = this.sourceRegion_.left;\n\t\t\tregion.right = this.sourceRegion_.right;\n\t\t}\n\t}\n\n\t/**\n\t * Constrains the given region within the region defined by the `constrain` state.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrainToRegion_(region) {\n\t\tvar constrain = this.constrain;\n\t\tif (!constrain) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (core.isFunction(constrain)) {\n\t\t\tobject.mixin(region, constrain(region));\n\n\t\t} else {\n\t\t\tif (core.isElement(constrain)) {\n\t\t\t\tconstrain = Position.getRegion(constrain, true);\n\t\t\t}\n\t\t\tif (region.left < constrain.left) {\n\t\t\t\tregion.left = constrain.left;\n\t\t\t} else if (region.right > constrain.right) {\n\t\t\t\tregion.left -= region.right - constrain.right;\n\t\t\t}\n\t\t\tif (region.top < constrain.top) {\n\t\t\t\tregion.top = constrain.top;\n\t\t\t} else if (region.bottom > constrain.bottom) {\n\t\t\t\tregion.top -= region.bottom - constrain.bottom;\n\t\t\t}\n\t\t\tregion.right = region.left + region.width;\n\t\t\tregion.bottom = region.top + region.height;\n\t\t}\n\t}\n\n\t/**\n\t * Constrains the given region to change according to the `steps` state.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrainToSteps_(region) {\n\t\tvar deltaX = region.left - this.sourceRegion_.left;\n\t\tvar deltaY = region.top - this.sourceRegion_.top;\n\t\tregion.left -= deltaX % this.steps.x;\n\t\tregion.right = region.left + region.width;\n\t\tregion.top -= deltaY % this.steps.y;\n\t\tregion.bottom = region.top + region.height;\n\t}\n\n\t/**\n\t * Creates the active drag placeholder, unless it already exists.\n\t * @protected\n\t */\n\tcreateActiveDragPlaceholder_() {\n\t\tvar dragPlaceholder = this.dragPlaceholder;\n\t\tif (dragPlaceholder === Drag.Placeholder.CLONE) {\n\t\t\tthis.activeDragPlaceholder_ = this.cloneActiveDrag_();\n\t\t} else if (core.isElement(dragPlaceholder)) {\n\t\t\tthis.activeDragPlaceholder_ = dragPlaceholder;\n\t\t} else {\n\t\t\tthis.activeDragPlaceholder_ = this.activeDragSource_;\n\t\t}\n\t}\n\n\t/**\n\t * The default behavior for the `Drag.Events.DRAG` event. Can be prevented\n\t * by calling the `preventDefault` function on the event's facade. Moves\n\t * the placeholder to the new calculated source position.\n\t * @protected\n\t */\n\tdefaultDragFn_() {\n\t\tthis.moveToPosition_(this.activeDragPlaceholder_);\n\t}\n\n\t/**\n\t * The default behavior for the `Drag.Events.END` event. Can be prevented\n\t * by calling the `preventDefault` function on the event's facade. Moves\n\t * the source element to the final calculated position.\n\t * @protected\n\t */\n\tdefaultEndFn_() {\n\t\tthis.moveToPosition_(this.activeDragSource_);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.cleanUpAfterDragging_();\n\t\tthis.dragHandler_ = null;\n\t\tthis.dragScrollDelta_.dispose();\n\t\tthis.dragScrollDelta_ = null;\n\t\tthis.sourceHandler_.removeAllListeners();\n\t\tthis.sourceHandler_ = null;\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Gets the active drag source.\n\t * @return {Element}\n\t */\n\tgetActiveDrag() {\n\t\treturn this.activeDragSource_;\n\t}\n\n\t/**\n\t * Handles events that can end a drag action, like \"mouseup\" and \"touchend\".\n\t * Triggered when the mouse drag action ends.\n\t * @protected\n\t */\n\thandleDragEndEvent_() {\n\t\tif (this.autoScroll) {\n\t\t\tthis.autoScroll.stop();\n\t\t}\n\t\tthis.dragScrollDelta_.stop();\n\t\tDragShim.hideDocShim();\n\t\tthis.emit(Drag.Events.END, this.buildEventObject_());\n\t\tthis.cleanUpAfterDragging_();\n\t}\n\n\t/**\n\t * Handles events that can move a draggable element, like \"mousemove\" and \"touchmove\".\n\t * Tracks the movement on the screen to update the drag action.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleDragMoveEvent_(event) {\n\t\tvar position = event.targetTouches ? event.targetTouches[0] : event;\n\t\tvar distanceX = position.clientX - this.mousePos_.x;\n\t\tvar distanceY = position.clientY - this.mousePos_.y;\n\t\tthis.mousePos_.x = position.clientX;\n\t\tthis.mousePos_.y = position.clientY;\n\t\tif (!this.isDragging() && !this.hasReachedMinimumDistance_(distanceX, distanceY)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.isDragging()) {\n\t\t\tthis.startDragging_(event);\n\t\t\tthis.dragScrollDelta_.start(this.activeDragPlaceholder_, this.scrollContainers);\n\t\t}\n\t\tif (this.autoScroll) {\n\t\t\tthis.autoScroll.scroll(this.scrollContainers, this.mousePos_.x, this.mousePos_.y);\n\t\t}\n\t\tthis.updatePositionFromMouse();\n\t}\n\n\t/**\n\t * Handles events that can start a drag action, like \"mousedown\" and \"touchstart\".\n\t * When this is triggered and the sources were not already being dragged, more\n\t * listeners will be attached to keep track of the drag action.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleDragStartEvent_(event) {\n\t\tthis.activeDragSource_ = event.delegateTarget || event.currentTarget;\n\n\t\tif (this.canStartDrag_(event)) {\n\t\t\tthis.calculateInitialPosition_(event.targetTouches ? event.targetTouches[0] : event);\n\t\t\tevent.preventDefault();\n\t\t\tif (event.type === 'keydown') {\n\t\t\t\tthis.startDragging_(event);\n\t\t\t} else {\n\t\t\t\tthis.dragHandler_.add.apply(\n\t\t\t\t\tthis.dragHandler_,\n\t\t\t\t\tDragShim.attachDocListeners(this.useShim, {\n\t\t\t\t\t\tmousemove: this.handleDragMoveEvent_.bind(this),\n\t\t\t\t\t\ttouchmove: this.handleDragMoveEvent_.bind(this),\n\t\t\t\t\t\tmouseup: this.handleDragEndEvent_.bind(this),\n\t\t\t\t\t\ttouchend: this.handleDragEndEvent_.bind(this)\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tthis.distanceDragged_ = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles a `keydown` event on the document. Ends the drag if ESC was the pressed key.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleKeyDown_(event) {\n\t\tif (event.keyCode === 27 && this.isDragging()) {\n\t\t\tthis.handleDragEndEvent_();\n\t\t}\n\t}\n\n\t/**\n\t * Handles a \"scrollDelta\" event. Updates the position data for the source,\n\t * as well as the placeholder's position on the screen when \"move\" is set to true.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\thandleScrollDelta_(event) {\n\t\tthis.mouseSourceDelta_.x += event.deltaX;\n\t\tthis.mouseSourceDelta_.y += event.deltaY;\n\t\tthis.updatePositionFromMouse();\n\t}\n\n\t/**\n\t * Handles a `keydown` event from `KeyboardDrag`. Does the appropriate drag action\n\t * for the pressed key.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\thandleSourceKeyDown_(event) {\n\t\tif (this.isDragging()) {\n\t\t\tvar currentTarget = event.delegateTarget || event.currentTarget;\n\t\t\tif (currentTarget !== this.activeDragSource_) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (event.keyCode >= 37 && event.keyCode <= 40) {\n\t\t\t\t// Arrow keys during drag move the source.\n\t\t\t\tvar deltaX = 0;\n\t\t\t\tvar deltaY = 0;\n\t\t\t\tvar speedX = this.keyboardSpeed >= this.steps.x ? this.keyboardSpeed : this.steps.x;\n\t\t\t\tvar speedY = this.keyboardSpeed >= this.steps.y ? this.keyboardSpeed : this.steps.y;\n\t\t\t\tif (event.keyCode === 37) {\n\t\t\t\t\tdeltaX -= speedX;\n\t\t\t\t} else if (event.keyCode === 38) {\n\t\t\t\t\tdeltaY -= speedY;\n\t\t\t\t} else if (event.keyCode === 39) {\n\t\t\t\t\tdeltaX += speedX;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaY += speedY;\n\t\t\t\t}\n\t\t\t\tthis.updatePositionFromDelta(deltaX, deltaY);\n\t\t\t\tevent.preventDefault();\n\t\t\t} else if (event.keyCode === 13 || event.keyCode === 32 || event.keyCode === 27) {\n\t\t\t\t// Enter, space or esc during drag will end it.\n\t\t\t\tthis.handleDragEndEvent_();\n\t\t\t}\n\t\t} else if (event.keyCode === 13 || event.keyCode === 32) {\n\t\t\t// Enter or space will start the drag action.\n\t\t\tthis.handleDragStartEvent_(event);\n\t\t}\n\t}\n\n\t/**\n\t * Triggers when the `container` state changes. Detaches events attached to the\n\t * previous container and attaches them to the new value instead.\n\t * @protected\n\t */\n\thandleContainerChanged_() {\n\t\tif (core.isString(this.sources)) {\n\t\t\tthis.sourceHandler_.removeAllListeners();\n\t\t\tthis.attachSourceEvents_();\n\t\t}\n\t\tif (this.prevScrollContainersSelector_) {\n\t\t\tthis.scrollContainers = this.prevScrollContainersSelector_;\n\t\t}\n\t}\n\n\t/**\n\t * Triggers when the `sources` state changes. Detaches events attached to the\n\t * previous sources and attaches them to the new value instead.\n\t * @protected\n\t */\n\thandleSourcesChanged_() {\n\t\tthis.sourceHandler_.removeAllListeners();\n\t\tthis.attachSourceEvents_();\n\t}\n\n\t/**\n\t * Checks if the minimum distance for dragging has been reached after\n\t * adding the given values.\n\t * @param {number} distanceX\n\t * @param {number} distanceY\n\t * @return {boolean}\n\t * @protected\n\t */\n\thasReachedMinimumDistance_(distanceX, distanceY) {\n\t\tthis.distanceDragged_ += Math.abs(distanceX) + Math.abs(distanceY);\n\t\treturn this.distanceDragged_ >= this.minimumDragDistance;\n\t}\n\n\t/**\n\t * Checks if one of the sources are being dragged.\n\t * @return {boolean}\n\t */\n\tisDragging() {\n\t\treturn this.dragging_;\n\t}\n\n\t/**\n\t * Checks if the given element is within a valid handle.\n\t * @param {!Element} element\n\t * @protected\n\t */\n\tisWithinHandle_(element) {\n\t\tvar handles = this.handles;\n\t\tif (!handles) {\n\t\t\treturn true;\n\t\t} else if (core.isString(handles)) {\n\t\t\treturn dom.match(element, handles + ', ' + handles + ' *');\n\t\t} else {\n\t\t\treturn dom.contains(handles, element);\n\t\t}\n\t}\n\n\t/**\n\t * Moves the given element to the current source coordinates.\n\t * @param {!Element} element\n\t * @protected\n\t */\n\tmoveToPosition_(element) {\n\t\telement.style.left = this.sourceRelativePos_.x + 'px';\n\t\telement.style.top = this.sourceRelativePos_.y + 'px';\n\t}\n\n\t/**\n\t * Setter for the `autoScroll` state key.\n\t * @param {*} val\n\t * @return {!DragAutoScroll}\n\t */\n\tsetterAutoScrollFn_(val) {\n\t\tif (val !== false) {\n\t\t\treturn new DragAutoScroll(val);\n\t\t}\n\t}\n\n\t/**\n\t * Setter for the `constrain` state key.\n\t * @param {!Element|Object|string} val\n\t * @return {!Element|Object}\n\t * @protected\n\t */\n\tsetterConstrainFn(val) {\n\t\tif (core.isString(val)) {\n\t\t\tval = dom.toElement(val);\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t * Sets the `scrollContainers` state key.\n\t * @param {Element|string} val\n\t * @return {!Array<!Element>}\n\t * @protected\n\t */\n\tsetterScrollContainersFn_(val) {\n\t\tthis.prevScrollContainersSelector_ = core.isString(val) ? val : null;\n\t\tvar elements = this.toElements_(val);\n\t\telements.push(document);\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Starts dragging the selected source.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\tstartDragging_(event) {\n\t\tthis.dragging_ = true;\n\t\tthis.createActiveDragPlaceholder_();\n\t\tdom.addClasses(this.activeDragPlaceholder_, this.draggingClass);\n\t\tthis.activeDragPlaceholder_.setAttribute('aria-grabbed', 'true');\n\t\tthis.emit(Drag.Events.START, {\n\t\t\toriginalEvent: event\n\t\t});\n\t}\n\n\t/**\n\t * Converts the given element or selector into an array of elements.\n\t * @param {Element|string} elementOrSelector\n\t * @return {!Array<!Element>}\n\t * @protected\n\t */\n\ttoElements_(elementOrSelector) {\n\t\tif (core.isString(elementOrSelector)) {\n\t\t\tvar matched = this.container.querySelectorAll(elementOrSelector);\n\t\t\treturn Array.prototype.slice.call(matched, 0);\n\t\t} else if (elementOrSelector) {\n\t\t\treturn [elementOrSelector];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Updates the dragged element's position using the given calculated region.\n\t * @param {!Object} newRegion\n\t */\n\tupdatePosition(newRegion) {\n\t\tthis.constrain_(newRegion);\n\t\tvar deltaX = newRegion.left - this.sourceRegion_.left;\n\t\tvar deltaY = newRegion.top - this.sourceRegion_.top;\n\t\tif (deltaX !== 0 || deltaY !== 0) {\n\t\t\tthis.sourceRegion_ = newRegion;\n\t\t\tthis.sourceRelativePos_.x += deltaX;\n\t\t\tthis.sourceRelativePos_.y += deltaY;\n\t\t\tthis.emit(Drag.Events.DRAG, this.buildEventObject_());\n\t\t}\n\t}\n\n\t/**\n\t * Updates the dragged element's position, moving its placeholder if `move`\n\t * is set to true.\n\t * @param {number} deltaX\n\t * @param {number} deltaY\n\t */\n\tupdatePositionFromDelta(deltaX, deltaY) {\n\t\tvar newRegion = object.mixin({}, this.sourceRegion_);\n\t\tnewRegion.left += deltaX;\n\t\tnewRegion.right += deltaX;\n\t\tnewRegion.top += deltaY;\n\t\tnewRegion.bottom += deltaY;\n\t\tthis.updatePosition(newRegion);\n\t}\n\n\t/**\n\t * Updates the dragged element's position, according to the current mouse position.\n\t */\n\tupdatePositionFromMouse() {\n\t\tvar newRegion = {\n\t\t\theight: this.sourceRegion_.height,\n\t\t\tleft: this.mousePos_.x + this.mouseSourceDelta_.x,\n\t\t\ttop: this.mousePos_.y + this.mouseSourceDelta_.y,\n\t\t\twidth: this.sourceRegion_.width\n\t\t};\n\t\tnewRegion.right = newRegion.left + newRegion.width;\n\t\tnewRegion.bottom = newRegion.top + newRegion.height;\n\t\tthis.updatePosition(newRegion);\n\t}\n\n\t/**\n\t * Validates the given value, making sure that it's either an element or a string.\n\t * @param {*} val\n\t * @return {boolean}\n\t * @protected\n\t */\n\tvalidateElementOrString_(val) {\n\t\treturn core.isString(val) || core.isElement(val);\n\t}\n\n\t/**\n\t * Validates the value of the `constrain` state.\n\t * @param {*} val\n\t * @return {boolean}\n\t * @protected\n\t */\n\tvalidatorConstrainFn(val) {\n\t\treturn core.isString(val) || core.isObject(val);\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nDrag.STATE = {\n\t/**\n\t * Configuration object for the `DragAutoScroll` instance that will be used for\n\t * automatically scrolling the elements in `scrollContainers` during drag when\n\t * the mouse is near their boundaries. If set to `false`, auto scrolling will be\n\t * disabled (default).\n\t * @type {!Object|boolean}\n\t * @default false\n\t */\n\tautoScroll: {\n\t\tsetter: 'setterAutoScrollFn_',\n\t\tvalue: false,\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * The axis that allows dragging. Can be set to just x, just y or both (default).\n\t * @type {string}\n\t */\n\taxis: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Object with the boundaries, that the dragged element should not leave\n\t * while being dragged. If not set, the element is free to be dragged\n\t * to anywhere on the page. Can be either already an object with the\n\t * boundaries relative to the document, or an element to use the boundaries\n\t * from, or even a selector for finding that element.\n\t * @type {!Element|Object|function()|string}\n\t */\n\tconstrain: {\n\t\tsetter: 'setterConstrainFn',\n\t\tvalidator: 'validatorConstrainFn'\n\t},\n\n\t/**\n\t * An element that contains all sources, targets and scroll containers. This\n\t * will be used when delegate events are attached or when looking for elements\n\t * by selector. Defaults to `document`.\n\t * @type {!Element|string}\n\t * @default document\n\t */\n\tcontainer: {\n\t\tsetter: dom.toElement,\n\t\tvalidator: 'validateElementOrString_',\n\t\tvalue: document\n\t},\n\n\t/**\n\t * Flag indicating if drag operations are disabled. When set to true, it\n\t * dragging won't work.\n\t * @type {boolean}\n\t * @default false\n\t */\n\tdisabled: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: false\n\t},\n\n\t/**\n\t * The CSS class that should be added to the node being dragged.\n\t * @type {string}\n\t * @default 'dragging'\n\t */\n\tdraggingClass: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'dragging'\n\t},\n\n\t/**\n\t * The placeholder element that should be moved during drag. Can be either\n\t * an element or the \"clone\" string, indicating that a clone of the source\n\t * being dragged should be used. If nothing is set, the original source element\n\t * will be used.\n\t * @type {Element|?string}\n\t */\n\tdragPlaceholder: {\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * Elements inside the source that should be the drag handles. Can be\n\t * either a single element or a selector for multiple elements.\n\t * @type {Element|?string}\n\t */\n\thandles: {\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * The number of pixels that the source should move when dragged via\n\t * the keyboard controls.\n\t * @default 10\n\t */\n\tkeyboardSpeed: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 10\n\t},\n\n\t/**\n\t * The minimum distance, in pixels, that the mouse needs to move before\n\t * the action is considered a drag.\n\t * @type {number}\n\t * @default 5\n\t */\n\tminimumDragDistance: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 5,\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * Elements with scroll, besides the document, that contain any of the given\n\t * sources. Can be either a single element or a selector for multiple elements.\n\t * @type {Element|string}\n\t */\n\tscrollContainers: {\n\t\tsetter: 'setterScrollContainersFn_',\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * Elements that should be draggable. Can be either a single element\n\t * or a selector for multiple elements.\n\t * @type {!Element|string}\n\t */\n\tsources: {\n\t\tvalidator: 'validateElementOrString_'\n\t},\n\n\t/**\n\t * The number of pixels that the source element should move at a time,\n\t * for each axis. When set to a value higher than 1, dragging won't be\n\t * a continuous movement, since the source element will move by multiple\n\t * pixels on each step.\n\t * @type {!{x: number, y: number}}\n\t */\n\tsteps: {\n\t\tvalidator: core.isObject,\n\t\tvalueFn: () => {\n\t\t\treturn {\n\t\t\t\tx: 1,\n\t\t\t\ty: 1\n\t\t\t};\n\t\t}\n\t},\n\n\t/**\n\t * Flag indicating if a shim should be used for capturing document events.\n\t * This is important for allowing dragging nodes over iframes. If false,\n\t * events will be listened in the document itself instead.\n\t * @type {boolean}\n\t * @default true\n\t */\n\tuseShim: {\n\t\tvalue: true\n\t}\n};\n\n/**\n * Holds the names of events that can be emitted by `Drag`.\n * @type {!Object}\n * @static\n */\nDrag.Events = {\n\tDRAG: 'drag',\n\tEND: 'end',\n\tSTART: 'start'\n};\n\n/**\n * Holds the values that can be passed to the `dragPlaceholder` state key.\n * @type {!Object}\n * @static\n */\nDrag.Placeholder = {\n\tCLONE: 'clone'\n};\n\nexport default Drag;\n"],"sourceRoot":"/source/"}