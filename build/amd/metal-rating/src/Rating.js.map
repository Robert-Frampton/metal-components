{"version":3,"sources":["Rating.js"],"names":["Rating","ratingClicked_","value","event","disabled","index","parseInt","delegateTarget","getAttribute","canReset","reset","setPreviousRate_","Number","STATE","validator","isBoolean","cssClasses","off","on","inputHiddenName","isString","label","val","isFunction","options","Array","isArray","title","isNumber","register"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAOMA,M;;;;;;;;;;;sCAIQ;AACN,qBAAKC,cAAL,GAAsB,KAAKC,KAA3B;AACH;;;6CAOgBC,K,EAAO;AACpB,oBAAI,CAAC,KAAKC,QAAV,EAAoB;AAChB,wBAAIC,QAAQC,SAASH,MAAMI,cAAN,CAAqBC,YAArB,CAAkC,YAAlC,CAAT,EAA0D,EAA1D,CAAZ;;AAEA,wBAAIH,UAAU,KAAKJ,cAAf,IAAiC,KAAKQ,QAA1C,EAAoD;AAChD,6BAAKC,KAAL;AACH,qBAFD,MAGK;AACD,6BAAKR,KAAL,GAAaG,KAAb;AACH;;AAED,yBAAKJ,cAAL,GAAsB,KAAKC,KAA3B;AACH;AACJ;;;oDAMuB;AACpB,qBAAKS,gBAAL;AACH;;;iDAOoBR,K,EAAO;AACxB,oBAAI,CAAC,KAAKC,QAAV,EAAoB;AAChB,wBAAIC,QAAQO,OAAON,QAAP,CAAgBH,MAAMI,cAAN,CAAqBC,YAArB,CAAkC,YAAlC,CAAhB,EAAiE,EAAjE,CAAZ;;AAEA,yBAAKN,KAAL,GAAaG,KAAb;AACH;AACJ;;;oCAMO;AACJ,qBAAKH,KAAL,GAAa,CAAC,CAAd;AACA,qBAAKD,cAAL,GAAsB,CAAC,CAAvB;AACH;;;+CAMkB;AACf,qBAAKC,KAAL,GAAa,KAAKD,cAAlB;AACH;;;;;;AAGLD,WAAOa,KAAP,GAAe;;AAEX;;;;;AAKAJ,kBAAU;AACRP,mBAAO,IADC;AAERY,uBAAW,gBAAKC;AAFR,SAPC;;AAYX;;;;AAIAC,oBAAY;AACRd,mBAAO;AACHe,qBAAK,gCADF;AAEHC,oBAAI;AAFD;AADC,SAhBD;;AAuBX;;;;;AAKAd,kBAAU;AACNF,mBAAO,KADD;AAENY,uBAAW,gBAAKC;AAFV,SA5BC;;AAiCX;;;;;;;;AAQAI,yBAAiB;AACbjB,mBAAO,MADM;AAEbY,uBAAW,gBAAKM;AAFH,SAzCN;;AA8CX;;;;;;;AAOAC,eAAO;AACHnB,mBAAO,EADJ;AAEHY,uBAAW;AAAA,uBAAO,gBAAKM,QAAL,CAAcE,GAAd,KAAsB,gBAAKC,UAAL,CAAgBD,GAAhB,CAA7B;AAAA;AAFR,SArDI;;AA0DX;;;;AAIAE,iBAAS;AACLV,uBAAWW,MAAMC,OADZ;AAELxB,mBAAO,CACH;AACIA,uBAAO,CADX;AAEIyB,uBAAO;AAFX,aADG,EAKH;AACIzB,uBAAO,CADX;AAEIyB,uBAAO;AAFX,aALG,EASH;AACIzB,uBAAO,CADX;AAEIyB,uBAAO;AAFX,aATG,EAaH;AACIzB,uBAAO,CADX;AAEIyB,uBAAO;AAFX,aAbG,EAiBH;AACIzB,uBAAO,CADX;AAEIyB,uBAAO;AAFX,aAjBG;AAFF,SA9DE;;AAwFX;;;;;AAKAzB,eAAO;AACHY,uBAAW,gBAAKc,QADb;AAEH1B,mBAAO,CAAC;AAFL;AA7FI,KAAf;AAkGA,kBAAI2B,QAAJ,CAAa7B,MAAb;;sBAEeA,M","file":"node_modules/metal-rating/src/Rating.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\nimport templates from './Rating.soy.js';\n\nclass Rating extends Component {\n    /**\n     * @inheritDoc\n     */\n    created() {\n        this.ratingClicked_ = this.value;\n    }\n\n    /**\n     * Handles click event\n     * @param {Event} event\n     * @protected\n     */\n    handleClickEvent(event) {\n        if (!this.disabled) {\n            let index = parseInt(event.delegateTarget.getAttribute('data-index'), 10);\n\n            if (index === this.ratingClicked_ && this.canReset) {\n                this.reset();\n            }\n            else {\n                this.value = index;\n            }\n\n            this.ratingClicked_ = this.value;\n        }\n    }\n\n    /**\n     * Handles mouseleave event\n     * @protected\n     */\n    handleMouseLeaveEvent() {\n        this.setPreviousRate_();\n    }\n\n    /**\n     * Handles mouseover event\n     * @param {event} event\n     * @protected\n     */\n    handleMouseOverEvent(event) {\n        if (!this.disabled) {\n            let index = Number.parseInt(event.delegateTarget.getAttribute('data-index'), 10);\n\n            this.value = index;\n        }\n    }\n\n    /**\n     * Reset rating attributes to its initial value\n     * @protected\n     */\n    reset() {\n        this.value = -1;\n        this.ratingClicked_ = -1;\n    }\n\n    /**\n     * Set value attribute with the previous rating selected\n     * @protected\n     */\n    setPreviousRate_() {\n        this.value = this.ratingClicked_;\n    }\n}\n\nRating.STATE = {\n\n    /**\n     * Flag indicating if this component can be reset or not\n     * @type {boolean}\n     * @default true\n     */\n    canReset: {\n      value: true,\n      validator: core.isBoolean\n    },\n\n    /**\n     * Optional CSS classes to be added to the inner rating element.\n     * @type {string}\n     */\n    cssClasses: {\n        value: {\n            off: 'glyphicon glyphicon-star-empty',\n            on: 'glyphicon glyphicon-star'\n        }\n    },\n\n    /**\n     * Block or unblock rating functionality.\n     * @type {?boolean}\n     * @default false\n     */\n    disabled: {\n        value: false,\n        validator: core.isBoolean\n    },\n\n    /**\n     * Name of the hidden input. It can be used to send\n     * current option value as a form data.\n     *\n     * @attribute inputHiddenName\n     * @type {string}\n     * @default 'rate'\n     */\n    inputHiddenName: {\n        value: 'rate',\n        validator: core.isString\n    },\n\n    /**\n     * Label to be displayed with the Rating elements. Can be either a string\n     * or an incremental dom function.\n     * @attribute label\n     * @type {string}\n     * @default ''\n     */\n    label: {\n        value: '',\n        validator: val => core.isString(val) || core.isFunction(val)\n    },\n\n    /**\n     * List of rate options.\n     * @type {array}\n     */\n    options: {\n        validator: Array.isArray,\n        value: [\n            {\n                value: 1,\n                title: ''\n            },\n            {\n                value: 2,\n                title: ''\n            },\n            {\n                value: 3,\n                title: ''\n            },\n            {\n                value: 4,\n                title: ''\n            },\n            {\n                value: 5,\n                title: ''\n            }\n        ]\n    },\n\n    /**\n     * Rating current index value.\n     * @type {?number}\n     * @default null\n     */\n    value: {\n        validator: core.isNumber,\n        value: -1\n    }\n};\nSoy.register(Rating, templates);\n\nexport default Rating;\n"],"sourceRoot":"/source/"}