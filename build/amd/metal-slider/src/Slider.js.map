{"version":3,"sources":["Slider.js"],"names":["Slider","attached","drag_","constrain","element","querySelector","container","handles","sources","on","handleElementChanged_","attachDragEvents_","Events","DRAG","updateValueFromDragData_","bind","END","disposeInternal","dispose","getDrag","data","newVal","onRailMouseDown_","event","hasClass","target","updateValue_","offsetX","syncMax","value","updateHandlePosition_","syncMin","syncValue","isDragging","positionValue","min","max","style","left","handlePosition","offset","region","getRegion","Math","round","width","relativeX","register","STATE","inputName","validator","isString","val","isNumber"],"mappings":"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","file":"node_modules/metal-slider/src/Slider.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport Component from 'metal-component';\nimport { Drag } from 'metal-drag-drop';\nimport Position from 'metal-position';\nimport Soy from 'metal-soy';\n\nimport templates from './Slider.soy.js';\n\n/**\n * Slider component.\n */\nclass Slider extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\t/**\n\t\t * Manages dragging the rail handle to update the slider value.\n\t\t * @type {Drag}\n\t\t * @protected\n\t\t */\n\t\tthis.drag_ = new Drag({\n\t\t\tconstrain: this.element.querySelector('.rail'),\n\t\t\tcontainer: this.element,\n\t\t\thandles: '.handle',\n\t\t\tsources: '.rail-handle'\n\t\t});\n\t\tthis.on('elementChanged', this.handleElementChanged_);\n\n\t\tthis.attachDragEvents_();\n\t}\n\n\t/**\n\t * Attaches the drag events to handle value updates when dragging the rail handle.\n\t * protected\n\t */\n\tattachDragEvents_() {\n\t\tthis.drag_.on(Drag.Events.DRAG, this.updateValueFromDragData_.bind(this));\n\t\tthis.drag_.on(Drag.Events.END, this.updateValueFromDragData_.bind(this));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.drag_.dispose();\n\t}\n\n\t/**\n\t * Returns the `Drag` instance being used.\n\t * @return {!Drag}\n\t */\n\tgetDrag() {\n\t\treturn this.drag_;\n\t}\n\n\t/**\n\t * Handles the `elementChanged` event. Updates the drag container to the new\n\t * element, and also updates the constrain element.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\thandleElementChanged_(data) {\n\t\tthis.drag_.container = data.newVal;\n\t\tthis.drag_.constrain = data.newVal.querySelector('.rail');\n\t}\n\n\t/**\n\t * Handles mouse down actions on the slider rail and updates the slider value accordingly.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\tonRailMouseDown_(event) {\n\t\tif (dom.hasClass(event.target, 'rail') || dom.hasClass(event.target, 'rail-active')) {\n\t\t\tthis.updateValue_(event.offsetX, 0);\n\t\t}\n\t}\n\n\t/**\n\t * Synchronizes the slider UI with the `max` state key.\n\t * @param {number} newVal The new value of the state key.\n\t */\n\tsyncMax(newVal) {\n\t\tif (newVal < this.value) {\n\t\t\tthis.value = newVal;\n\t\t} else {\n\t\t\tthis.updateHandlePosition_();\n\t\t}\n\t}\n\n\t/**\n\t * Synchronizes the slider UI with the `min` state key.\n\t * @param {number} newVal The new value of the state key.\n\t */\n\tsyncMin(newVal) {\n\t\tif (newVal > this.value) {\n\t\t\tthis.value = newVal;\n\t\t} else {\n\t\t\tthis.updateHandlePosition_();\n\t\t}\n\t}\n\n\t/**\n\t * Synchronizes the slider UI with the value attribute.\n\t * @param {number} newVal The new value of the attribute.\n\t */\n\tsyncValue() {\n\t\tthis.updateHandlePosition_();\n\t}\n\n\t/**\n\t * Updates the handle position and active region to reflect the current slider value.\n\t * @protected\n\t */\n\tupdateHandlePosition_() {\n\t\tif (!this.drag_ || !this.drag_.isDragging()) {\n\t\t\tlet positionValue = (100 * (this.value - this.min) / (this.max - this.min)) + '%';\n\t\t\tthis.element.querySelector('.rail-handle').style.left = positionValue;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the slider value based on the UI state of the handle element.\n\t * @param {number} handlePosition Position of the handle in px.\n\t * @param {number} offset Offset to be added to normalize relative inputs.\n\t * @protected\n\t */\n\tupdateValue_(handlePosition, offset) {\n\t\tvar region = Position.getRegion(this.element);\n\t\tthis.value = Math.round(offset + (handlePosition / region.width) * (this.max - this.min));\n\t}\n\n\t/**\n\t * Handles Drag events from the rail handle and updates the slider value accordingly.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\tupdateValueFromDragData_(data) {\n\t\tthis.updateValue_(data.relativeX, this.min);\n\t}\n}\nSoy.register(Slider, templates);\n\n/**\n * `Slider`'s state definition.\n */\nSlider.STATE = {\n\t/**\n\t * Name of the hidden input field that holds the slider value. Useful when slider is embedded\n\t * inside a form so it can automatically send its value.\n\t * @type {string}\n\t */\n\tinputName: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Defines the maximum value handled by the slider.\n\t * @type {number}\n\t * @default 100\n\t */\n\tmax: {\n\t\tvalue: 100\n\t},\n\n\t/**\n\t * Defines the minimum value handled by the slider.\n\t * @type {number}\n\t * @default 0\n\t */\n\tmin: {\n\t\tvalue: 0\n\t},\n\n\t/**\n\t * Defines the currently selected value on the slider.\n\t * @type {number}\n\t * @default 0\n\t */\n\tvalue: {\n\t\tvalidator: function(val) {\n\t\t\treturn core.isNumber(val) && this.min <= val && val <= this.max;\n\t\t},\n\t\tvalue: 0\n\t}\n};\n\nexport default Slider;\n"],"sourceRoot":"/source/"}