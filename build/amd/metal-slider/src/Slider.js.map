{"version":3,"sources":["Slider.js"],"names":["Slider","drag_","axis","constrain","constrainToRail_","bind","container","element","handles","sources","on","handleElementChanged_","attachDragEvents_","Events","DRAG","updateValueFromDragData_","END","region","rail","querySelector","getRegion","left","right","width","dispose","data","newVal","event","hasClass","target","prevValue","value","updateValue_","offsetX","handleRegion","handlePosition","offset","opt_relative","Math","round","max","min","x","preventDefault","register","STATE","inputName","validator","isString","val","isNumber"],"mappings":"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","file":"node_modules/metal-slider/src/Slider.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport Component from 'metal-component';\nimport { Drag } from 'metal-drag-drop';\nimport Position from 'metal-position';\nimport Soy from 'metal-soy';\n\nimport templates from './Slider.soy.js';\n\n/**\n * Slider component.\n */\nclass Slider extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\t/**\n\t\t * Manages dragging the rail handle to update the slider value.\n\t\t * @type {Drag}\n\t\t * @protected\n\t\t */\n\t\tthis.drag_ = new Drag({\n\t\t\taxis: 'x',\n\t\t\tconstrain: this.constrainToRail_.bind(this),\n\t\t\tcontainer: this.element,\n\t\t\thandles: '.handle',\n\t\t\tsources: '.rail-handle'\n\t\t});\n\t\tthis.on('elementChanged', this.handleElementChanged_);\n\n\t\tthis.attachDragEvents_();\n\t}\n\n\t/**\n\t * Attaches the drag events to handle value updates when dragging the rail handle.\n\t * protected\n\t */\n\tattachDragEvents_() {\n\t\tthis.drag_.on(Drag.Events.DRAG, this.updateValueFromDragData_.bind(this));\n\t\tthis.drag_.on(Drag.Events.END, this.updateValueFromDragData_.bind(this));\n\t}\n\n\t/**\n\t * Constrains the given region to be inside the rail. This is being used\n\t * instead of `Drag`'s default behavior, because `Drag` would require the\n\t * whole handle to be inside the rail element, while we just want to make sure\n\t * that the left side of the handle is inside it.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrainToRail_(region) {\n\t\tconst rail = this.element.querySelector('.rail');\n\t\tconst constrain = Position.getRegion(rail, true);\n\t\tif (region.left < constrain.left) {\n\t\t\tregion.left = constrain.left;\n\t\t} else if (region.left > constrain.right) {\n\t\t\tregion.left -= region.left - constrain.right;\n\t\t}\n\t\tregion.right = region.left + region.width;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.drag_.dispose();\n\t}\n\n\t/**\n\t * Returns the `Drag` instance being used.\n\t * @return {!Drag}\n\t */\n\tgetDrag() {\n\t\treturn this.drag_;\n\t}\n\n\t/**\n\t * Handles the `elementChanged` event. Updates the drag container to the new\n\t * element, and also updates the constrain element.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\thandleElementChanged_(data) {\n\t\tif (data.newVal) {\n\t\t\tthis.drag_.container = data.newVal;\n\t\t}\n\t}\n\n\t/**\n\t * Handles mouse down actions on the slider rail and updates the slider value accordingly.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\tonRailClick_(event) {\n\t\tif (dom.hasClass(event.target, 'rail') || dom.hasClass(event.target, 'rail-active')) {\n\t\t\tconst prevValue = this.value;\n\t\t\tthis.updateValue_(event.offsetX, 0, true);\n\t\t\tif (prevValue === this.value) {\n\t\t\t\tconst handleRegion = Position.getRegion(this.element.querySelector('.handle'));\n\t\t\t\tif (event.offsetX < handleRegion.left) {\n\t\t\t\t\tthis.value -= 1;\n\t\t\t\t} else {\n\t\t\t\t\tthis.value += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Synchronizes the slider UI with the `max` state key.\n\t * @param {number} newVal The new value of the state key.\n\t */\n\tsyncMax(newVal) {\n\t\tif (newVal < this.value) {\n\t\t\tthis.value = newVal;\n\t\t}\n\t}\n\n\t/**\n\t * Synchronizes the slider UI with the `min` state key.\n\t * @param {number} newVal The new value of the state key.\n\t */\n\tsyncMin(newVal) {\n\t\tif (newVal > this.value) {\n\t\t\tthis.value = newVal;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the slider value based on the UI state of the handle element.\n\t * @param {number} handlePosition Position of the handle in px.\n\t * @param {number} offset Offset to be added to normalize relative inputs.\n\t * @param {boolean=} opt_relative If the given position is relative to the\n\t *     rail or not.\n\t * @protected\n\t */\n\tupdateValue_(handlePosition, offset, opt_relative) {\n\t\tvar region = Position.getRegion(this.element);\n\t\tif (!opt_relative) {\n\t\t\thandlePosition -= region.left;\n\t\t}\n\t\tthis.value = Math.round(offset + (handlePosition / region.width) * (this.max - this.min));\n\t}\n\n\t/**\n\t * Handles Drag events from the rail handle and updates the slider value accordingly.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\tupdateValueFromDragData_(data, event) {\n\t\tthis.updateValue_(data.x, this.min);\n\t\tevent.preventDefault();\n\t}\n}\nSoy.register(Slider, templates);\n\n/**\n * `Slider`'s state definition.\n */\nSlider.STATE = {\n\t/**\n\t * Name of the hidden input field that holds the slider value. Useful when slider is embedded\n\t * inside a form so it can automatically send its value.\n\t * @type {string}\n\t */\n\tinputName: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Defines the maximum value handled by the slider.\n\t * @type {number}\n\t * @default 100\n\t */\n\tmax: {\n\t\tvalue: 100\n\t},\n\n\t/**\n\t * Defines the minimum value handled by the slider.\n\t * @type {number}\n\t * @default 0\n\t */\n\tmin: {\n\t\tvalue: 0\n\t},\n\n\t/**\n\t * Defines the currently selected value on the slider.\n\t * @type {number}\n\t * @default 0\n\t */\n\tvalue: {\n\t\tvalidator: function(val) {\n\t\t\treturn core.isNumber(val) && this.min <= val && val <= this.max;\n\t\t},\n\t\tvalue: 0\n\t}\n};\n\nexport default Slider;\n"],"sourceRoot":"/source/"}