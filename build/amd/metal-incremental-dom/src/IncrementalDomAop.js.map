{"version":3,"sources":["IncrementalDomAop.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;KAOM;;;;;oBAKE,2CAAiB;AACvB,UAAO,QAAQ,CAAR,CAAP,CADuB;;;AALnB,oBAiBE,+CAAkB,QAAQ,SAAS;AACzC,YAAS,OAAO,IAAP,CAAY,IAAZ,EAAkB,QAAQ,CAAR,EAAW,WAAX,CAA3B,CADyC;AAEzC,aAAU,QAAQ,IAAR,CAAa,IAAb,EAAmB,QAAQ,CAAR,EAAW,YAAX,CAA7B,CAFyC;AAGzC,WAAQ,IAAR,CAAa;AACZ,UAAM,MAAN;AACA,kBAAc,OAAd;AACA,iBAAa,MAAb;AACA,oBAAgB;YAAM,OAAO,KAAP,CAAa,IAAb,EAAmB,aAAnB;KAAN;AAChB,sBAAkB,WAAlB;AACA,iBAAa,qBAAS,GAAT,EAAc;AAC1B,SAAI,OAAO,OAAO,KAAP,CAAa,IAAb,EAAmB,SAAnB,CAAP,CADsB;AAE1B,aAAQ,GAAR,EAF0B;AAG1B,YAAO,IAAP,CAH0B;KAAd;IANd,EAHyC;;;AAjBrC,oBAsCE,+CAAmB;AACzB,OAAI,QAAQ,MAAR,GAAiB,CAAjB,EAAoB;AACvB,YAAQ,GAAR,GADuB;IAAxB;;;SAvCI;;;AA6CN,KAAI,UAAU,CAAC;AACd,QAAM,eAAe,IAAf;AACN,gBAAc,eAAe,YAAf;AACd,eAAa,eAAe,WAAf;AACb,kBAAgB,eAAe,cAAf;AAChB,oBAAkB,eAAe,gBAAf;AAClB,eAAa,eAAe,WAAf;EANA,CAAV;;AASJ,KAAI,gBAAgB,EAAhB;;AAEJ,UAAS,MAAT,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B;AAC5B,gBAAc,IAAd,CAAmB,IAAnB,EAAyB,KAAzB,EAD4B;EAA7B;;AAIA,UAAS,WAAT,CAAqB,GAArB,EAA0B,GAA1B,EAA+B,OAA/B,EAAwC;AACvC,kBAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAhB,CADuC;EAAxC;;AAIA,UAAS,UAAT,CAAoB,IAApB,EAA0B;AACzB,MAAI,KAAK,QAAQ,QAAQ,MAAR,GAAiB,CAAjB,CAAR,CAA4B,IAA5B,CAAL,CADqB;AAEzB,KAAG,KAAH,CAAS,IAAT,EAAe,aAAM,KAAN,CAAY,SAAZ,EAAuB,CAAvB,CAAf,EAFyB;EAA1B;;AAKA,gBAAe,IAAf,GAAsB,WAAW,IAAX,CAAgB,IAAhB,EAAsB,MAAtB,CAAtB;AACA,gBAAe,YAAf,GAA8B,WAAW,IAAX,CAAgB,IAAhB,EAAsB,cAAtB,CAA9B;AACA,gBAAe,WAAf,GAA6B,WAAW,IAAX,CAAgB,IAAhB,EAAsB,aAAtB,CAA7B;AACA,gBAAe,cAAf,GAAgC,WAAW,IAAX,CAAgB,IAAhB,EAAsB,gBAAtB,CAAhC;AACA,gBAAe,gBAAf,GAAkC,WAAW,IAAX,CAAgB,IAAhB,EAAsB,kBAAtB,CAAlC;AACA,gBAAe,WAAf,GAA6B,WAAW,IAAX,CAAgB,IAAhB,EAAsB,aAAtB,CAA7B;;mBAEe","file":"node_modules/metal-incremental-dom/src/IncrementalDomAop.js","sourcesContent":["'use strict';\n\nimport { array } from 'metal';\n\n/**\n * Class responsible for intercepting incremental dom functions through AOP.\n */\nclass IncrementalDomAop {\n\t/**\n\t * Gets the original functions that are intercepted by `IncrementalDomAop`.\n\t * @return {!Object}\n\t */\n\tstatic getOriginalFns() {\n\t\treturn fnStack[0];\n\t}\n\n\t/**\n\t * Starts intercepting calls to the `elementOpen` and `elementClose` functions\n\t * from incremental dom with the given functions.\n\t * @param {!function()} openFn Function to be called instead of the original\n\t *     `elementOpen` one.\n\t * @param {!function()} closeFn Function to be called instead of the original\n\t *     `elementClose` one.\n\t */\n\tstatic startInterception(openFn, closeFn) {\n\t\topenFn = openFn.bind(null, fnStack[0].elementOpen);\n\t\tcloseFn = closeFn.bind(null, fnStack[0].elementClose);\n\t\tfnStack.push({\n\t\t\tattr: fnAttr,\n\t\t\telementClose: closeFn,\n\t\t\telementOpen: openFn,\n\t\t\telementOpenEnd: () => openFn.apply(null, collectedArgs),\n\t\t\telementOpenStart: fnOpenStart,\n\t\t\telementVoid: function(tag) {\n\t\t\t\tvar node = openFn.apply(null, arguments);\n\t\t\t\tcloseFn(tag);\n\t\t\t\treturn node;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Restores the original `elementOpen` function from incremental dom to the\n\t * implementation it used before the last call to `startInterception`.\n\t */\n\tstatic stopInterception() {\n\t\tif (fnStack.length > 1) {\n\t\t\tfnStack.pop();\n\t\t}\n\t}\n}\n\nvar fnStack = [{\n\tattr: IncrementalDOM.attr,\n\telementClose: IncrementalDOM.elementClose,\n\telementOpen: IncrementalDOM.elementOpen,\n\telementOpenEnd: IncrementalDOM.elementOpenEnd,\n\telementOpenStart: IncrementalDOM.elementOpenStart,\n\telementVoid: IncrementalDOM.elementVoid\n}];\n\nvar collectedArgs = [];\n\nfunction fnAttr(name, value) {\n\tcollectedArgs.push(name, value);\n}\n\nfunction fnOpenStart(tag, key, statics) {\n\tcollectedArgs = [tag, key, statics];\n}\n\nfunction handleCall(name) {\n\tvar fn = fnStack[fnStack.length - 1][name];\n\tfn.apply(null, array.slice(arguments, 1));\n}\n\nIncrementalDOM.attr = handleCall.bind(null, 'attr');\nIncrementalDOM.elementClose = handleCall.bind(null, 'elementClose');\nIncrementalDOM.elementOpen = handleCall.bind(null, 'elementOpen');\nIncrementalDOM.elementOpenEnd = handleCall.bind(null, 'elementOpenEnd');\nIncrementalDOM.elementOpenStart = handleCall.bind(null, 'elementOpenStart');\nIncrementalDOM.elementVoid = handleCall.bind(null, 'elementVoid');\n\nexport default IncrementalDomAop;\n"],"sourceRoot":"/source/"}