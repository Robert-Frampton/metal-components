{"version":3,"sources":["IncrementalDomUtils.js"],"names":["IncrementalDomUtils","buildConfigFromCall","args","config","key","attrsArr","concat","slice","i","length","buildCallFromConfig","tag","call","keys","Object","push","isComponentTag","isString","toUpperCase"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;KAOMA,mB;;;;;sBAOEC,mB,gCAAoBC,I,EAAM;AAChC,OAAIC,SAAS,EAAb;AACA,OAAID,KAAK,CAAL,CAAJ,EAAa;AACZC,WAAOC,GAAP,GAAaF,KAAK,CAAL,CAAb;AACA;AACD,OAAIG,WAAW,CAACH,KAAK,CAAL,KAAW,EAAZ,EAAgBI,MAAhB,CAAuBJ,KAAKK,KAAL,CAAW,CAAX,CAAvB,CAAf;AACA,QAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,SAASI,MAA7B,EAAqCD,KAAK,CAA1C,EAA6C;AAC5CL,WAAOE,SAASG,CAAT,CAAP,IAAsBH,SAASG,IAAI,CAAb,CAAtB;AACA;AACD,UAAOL,MAAP;AACA,G;;sBAQMO,mB,gCAAoBC,G,EAAKR,M,EAAQ;AACvC,OAAIS,OAAO,CAACD,GAAD,EAAMR,OAAOC,GAAb,EAAkB,EAAlB,CAAX;AACA,OAAIS,OAAOC,OAAOD,IAAP,CAAYV,MAAZ,CAAX;AACA,QAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIK,KAAKJ,MAAzB,EAAiCD,GAAjC,EAAsC;AACrC,QAAIK,KAAKL,CAAL,MAAY,UAAhB,EAA4B;AAC3BI,UAAKG,IAAL,CAAUF,KAAKL,CAAL,CAAV,EAAmBL,OAAOU,KAAKL,CAAL,CAAP,CAAnB;AACA;AACD;AACD,UAAOI,IAAP;AACA,G;;sBAOMI,c,2BAAeL,G,EAAK;AAC1B,UAAO,CAAC,gBAAKM,QAAL,CAAcN,GAAd,CAAD,IAAuBA,IAAI,CAAJ,MAAWA,IAAI,CAAJ,EAAOO,WAAP,EAAzC;AACA,G;;;;;mBAGalB,mB","file":"node_modules/metal-incremental-dom/src/utils/IncrementalDomUtils.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\n\n/**\n * Utility functions used to handle incremental dom calls.\n */\nclass IncrementalDomUtils {\n\t/**\n\t * Builds the component config object from its incremental dom call's\n\t * arguments.\n\t * @param {!Array} args\n\t * @return {!Object}\n\t */\n\tstatic buildConfigFromCall(args) {\n\t\tvar config = {};\n\t\tif (args[1]) {\n\t\t\tconfig.key = args[1];\n\t\t}\n\t\tvar attrsArr = (args[2] || []).concat(args.slice(3));\n\t\tfor (var i = 0; i < attrsArr.length; i += 2) {\n\t\t\tconfig[attrsArr[i]] = attrsArr[i + 1];\n\t\t}\n\t\treturn config;\n\t}\n\n\t/**\n\t * Builds an incremental dom call array from the given tag and config object.\n\t * @param {string} tag\n\t * @param {!Object} config\n\t * @return {!Array}\n\t */\n\tstatic buildCallFromConfig(tag, config) {\n\t\tvar call = [tag, config.key, []];\n\t\tvar keys = Object.keys(config);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tif (keys[i] !== 'children') {\n\t\t\t\tcall.push(keys[i], config[keys[i]]);\n\t\t\t}\n\t\t}\n\t\treturn call;\n\t}\n\n\t/**\n\t * Checks if the given tag represents a metal component.\n\t * @param {string} tag\n\t * @param {boolean}\n\t */\n\tstatic isComponentTag(tag) {\n\t\treturn !core.isString(tag) || tag[0] === tag[0].toUpperCase();\n\t}\n}\n\nexport default IncrementalDomUtils;\n"],"sourceRoot":"/source/"}