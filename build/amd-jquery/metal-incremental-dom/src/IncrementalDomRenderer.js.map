{"version":3,"sources":["IncrementalDomRenderer.js"],"names":[],"mappings":"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","file":"node_modules/metal-incremental-dom/src/IncrementalDomRenderer.js","sourcesContent":["'use strict';\n\nimport './incremental-dom';\nimport { array, core, object } from 'metal';\nimport dom from 'metal-dom';\nimport { Component, ComponentRenderer, EventsCollector } from 'metal-component';\nimport IncrementalDomAop from './IncrementalDomAop';\nimport IncrementalDomChildren from './children/IncrementalDomChildren';\nimport IncrementalDomUnusedComponents from './cleanup/IncrementalDomUnusedComponents';\nimport IncrementalDomUtils from './utils/IncrementalDomUtils';\n\n/**\n * Class responsible for rendering components via incremental dom.\n */\nclass IncrementalDomRenderer extends ComponentRenderer {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(comp) {\n\t\tsuper(comp);\n\n\t\tcomp.context = {};\n\t\tthis.changes_ = {};\n\t\tthis.eventsCollector_ = new EventsCollector(comp);\n\t\tcomp.on('attached', this.handleAttached_.bind(this));\n\t\tcomp.on('detached', this.handleDetached_.bind(this));\n\n\t\tif (!this.component_.constructor.SYNC_UPDATES_MERGED) {\n\t\t\t// If the component is being updated synchronously we'll just reuse the\n\t\t\t// `handleComponentRendererStateKeyChanged_` function from\n\t\t\t// `ComponentRenderer`.\n\t\t\tcomp.on('stateKeyChanged', this.handleStateKeyChanged_.bind(this));\n\t\t}\n\n\t\t// Binds functions that will be used many times, to avoid creating new\n\t\t// functions each time.\n\t\tthis.handleInterceptedAttributesCall_ =\n\t\t\tthis.handleInterceptedAttributesCall_.bind(this);\n\t\tthis.handleInterceptedOpenCall_ =\n\t\t\tthis.handleInterceptedOpenCall_.bind(this);\n\t\tthis.handleChildrenCaptured_ = this.handleChildrenCaptured_.bind(this);\n\t\tthis.handleChildRender_ = this.handleChildRender_.bind(this);\n\t\tthis.renderInsidePatchDontSkip_ = this.renderInsidePatchDontSkip_.bind(this);\n\t}\n\n\t/**\n\t * Adds all inline listener attributes included in the given config.\n\t * @param {!Array} listeners\n\t * @protected\n\t */\n\taddInlineListeners_(listeners) {\n\t\tfor (var i = 0; i < listeners.length; i += 2) {\n\t\t\tvar name = listeners[i];\n\t\t\tvar fn = listeners[i + 1];\n\t\t\tif (this.isListenerAttr_(name) && core.isString(fn)) {\n\t\t\t\tthis.listenersToAttach_.push({\n\t\t\t\t\teventName: name.substr(7),\n\t\t\t\t\tfn\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Attaches any inline listeners found in the contents built via the last\n\t * incremental dom patch.\n\t * @protected\n\t */\n\tattachInlineListeners_() {\n\t\tthis.eventsCollector_.startCollecting();\n\t\tfor (var i = 0; i < this.listenersToAttach_.length; i++) {\n\t\t\tvar listener = this.listenersToAttach_[i];\n\t\t\tthis.eventsCollector_.attachListener(listener.eventName, listener.fn);\n\t\t}\n\t\tthis.eventsCollector_.detachUnusedListeners();\n\t}\n\n\t/**\n\t * Builds the \"children\" config property to be passed to the current\n\t * component.\n\t * @param {!Array<!Object>} children\n\t * @return {!Array<!Object>}\n\t * @protected\n\t */\n\tbuildChildren_(children) {\n\t\treturn children.length === 0 ? emptyChildren_ : children;\n\t}\n\n\t/**\n\t * Builds the key for the next component that is found.\n\t * @return {string}\n\t */\n\tbuildRef() {\n\t\tvar count = this.generatedRefCount_[this.currentPrefix_] || 0;\n\t\tthis.generatedRefCount_[this.currentPrefix_] = count + 1;\n\t\treturn this.currentPrefix_ + 'sub' + count;\n\t}\n\n\t/**\n\t * Gets the component being currently rendered via `IncrementalDomRenderer`.\n\t * @return {Component}\n\t */\n\tstatic getComponentBeingRendered() {\n\t\treturn renderingComponents_[renderingComponents_.length - 1];\n\t}\n\n\t/**\n\t * Gets the sub component referenced by the given tag and config data,\n\t * creating it if it doesn't yet exist.\n\t * @param {string|!Function} tagOrCtor The tag name.\n\t * @param {!Object} config The config object for the sub component.\n\t * @return {!Component} The sub component.\n\t * @protected\n\t */\n\tgetSubComponent_(tagOrCtor, config) {\n\t\tvar prevComp = this.component_.components[config.ref];\n\t\tvar comp = this.component_.addSubComponent(config.ref, tagOrCtor, config, true);\n\t\tif (prevComp && prevComp !== comp) {\n\t\t\t// If a previous component was replaced, dispose it, but only after making\n\t\t\t// sure that its element won't be removed (otherwise incremental dom may\n\t\t\t// throw an error when trying to remove it later).\n\t\t\tprevComp.element = null;\n\t\t\tprevComp.dispose();\n\t\t}\n\t\tif (comp.wasRendered) {\n\t\t\tcomp.setState(config);\n\t\t}\n\t\treturn comp;\n\t}\n\n\t/**\n\t * Guarantees that the component's element has a parent. That's necessary\n\t * when calling incremental dom's `patchOuter` for now, as otherwise it will\n\t * throw an error if the element needs to be replaced.\n\t * @return {Element} The parent, in case it was added.\n\t * @protected\n\t */\n\tguaranteeParent_() {\n\t\tvar element = this.component_.element;\n\t\tif (!element || !element.parentNode) {\n\t\t\tvar parent = document.createElement('div');\n\t\t\tif (element) {\n\t\t\t\tdom.append(parent, element);\n\t\t\t}\n\t\t\treturn parent;\n\t\t}\n\t}\n\n\t/**\n\t * Removes the most recent component from the queue of rendering components.\n\t */\n\tstatic finishedRenderingComponent() {\n\t\trenderingComponents_.pop();\n\t}\n\n\t/**\n\t * Handles the `attached` listener. Stores attach data.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\thandleAttached_(data) {\n\t\tthis.attachData_ = data;\n\t}\n\n\t/**\n\t * Handles the `detached` listener. Removes all inline listeners.\n\t * @protected\n\t */\n\thandleDetached_() {\n\t\tthis.eventsCollector_.detachAllListeners();\n\t}\n\n\t/**\n\t * Handles an intercepted call to the attributes default handler from\n\t * incremental dom.\n\t * @param {!function()} originalFn The original function before interception.\n\t * @param {!Element} element\n\t * @param {string} name\n\t * @param {*} value\n\t * @protected\n\t */\n\thandleInterceptedAttributesCall_(originalFn, element, name, value) {\n\t\tif (this.isListenerAttr_(name)) {\n\t\t\tvar eventName = name.substr(7);\n\t\t\tif (core.isFunction(element[name])) {\n\t\t\t\telement.removeEventListener(eventName, element[name]);\n\t\t\t}\n\t\t\tif (core.isFunction(value)) {\n\t\t\t\tdom.on(element, eventName, value);\n\t\t\t}\n\t\t}\n\n\t\tif (name === 'checked') {\n\t\t\t// This is a temporary fix to account for incremental dom setting\n\t\t\t// \"checked\" as an attribute only, which can cause bugs since that won't\n\t\t\t// necessarily check/uncheck the element it's set on. See\n\t\t\t// https://github.com/google/incremental-dom/issues/198 for more details.\n\t\t\tvalue = core.isDefAndNotNull(value) && value !== false;\n\t\t}\n\n\t\tif (core.isBoolean(value)) {\n\t\t\t// Incremental dom sets boolean values as string data attributes, which\n\t\t\t// is counter intuitive. This changes the behavior to use the actual\n\t\t\t// boolean value.\n\t\t\telement[name] = value;\n\t\t\tif (value) {\n\t\t\t\telement.setAttribute(name, '');\n\t\t\t} else {\n\t\t\t\telement.removeAttribute(name);\n\t\t\t}\n\t\t} else {\n\t\t\toriginalFn(element, name, value);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the event of children having finished being captured.\n\t * @param {!Object} The captured children in tree format.\n\t * @protected\n\t */\n\thandleChildrenCaptured_(tree) {\n\t\tvar {config, tag} = this.componentToRender_;\n\t\tconfig.children = this.buildChildren_(tree.config.children);\n\t\tthis.componentToRender_ = null;\n\t\tthis.currentPrefix_ = this.prevPrefix_;\n\t\tthis.prevPrefix_ = null;\n\t\tthis.renderFromTag_(tag, config);\n\t}\n\n\t/**\n\t * Handles a child being rendered via `IncrementalDomChildren.render`. Skips\n\t * component nodes so that they can be rendered the correct way without\n\t * having to recapture both them and their children via incremental dom.\n\t * @param {!Object} node\n\t * @return {boolean}\n\t * @protected\n\t */\n\thandleChildRender_(node) {\n\t\tif (node.tag && IncrementalDomUtils.isComponentTag(node.tag)) {\n\t\t\tnode.config.children = this.buildChildren_(node.config.children);\n\t\t\tthis.renderFromTag_(node.tag, node.config);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Handles the `stateKeyChanged` event. Overrides original method from\n\t * `ComponentRenderer` to guarantee that `IncrementalDomRenderer`'s logic\n\t * will run first.\n\t * @param {!Object} data\n\t * @override\n\t * @protected\n\t */\n\thandleComponentRendererStateKeyChanged_(data) {\n\t\tthis.handleStateKeyChanged_(data);\n\t\tsuper.handleComponentRendererStateKeyChanged_(data);\n\t}\n\n\t/**\n\t * Handles an intercepted call to the `elementOpen` function from incremental\n\t * dom.\n\t * @param {!function()} originalFn The original function before interception.\n\t * @param {string} tag\n\t * @protected\n\t */\n\thandleInterceptedOpenCall_(originalFn, tag) {\n\t\tif (IncrementalDomUtils.isComponentTag(tag)) {\n\t\t\treturn this.handleSubComponentCall_.apply(this, arguments);\n\t\t} else {\n\t\t\treturn this.handleRegularCall_.apply(this, arguments);\n\t\t}\n\t}\n\n\t/**\n\t * Handles an intercepted call to the `elementOpen` function from incremental\n\t * dom, done for a regular element. Adds any inline listeners found and makes\n\t * sure that component root elements are always reused.\n\t * @param {!function()} originalFn The original function before interception.\n\t * @param {string} tag\n\t * @param {?string} key\n\t * @param {?Array} statics\n\t * @protected\n\t */\n\thandleRegularCall_(originalFn, tag, key, statics) {\n\t\tvar attrsArr = array.slice(arguments, 4);\n\t\tthis.addInlineListeners_((statics || []).concat(attrsArr));\n\t\tvar args = array.slice(arguments, 1);\n\n\t\tvar currComp = IncrementalDomRenderer.getComponentBeingRendered();\n\t\tvar currRenderer = currComp.getRenderer();\n\t\tif (!currRenderer.rootElementReached_ && currComp.config.key) {\n\t\t\targs[1] = currComp.config.key;\n\t\t}\n\n\t\tvar node = originalFn.apply(null, args);\n\t\tthis.updateElementIfNotReached_(node);\n\t\treturn node;\n\t}\n\n\t/**\n\t * Handles the `stateKeyChanged` event. Stores state properties that have\n\t * changed since the last render.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\thandleStateKeyChanged_(data) {\n\t\tthis.changes_[data.key] = data;\n\t}\n\n\t/**\n\t * Handles an intercepted call to the `elementOpen` function from incremental\n\t * dom, done for a sub component element. Creates and updates the appropriate\n\t * sub component.\n\t * @param {!function()} originalFn The original function before interception.\n\t * @protected\n\t */\n\thandleSubComponentCall_(originalFn, ...args) {\n\t\tvar config = IncrementalDomUtils.buildConfigFromCall(args);\n\t\tconfig.ref = config.ref || this.buildRef();\n\t\tthis.componentToRender_ = {\n\t\t\tconfig,\n\t\t\ttag: args[0]\n\t\t};\n\n\t\tthis.prevPrefix_ = this.currentPrefix_;\n\t\tthis.currentPrefix_ = config.ref;\n\t\tthis.generatedRefCount_[this.currentPrefix_] = 0;\n\t\tIncrementalDomChildren.capture(this, this.handleChildrenCaptured_);\n\t}\n\n\t/**\n\t * Checks if any other state property besides \"element\" has changed since the\n\t * last render.\n\t * @protected\n\t */\n\thasChangedBesidesElement_() {\n\t\tvar count = Object.keys(this.changes_).length;\n\t\tif (this.changes_.hasOwnProperty('element')) {\n\t\t\tcount--;\n\t\t}\n\t\treturn count > 0;\n\t}\n\n\t/**\n\t * Intercepts incremental dom calls from this component.\n\t * @protected\n\t */\n\tintercept_() {\n\t\tIncrementalDomAop.startInterception({\n\t\t\tattributes: this.handleInterceptedAttributesCall_,\n\t\t\telementOpen: this.handleInterceptedOpenCall_\n\t\t});\n\t}\n\n\t/**\n\t * Checks if the given object is an incremental dom node.\n\t * @param {!Object} node\n\t * @return {boolean}\n\t */\n\tstatic isIncDomNode(node) {\n\t\treturn !!node[IncrementalDomChildren.CHILD_OWNER];\n\t}\n\n\t/**\n\t * Checks if the given attribute name is for a dom event listener.\n\t * @param {string} attr\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisListenerAttr_(attr) {\n\t\treturn attr.substr(0, 7) === 'data-on';\n\t}\n\n\t/**\n\t * Gets the component that is this component's parent (that is, the one that\n\t * actually rendered it), or null if there's no parent.\n\t * @return {Component}\n\t */\n\tgetParent() {\n\t\treturn this.parent_;\n\t}\n\n\t/**\n\t * Gets the component that is this component's owner (that is, the one that\n\t * passed its config properties and holds its ref), or null if there's none.\n\t * @return {Component}\n\t */\n\tgetOwner() {\n\t\treturn this.owner_;\n\t}\n\n\t/**\n\t * Creates and renders the given function, which can either be a simple\n\t * incremental dom function or a component constructor.\n\t * @param {!function()} fnOrCtor Either be a simple incremental dom function\n\t or a component constructor.\n\t * @param {Object=} opt_data Optional config data for the function.\n\t * @param {Element=} opt_element Optional parent for the rendered content.\n\t * @return {!Component} The rendered component's instance.\n\t */\n\tstatic render(fnOrCtor, opt_data, opt_parent) {\n\t\tif (!Component.isComponentCtor(fnOrCtor)) {\n\t\t\tvar fn = fnOrCtor;\n\t\t\tclass TempComponent extends Component {\n\t\t\t\trender() {\n\t\t\t\t\tfn(this.config);\n\t\t\t\t}\n\t\t\t}\n\t\t\tTempComponent.RENDERER = IncrementalDomRenderer;\n\t\t\tfnOrCtor = TempComponent;\n\t\t}\n\t\treturn Component.render(fnOrCtor, opt_data, opt_parent);\n\t}\n\n\t/**\n\t * Renders the renderer's component for the first time, patching its element\n\t * through the incremental dom function calls done by `renderIncDom`.\n\t */\n\trender() {\n\t\tthis.patch();\n\t}\n\n\t/**\n\t * Renders the given child node via its owner renderer.\n\t * @param {!Object} child\n\t */\n\tstatic renderChild(child) {\n\t\tchild[IncrementalDomChildren.CHILD_OWNER].renderChild(child);\n\t}\n\n\t/**\n\t * Renders the given child node.\n\t * @param {!Object} child\n\t */\n\trenderChild(child) {\n\t\tthis.intercept_();\n\t\tIncrementalDomChildren.render(child, this.handleChildRender_);\n\t\tIncrementalDomAop.stopInterception();\n\t}\n\n\t/**\n\t * Renders the contents for the given tag.\n\t * @param {!function()|string} tag\n\t * @param {!Object} config\n\t * @protected\n\t */\n\trenderFromTag_(tag, config) {\n\t\tif (core.isString(tag) || tag.prototype.getRenderer) {\n\t\t\tvar comp = this.renderSubComponent_(tag, config);\n\t\t\tthis.updateElementIfNotReached_(comp.element);\n\t\t\treturn comp.element;\n\t\t} else {\n\t\t\treturn tag(config);\n\t\t}\n\t}\n\n\t/**\n\t * Calls functions from `IncrementalDOM` to build the component element's\n\t * content. Can be overriden by subclasses (for integration with template\n\t * engines for example).\n\t */\n\trenderIncDom() {\n\t\tif (this.component_.render) {\n\t\t\tthis.component_.render();\n\t\t} else {\n\t\t\tIncrementalDOM.elementVoid('div');\n\t\t}\n\t}\n\n\t/**\n\t * Runs the incremental dom functions for rendering this component, but\n\t * doesn't call `patch` yet. Rather, this will be the function that should be\n\t * called by `patch`.\n\t */\n\trenderInsidePatch() {\n\t\tif (this.component_.wasRendered &&\n\t\t\t!this.shouldUpdate(this.changes_) &&\n\t\t\tIncrementalDOM.currentPointer() === this.component_.element) {\n\t\t\tif (this.component_.element) {\n\t\t\t\tIncrementalDOM.skipNode();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis.renderInsidePatchDontSkip_();\n\t}\n\n\t/**\n\t * The same as `renderInsidePatch`, but without the check that may skip the\n\t * render action.\n\t * @protected\n\t */\n\trenderInsidePatchDontSkip_() {\n\t\tIncrementalDomRenderer.startedRenderingComponent(this.component_);\n\t\tthis.changes_ = {};\n\t\tthis.rootElementReached_ = false;\n\t\tIncrementalDomUnusedComponents.schedule(this.childComponents_ || []);\n\t\tthis.childComponents_ = [];\n\t\tthis.generatedRefCount_ = {};\n\t\tthis.listenersToAttach_ = [];\n\t\tthis.currentPrefix_ = '';\n\t\tthis.intercept_();\n\t\tthis.renderIncDom();\n\t\tIncrementalDomAop.stopInterception();\n\t\tthis.attachInlineListeners_();\n\t\tIncrementalDomRenderer.finishedRenderingComponent();\n\t\tif (!this.rootElementReached_) {\n\t\t\tthis.component_.element = null;\n\t\t} else {\n\t\t\tthis.component_.addElementClasses();\n\t\t}\n\t\tthis.emit('rendered', !this.component_.wasRendered);\n\t}\n\n\t/**\n\t * This updates the sub component that is represented by the given data.\n\t * The sub component is created, added to its parent and rendered. If it\n\t * had already been rendered before though, it will only have its state\n\t * updated instead.\n\t * @param {string|!function()} tagOrCtor The tag name or constructor function.\n\t * @param {!Object} config The config object for the sub component.\n\t * @return {!Component} The updated sub component.\n\t * @protected\n\t */\n\trenderSubComponent_(tagOrCtor, config) {\n\t\tvar comp = this.getSubComponent_(tagOrCtor, config);\n\t\tthis.updateContext_(comp);\n\t\tvar renderer = comp.getRenderer();\n\t\tif (renderer instanceof IncrementalDomRenderer) {\n\t\t\tvar parentComp = IncrementalDomRenderer.getComponentBeingRendered();\n\t\t\tparentComp.getRenderer().childComponents_.push(comp);\n\t\t\trenderer.parent_ = parentComp;\n\t\t\trenderer.owner_ = this.component_;\n\t\t\trenderer.renderInsidePatch();\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t'IncrementalDomRenderer doesn\\'t support rendering sub components ' +\n\t\t\t\t'that don\\'t use IncrementalDomRenderer as well, like:',\n\t\t\t\tcomp\n\t\t\t);\n\t\t}\n\t\tif (!comp.wasRendered) {\n\t\t\tcomp.renderAsSubComponent();\n\t\t}\n\t\treturn comp;\n\t}\n\n\t/**\n\t * Checks if the component should be updated with the current state changes.\n\t * Can be overridden by subclasses or implemented by components to provide\n\t * customized behavior (only updating when a state property used by the\n\t * template changes, for example).\n\t * @param {!Object} changes\n\t * @return {boolean}\n\t */\n\tshouldUpdate(changes) {\n\t\tif (this.component_.shouldUpdate) {\n\t\t\treturn this.component_.shouldUpdate(changes);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Stores the component that has just started being rendered.\n\t * @param {!Component} comp\n\t */\n\tstatic startedRenderingComponent(comp) {\n\t\trenderingComponents_.push(comp);\n\t}\n\n\t/**\n\t * Patches the component's element with the incremental dom function calls\n\t * done by `renderIncDom`.\n\t */\n\tpatch() {\n\t\tif (!this.component_.element && this.parent_) {\n\t\t\t// If the component has no content but was rendered from another component,\n\t\t\t// we'll need to patch this parent to make sure that any new content will\n\t\t\t// be added in the right place.\n\t\t\tthis.parent_.getRenderer().patch();\n\t\t\treturn;\n\t\t}\n\n\t\tvar tempParent = this.guaranteeParent_();\n\t\tif (tempParent) {\n\t\t\tIncrementalDOM.patch(tempParent, this.renderInsidePatchDontSkip_);\n\t\t\tdom.exitDocument(this.component_.element);\n\t\t\tif (this.component_.element && this.component_.inDocument) {\n\t\t\t\tthis.component_.renderElement_(\n\t\t\t\t\tthis.attachData_.parent,\n\t\t\t\t\tthis.attachData_.sibling\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tvar element = this.component_.element;\n\t\t\tIncrementalDOM.patchOuter(element, this.renderInsidePatchDontSkip_);\n\t\t\tif (!this.component_.element) {\n\t\t\t\tdom.exitDocument(element);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates the renderer's component when state changes, patching its element\n\t * through the incremental dom function calls done by `renderIncDom`. Makes\n\t * sure that it won't cause a rerender if the only change was for the\n\t * \"element\" property.\n\t */\n\tupdate() {\n\t\tif (this.hasChangedBesidesElement_() && this.shouldUpdate(this.changes_)) {\n\t\t\tthis.patch();\n\t\t}\n\t}\n\n\t/**\n\t * Updates this renderer's component's element with the given values, unless\n\t * it has already been reached by an earlier call.\n\t * @param {!Element} node\n\t * @protected\n\t */\n\tupdateElementIfNotReached_(node) {\n\t\tvar currComp = IncrementalDomRenderer.getComponentBeingRendered();\n\t\tvar currRenderer = currComp.getRenderer();\n\t\tif (!currRenderer.rootElementReached_) {\n\t\t\tcurrRenderer.rootElementReached_ = true;\n\t\t\tif (currComp.element !== node) {\n\t\t\t\tcurrComp.element = node;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates the given component's context according to the data from the\n\t * component that is currently being rendered.\n\t * @param {!Component} comp\n\t * @protected\n\t */\n\tupdateContext_(comp) {\n\t\tvar context = comp.context;\n\t\tvar parent = IncrementalDomRenderer.getComponentBeingRendered();\n\t\tvar childContext = parent.getChildContext ? parent.getChildContext() : {};\n\t\tobject.mixin(context, parent.context, childContext);\n\t\tcomp.context = context;\n\t}\n}\n\nvar renderingComponents_ = [];\nvar emptyChildren_ = [];\n\nexport default IncrementalDomRenderer;\n"],"sourceRoot":"/source/"}