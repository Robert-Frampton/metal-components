{"version":3,"sources":["Treeview.js"],"names":["Treeview","path","obj","nodes","i","length","children","event","toggleExpandedState_","delegateTarget","parentNode","keyCode","node","getAttribute","split","nodeObj","getNodeObj","expanded","register","STATE","validator","Array","isArray","valueFn"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KASMA,Q;;;;;;;;;;;8BAQMC,I,EAAM;AAChB,QAAIC,MAAM,KAAKC,KAAL,CAAWF,KAAK,CAAL,CAAX,CAAV;AACA,SAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIH,KAAKI,MAAzB,EAAiCD,GAAjC,EAAsC;AACrCF,WAAMA,IAAII,QAAJ,CAAaL,KAAKG,CAAL,CAAb,CAAN;AACA;AACD,WAAOF,GAAP;AACA;;;sCAOkBK,K,EAAO;AACzB,SAAKC,oBAAL,CAA0BD,MAAME,cAAN,CAAqBC,UAArB,CAAgCA,UAA1D;AACA;;;oCAQgBH,K,EAAO;AACvB,QAAIA,MAAMI,OAAN,KAAkB,EAAlB,IAAwBJ,MAAMI,OAAN,KAAkB,EAA9C,EAAkD;AACjD,UAAKH,oBAAL,CAA0BD,MAAME,cAAN,CAAqBC,UAArB,CAAgCA,UAA1D;AACA;AACD;;;wCAOoBE,I,EAAM;AAC1B,QAAIX,OAAOW,KAAKC,YAAL,CAAkB,oBAAlB,EAAwCC,KAAxC,CAA8C,GAA9C,CAAX;AACA,QAAIC,UAAU,KAAKC,UAAL,CAAgBf,IAAhB,CAAd;AACAc,YAAQE,QAAR,GAAmB,CAACF,QAAQE,QAA5B;AACA,SAAKd,KAAL,GAAa,KAAKA,KAAlB;AACA;;;;;;AAEF,eAAIe,QAAJ,CAAalB,QAAb;;AAEA;;;;;AAKAA,UAASmB,KAAT,GAAiB;AAChB;;;;;;;AAOAhB,SAAO;AACNiB,cAAWC,MAAMC,OADX;AAENC,YAAS,mBAAW;AACnB,WAAO,EAAP;AACA;AAJK;AARS,EAAjB;;mBAgBevB,Q;AACoD,yBAAckB,QAAd,CAAuB,UAAvB,EAAmClB,QAAnC","file":"node_modules/metal-treeview/src/Treeview.js","sourcesContent":["'use strict';\n\nimport templates from './Treeview.soy.js';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\n\n/**\n * Treeview component.\n */\nclass Treeview extends Component {\n\t/**\n\t * Gets the node object from the `nodes` state that is located at the given\n\t * index path.\n\t * @param {!Array<number>} path An array of indexes indicating where the searched\n\t *   node is located inside the `nodes` state.\n\t * @return {!Object}\n\t */\n\tgetNodeObj(path) {\n\t\tvar obj = this.nodes[path[0]];\n\t\tfor (var i = 1; i < path.length; i++) {\n\t\t\tobj = obj.children[path[i]];\n\t\t}\n\t\treturn obj;\n\t}\n\n\t/**\n\t * This is called when one of this tree view's nodes is clicked.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleNodeClicked_(event) {\n\t\tthis.toggleExpandedState_(event.delegateTarget.parentNode.parentNode);\n\t}\n\n\t/**\n\t * This is called when one of this tree view's nodes receives a keypress.\n\t * If the pressed key is ENTER or SPACE, the node's expanded state will be toggled.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleNodeKeyUp_(event) {\n\t\tif (event.keyCode === 13 || event.keyCode === 32) {\n\t\t\tthis.toggleExpandedState_(event.delegateTarget.parentNode.parentNode);\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the expanded state for the given tree node.\n\t * @param {!Element} node\n\t * @protected\n\t */\n\ttoggleExpandedState_(node) {\n\t\tvar path = node.getAttribute('data-treeview-path').split('-');\n\t\tvar nodeObj = this.getNodeObj(path);\n\t\tnodeObj.expanded = !nodeObj.expanded;\n\t\tthis.nodes = this.nodes;\n\t}\n}\nSoy.register(Treeview, templates);\n\n/**\n * Treeview state definition.\n * @type {!Object}\n * @static\n */\nTreeview.STATE = {\n\t/**\n\t * This tree view's nodes. Each node should have a name, and can optionally\n\t * have nested children nodes. It should also indicate if its children are\n\t * expanded or not.\n\t * @type {Array<!{children: Array, expanded: boolean?, name: string}>}\n\t * @default []\n\t */\n\tnodes: {\n\t\tvalidator: Array.isArray,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t}\n};\n\nexport default Treeview;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('treeview', Treeview);"],"sourceRoot":"/source/"}