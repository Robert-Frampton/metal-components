{"version":3,"sources":["ButtonGroup.js"],"names":["ButtonGroup","handleClick_","event","button","delegateTarget","index","getAttribute","selectedIndex","selected","indexOf","buttons","label","push","length","minSelected","splice","setterSelectedFn_","Math","min","i","register","STATE","validator","val","Array","valueFn","isNumber","value","writeOnce","setter","isArray","SELECTED_CLASS"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAWMA,W;;;;;;;;;wBAOLC,Y,yBAAaC,K,EAAO;AACnB,OAAIC,SAASD,MAAME,cAAnB;AACA,OAAIC,QAAQF,OAAOG,YAAP,CAAoB,YAApB,CAAZ;AACA,OAAIC,gBAAgB,KAAKC,QAAL,CAAcC,OAAd,CAAsB,KAAKC,OAAL,CAAaL,KAAb,EAAoBM,KAA1C,CAApB;AACA,OAAIJ,kBAAkB,CAAC,CAAvB,EAA0B;AACzB,SAAKC,QAAL,CAAcI,IAAd,CAAmB,KAAKF,OAAL,CAAaL,KAAb,EAAoBM,KAAvC;AACA,SAAKH,QAAL,GAAgB,KAAKA,QAArB;AACA,IAHD,MAGO,IAAI,KAAKA,QAAL,CAAcK,MAAd,GAAuB,KAAKC,WAAhC,EAA6C;AACnD,SAAKN,QAAL,CAAcO,MAAd,CAAqBR,aAArB,EAAoC,CAApC;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAArB;AACA;AACD,G;;wBAUDQ,iB,8BAAkBR,Q,EAAU;AAC3B,OAAIM,cAAcG,KAAKC,GAAL,CAAS,KAAKJ,WAAd,EAA2B,KAAKJ,OAAL,CAAaG,MAAxC,CAAlB;AACA,OAAIM,IAAI,CAAR;AACA,UAAOX,SAASK,MAAT,GAAkBC,WAAzB,EAAsC;AACrC,QAAIN,SAASC,OAAT,CAAiB,KAAKC,OAAL,CAAaS,CAAb,EAAgBR,KAAjC,MAA4C,CAAC,CAAjD,EAAoD;AACnDH,cAASI,IAAT,CAAc,KAAKF,OAAL,CAAaS,CAAb,EAAgBR,KAA9B;AACA;AACDQ;AACA;AACD,UAAOX,QAAP;AACA,G;;;;;AAEF,eAAIY,QAAJ,CAAapB,WAAb;;AAEA;;;;;AAKAA,aAAYqB,KAAZ,GAAoB;AACnB;;;;;;;AAOAX,WAAS;AACRY,cAAW;AAAA,WAAOC,eAAeC,KAAtB;AAAA,IADH;AAERC,YAAS,mBAAW;AACnB,WAAO,EAAP;AACA;AAJO,GARU;;AAenB;;;;;;;AAOAX,eAAa;AACZQ,cAAW,gBAAKI,QADJ;AAEZC,UAAO,CAFK;AAGZC,cAAW;AAHC,GAtBM;;AA4BnB;;;;AAIApB,YAAU;AACTqB,WAAQ,mBADC;AAETP,cAAWE,MAAMM,OAFR;AAGTL,YAAS,mBAAW;AACnB,WAAO,EAAP;AACA;AALQ;AAhCS,EAApB;;AAyCA;;;;;AAKAzB,aAAY+B,cAAZ,GAA6B,oBAA7B;;mBAEe/B,W;AACoD,yBAAcoB,QAAd,CAAuB,aAAvB,EAAsCpB,WAAtC","file":"node_modules/metal-button-group/src/ButtonGroup.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\n\nimport templates from './ButtonGroup.soy.js';\n\n/**\n * Responsible for handling groups of buttons.\n */\nclass ButtonGroup extends Component {\n\t/**\n\t * Handles a `click` event fired on one of the buttons. Appropriately selects\n\t * or deselects the clicked button.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleClick_(event) {\n\t\tvar button = event.delegateTarget;\n\t\tvar index = button.getAttribute('data-index');\n\t\tvar selectedIndex = this.selected.indexOf(this.buttons[index].label);\n\t\tif (selectedIndex === -1) {\n\t\t\tthis.selected.push(this.buttons[index].label);\n\t\t\tthis.selected = this.selected;\n\t\t} else if (this.selected.length > this.minSelected) {\n\t\t\tthis.selected.splice(selectedIndex, 1);\n\t\t\tthis.selected = this.selected;\n\t\t}\n\t}\n\n\t/**\n\t * Setter function for the `selected` state. Checks if the minimum number\n\t * of buttons is selected. If not, the remaining number of buttons needed to\n\t * reach the minimum will be selected.\n\t * @param {!Object<number, boolean>|!Array<string>} selected\n\t * @return {!Object<number, boolean>}\n\t * @protected\n\t */\n\tsetterSelectedFn_(selected) {\n\t\tvar minSelected = Math.min(this.minSelected, this.buttons.length);\n\t\tvar i = 0;\n\t\twhile (selected.length < minSelected) {\n\t\t\tif (selected.indexOf(this.buttons[i].label) === -1) {\n\t\t\t\tselected.push(this.buttons[i].label);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn selected;\n\t}\n}\nSoy.register(ButtonGroup, templates);\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nButtonGroup.STATE = {\n\t/**\n\t * Configuration for the buttons that should be rendered in this group.\n\t * Each button config should be given as an object. Supported options are:\n\t * label, type and cssClass.\n\t * @type {!Array<!Object>}\n\t * @default []\n\t */\n\tbuttons: {\n\t\tvalidator: val => val instanceof Array,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t},\n\n\t/**\n\t * The minimum number of buttons that need to be selected at a time. If the\n\t * minimum number of buttons is not already initially selected, this will\n\t * automaticaly select the first `minSelected` buttons.\n\t * @type {number}\n\t * @default 0\n\t */\n\tminSelected: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 0,\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * An array with the labels of the buttons that should be selected.\n\t * @type {!Array<string>}\n\t */\n\tselected: {\n\t\tsetter: 'setterSelectedFn_',\n\t\tvalidator: Array.isArray,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t}\n};\n\n/**\n * The CSS class added to selected buttons.\n * @type {string}\n * @static\n */\nButtonGroup.SELECTED_CLASS = 'btn-group-selected';\n\nexport default ButtonGroup;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('buttonGroup', ButtonGroup);"],"sourceRoot":"/source/"}