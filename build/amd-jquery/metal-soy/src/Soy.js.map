{"version":3,"sources":["Soy.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,KAAI,SAAS,EAAT;;KAEE;;;;;;;;;gBAML,qDAAqB,MAAM;AAC1B,OAAI,KAAK,sBAAL,EAA6B;AAChC,WADgC;IAAjC;;AAIA,QAAK,sBAAL,GAA8B,IAA9B,CAL0B;AAM1B,OAAI,YAAY,KAAK,UAAL,CANU;AAO1B,QAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,EAAa,GAAjC,EAAsC;AACrC,QAAI,CAAC,UAAU,iBAAV,CAA4B,KAAK,CAAL,CAA5B,CAAD,EAAuC;AAC1C,eAAU,UAAV,CAAqB,KAAK,CAAL,CAArB,EAA8B,EAA9B,EAAkC,UAAU,gBAAV,GAA6B,KAAK,CAAL,CAA7B,CAAlC,EAD0C;KAA3C;IADD;;;AAbI,gBA4BL,mDAAqB;AACpB,OAAI,YAAY,KAAK,UAAL,CADI;AAEpB,OAAI,OAAO,EAAP,CAFgB;AAGpB,aAAU,YAAV,GAAyB,OAAzB,CAAiC,eAAO;;;AAGvC,QAAI,QAAQ,SAAR,EAAmB;AACtB,YADsB;KAAvB;;AAIA,QAAI,QAAQ,UAAU,GAAV,CAAR,CAPmC;AAQvC,QAAI,UAAU,iBAAV,CAA4B,GAA5B,EAAiC,MAAjC,IAA2C,gBAAK,QAAL,CAAc,KAAd,CAA3C,EAAiE;AACpE,aAAQ,IAAI,QAAJ,CAAa,KAAb,CAAR,CADoE;KAArE;AAGA,SAAK,GAAL,IAAY,KAAZ,CAXuC;IAAP,CAAjC,CAHoB;AAgBpB,UAAO,IAAP,CAhBoB;;;AA5BhB,MAwDE,yDAAuB,YAAY,UAAU;AACnD,OAAI,OAAO,WAAW,aAAX,CADwC;AAEnD,OAAI,OAAO,QAAP,CAF+C;AAGnD,kBAAe,WAAf,CAA2B,WAA3B,EAAwC,IAAxC,EAA8C,EAA9C,EAAkD,MAAlD,EAA0D,IAA1D,EAAgE,MAAhE,EAAwE,IAAxE,EAHmD;;;AAxD/C,MAmEE,6BAAS,OAAO;AACtB,UAAO,qBAAY,OAAZ,CAAoB,KAApB,CAAP,CADsB;;;AAnElB,gBA6EL,qCAAa,SAAS;AACrB,OAAI,KAAK,KAAK,UAAL,CAAgB,WAAhB,CAA4B,QAA5B,CADY;AAErB,OAAI,SAAS,KAAK,iBAAO,aAAP,CAAqB,EAArB,EAAyB,MAAzB,GAAkC,EAAvC,CAFQ;AAGrB,QAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,OAAO,MAAP,EAAe,GAAnC,EAAwC;AACvC,QAAI,QAAQ,OAAO,CAAP,CAAR,CAAJ,EAAwB;AACvB,YAAO,IAAP,CADuB;KAAxB;IADD;AAKA,UAAO,KAAP,CARqB;;;AA7EjB,MAiGE,6BAAS,eAAe,WAAoC;OAAzB,qEAAe,wBAAU;;AAClE,iBAAc,QAAd,GAAyB,GAAzB,CADkE;AAElE,iBAAc,QAAd,GAAyB,iBAAO,aAAP,CAAqB,UAAU,YAAV,CAArB,CAAzB,CAFkE;AAGlE,iBAAc,QAAd,CAAuB,aAAvB,GAAuC,aAAvC,CAHkE;AAIlE,oBAAO,uBAAP,CAA+B,SAA/B,EAA0C,YAA1C,EAJkE;;;AAjG9D,gBA6GL,uCAAe;AACd,OAAI,kBAAkB,KAAK,UAAL,CAAgB,WAAhB,CAA4B,QAA5B,CADR;AAEd,OAAI,gBAAK,UAAL,CAAgB,eAAhB,CAAJ,EAAsC;AACrC,sBAAkB,iBAAO,aAAP,CAAqB,eAArB,CAAlB,CADqC;AAErC,SAAK,oBAAL,CAA0B,gBAAgB,MAAhB,CAA1B,CAFqC;;AAIrC,qBAAO,iBAAP,CAAyB,IAAI,sBAAJ,CAAzB,CAJqC;AAKrC,oBAAgB,KAAK,kBAAL,EAAhB,EAA2C,IAA3C,EAAiD,MAAjD,EALqC;AAMrC,qBAAO,gBAAP,GANqC;IAAtC,MAOO;AACN,oCAAM,YAAN,YADM;IAPP;;;AA/GI,MA+HE,2CAAgB,MAAM;AAC5B,YAAS,QAAQ,EAAR,CADmB;;;SA/HxB;;;;mBAoIS;SACN;SAAK","file":"node_modules/metal-soy/src/Soy.js","sourcesContent":["'use strict';\n\nimport 'metal-soy-bundle';\nimport './requireWarning';\n\nimport core from 'metal';\nimport HTML2IncDom from 'html2incdom';\nimport IncrementalDomRenderer from 'metal-incremental-dom';\nimport SoyAop from './SoyAop';\n\n// The injected data that will be passed to soy templates.\nvar ijData = {};\n\nclass Soy extends IncrementalDomRenderer {\n\t/**\n\t * Adds the specified state keys to the component, if they don't exist yet.\n\t * @param {Array<string>} keys\n\t * @protected\n\t */\n\taddMissingStateKeys_(keys) {\n\t\tif (this.addedMissingStateKeys_) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.addedMissingStateKeys_ = true;\n\t\tvar component = this.component_;\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tif (!component.getStateKeyConfig(keys[i])) {\n\t\t\t\tcomponent.addToState(keys[i], {}, component.getInitialConfig()[keys[i]]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Copies the component's state to an object so it can be passed as it's\n\t * template call's data. The copying needs to be done because, if the component\n\t * itself is passed directly, some problems occur when soy tries to merge it\n\t * with other data, due to property getters and setters. This is safer.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildTemplateData_() {\n\t\tvar component = this.component_;\n\t\tvar data = {};\n\t\tcomponent.getStateKeys().forEach(key => {\n\t\t\t// Get all state values except \"element\", since it helps performance\n\t\t\t// and the element shouldn't be referenced inside a soy template anyway.\n\t\t\tif (key === 'element') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar value = component[key];\n\t\t\tif (component.getStateKeyConfig(key).isHtml && core.isString(value)) {\n\t\t\t\tvalue = Soy.toIncDom(value);\n\t\t\t}\n\t\t\tdata[key] = value;\n\t\t});\n\t\treturn data;\n\t}\n\n\t/**\n\t * Handles an intercepted soy template call. If the call is for a component's\n\t * main template, then it will be replaced with a call that incremental dom\n\t * can use for both handling an instance of that component and rendering it.\n\t * @param {!function()} originalFn The original template function that was\n\t *     intercepted.\n\t * @param {Object} data The data the template was called with.\n\t * @protected\n\t */\n\tstatic handleInterceptedCall_(originalFn, opt_data) {\n\t\tvar ctor = originalFn.componentCtor;\n\t\tvar data = opt_data;\n\t\tIncrementalDOM.elementVoid('Component', null, [], 'ctor', ctor, 'data', data);\n\t}\n\n\t/**\n\t * Converts the given html string into an incremental dom function.\n\t * @param {string} value\n\t * @return {!function()}\n\t */\n\tstatic toIncDom(value) {\n\t\treturn HTML2IncDom.buildFn(value);\n\t}\n\n\t/**\n\t * Overrides the original `IncrementalDomRenderer` method so that only\n\t * state keys used by the main template can cause updates.\n\t * @param {!Object} changes\n\t * @return {boolean}\n\t */\n\tshouldUpdate(changes) {\n\t\tvar fn = this.component_.constructor.TEMPLATE;\n\t\tvar params = fn ? SoyAop.getOriginalFn(fn).params : [];\n\t\tfor (var i = 0; i < params.length; i++) {\n\t\t\tif (changes[params[i]]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Registers the given templates to be used by `Soy` for the specified\n\t * component constructor.\n\t * @param {!Function} componentCtor The constructor of the component that\n\t *     should use the given templates.\n\t * @param {!Object} templates Object containing soy template functions.\n\t * @param {string=} mainTemplate The name of the main template that should be\n\t *     used to render the component. Defaults to \"render\".\n\t */\n\tstatic register(componentCtor, templates, mainTemplate = 'render') {\n\t\tcomponentCtor.RENDERER = Soy;\n\t\tcomponentCtor.TEMPLATE = SoyAop.getOriginalFn(templates[mainTemplate]);\n\t\tcomponentCtor.TEMPLATE.componentCtor = componentCtor;\n\t\tSoyAop.registerForInterception(templates, mainTemplate);\n\t}\n\n\t/**\n\t * Overrides the default method from `IncrementalDomRenderer` so the component's\n\t * soy template can be used for rendering.\n\t * @override\n\t */\n\trenderIncDom() {\n\t\tvar elementTemplate = this.component_.constructor.TEMPLATE;\n\t\tif (core.isFunction(elementTemplate)) {\n\t\t\telementTemplate = SoyAop.getOriginalFn(elementTemplate);\n\t\t\tthis.addMissingStateKeys_(elementTemplate.params);\n\n\t\t\tSoyAop.startInterception(Soy.handleInterceptedCall_);\n\t\t\telementTemplate(this.buildTemplateData_(), null, ijData);\n\t\t\tSoyAop.stopInterception();\n\t\t} else {\n\t\t\tsuper.renderIncDom();\n\t\t}\n\t}\n\n\t/**\n\t * Sets the injected data object that should be passed to templates.\n\t * @param {Object} data\n\t */\n\tstatic setInjectedData(data) {\n\t\tijData = data || {};\n\t}\n}\n\nexport default Soy;\nexport { Soy, SoyAop };\n"],"sourceRoot":"/source/"}