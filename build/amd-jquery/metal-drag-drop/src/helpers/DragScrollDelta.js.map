{"version":3,"sources":["DragScrollDelta.js"],"names":["DragScrollDelta","handler_","scrollPositions_","disposeInternal","stop","handleScroll_","index","event","newPosition","scrollLeft","getScrollLeft","currentTarget","scrollTop","getScrollTop","position","emit","deltaX","deltaY","start","dragNode","scrollContainers","getComputedStyle","i","length","contains","push","add","on","bind","removeAllListeners"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAUMA,e;;;AACL;;;AAGA,6BAAc;AAAA;;AAAA,gDACb,wBADa;;AAEb;;;;;AAKA,SAAKC,QAAL,GAAgB,0BAAhB;;AAEA;;;;;AAKA,SAAKC,gBAAL,GAAwB,EAAxB;AAda;AAeb;;AAED;;;;;4BAGAC,e,8BAAkB;AACjB,2BAAMA,eAAN;AACA,QAAKC,IAAL;AACA,QAAKH,QAAL,GAAgB,IAAhB;AACA,G;;4BASDI,a,0BAAcC,K,EAAOC,K,EAAO;AAC3B,OAAIC,cAAc;AACjBC,gBAAY,mBAASC,aAAT,CAAuBH,MAAMI,aAA7B,CADK;AAEjBC,eAAW,mBAASC,YAAT,CAAsBN,MAAMI,aAA5B;AAFM,IAAlB;AAIA,OAAIG,WAAW,KAAKZ,gBAAL,CAAsBI,KAAtB,CAAf;AACA,QAAKJ,gBAAL,CAAsBI,KAAtB,IAA+BE,WAA/B;;AAEA,QAAKO,IAAL,CAAU,aAAV,EAAyB;AACxBC,YAAQR,YAAYC,UAAZ,GAAyBK,SAASL,UADlB;AAExBQ,YAAQT,YAAYI,SAAZ,GAAwBE,SAASF;AAFjB,IAAzB;AAIA,G;;4BAQDM,K,kBAAMC,Q,EAAUC,gB,EAAkB;AACjC,OAAIC,iBAAiBF,QAAjB,EAA2BL,QAA3B,KAAwC,OAA5C,EAAqD;AACpD;AACA;AACA;AACA;;AAED,QAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIF,iBAAiBG,MAArC,EAA6CD,GAA7C,EAAkD;AACjD,QAAI,cAAIE,QAAJ,CAAaJ,iBAAiBE,CAAjB,CAAb,EAAkCH,QAAlC,CAAJ,EAAiD;AAChD,UAAKjB,gBAAL,CAAsBuB,IAAtB,CAA2B;AAC1BhB,kBAAY,mBAASC,aAAT,CAAuBU,iBAAiBE,CAAjB,CAAvB,CADc;AAE1BV,iBAAW,mBAASC,YAAT,CAAsBO,iBAAiBE,CAAjB,CAAtB;AAFe,MAA3B;;AAKA,SAAIhB,QAAQ,KAAKJ,gBAAL,CAAsBqB,MAAtB,GAA+B,CAA3C;AACA,UAAKtB,QAAL,CAAcyB,GAAd,CAAkB,cAAIC,EAAJ,CAAOP,iBAAiBE,CAAjB,CAAP,EAA4B,QAA5B,EAAsC,KAAKjB,aAAL,CAAmBuB,IAAnB,CAAwB,IAAxB,EAA8BtB,KAA9B,CAAtC,CAAlB;AACA;AACD;AACD,G;;4BAKDF,I,mBAAO;AACN,QAAKH,QAAL,CAAc4B,kBAAd;AACA,QAAK3B,gBAAL,GAAwB,EAAxB;AACA,G;;;;;mBAGaF,e","file":"node_modules/metal-drag-drop/src/helpers/DragScrollDelta.js","sourcesContent":["'use strict';\n\nimport dom from 'metal-dom';\nimport { EventEmitter, EventHandler } from 'metal-events';\nimport Position from 'metal-position';\n\n/**\n * Helper called by the `Drag` instance that emits an event whenever\n * the scroll position of the given containers change.\n */\nclass DragScrollDelta extends EventEmitter {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\t/**\n\t\t * `EventHandler` for the scroll events.\n\t\t * @type {EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.handler_ = new EventHandler();\n\n\t\t/**\n\t\t * The scroll positions for the scroll elements that are being listened to.\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis.scrollPositions_ = [];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.stop();\n\t\tthis.handler_ = null;\n\t}\n\n\t/**\n\t * Handles a \"scroll\" event, emitting a \"scrollDelta\" event with the\n\t * difference between the previous and new values.\n\t * @param {number} index\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleScroll_(index, event) {\n\t\tvar newPosition = {\n\t\t\tscrollLeft: Position.getScrollLeft(event.currentTarget),\n\t\t\tscrollTop: Position.getScrollTop(event.currentTarget)\n\t\t};\n\t\tvar position = this.scrollPositions_[index];\n\t\tthis.scrollPositions_[index] = newPosition;\n\n\t\tthis.emit('scrollDelta', {\n\t\t\tdeltaX: newPosition.scrollLeft - position.scrollLeft,\n\t\t\tdeltaY: newPosition.scrollTop - position.scrollTop\n\t\t});\n\t}\n\n\t/**\n\t * Starts listening to scroll changes on the given elements that contain\n\t * the current drag node.\n\t * @param {!Element} dragNode\n\t * @param {!Array<!Element>} scrollContainers\n\t */\n\tstart(dragNode, scrollContainers) {\n\t\tif (getComputedStyle(dragNode).position === 'fixed') {\n\t\t\t// If the drag node's position is \"fixed\", then its coordinates don't need to\n\t\t\t// be updated when parents are scrolled.\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0; i < scrollContainers.length; i++) {\n\t\t\tif (dom.contains(scrollContainers[i], dragNode)) {\n\t\t\t\tthis.scrollPositions_.push({\n\t\t\t\t\tscrollLeft: Position.getScrollLeft(scrollContainers[i]),\n\t\t\t\t\tscrollTop: Position.getScrollTop(scrollContainers[i])\n\t\t\t\t});\n\n\t\t\t\tvar index = this.scrollPositions_.length - 1;\n\t\t\t\tthis.handler_.add(dom.on(scrollContainers[i], 'scroll', this.handleScroll_.bind(this, index)));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stops listening to scroll changes.\n\t */\n\tstop() {\n\t\tthis.handler_.removeAllListeners();\n\t\tthis.scrollPositions_ = [];\n\t}\n}\n\nexport default DragScrollDelta;\n"],"sourceRoot":"/source/"}