{"version":3,"sources":["HTML2IncDom.js"],"names":["parser_","HTML2IncDom","buildFn","html","run","getParser","window","HTMLParser","start","tag","attrs","unary","fn","IncrementalDOM","elementVoid","elementOpen","args","i","length","push","name","value","apply","end","elementClose","chars","text","setParser","newParser"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAIA,KAAIA,OAAJ;;KAEMC,W;;;;;cAQEC,O,oBAAQC,I,EAAM;AACpB,UAAO;AAAA,WAAMF,YAAYG,GAAZ,CAAgBD,IAAhB,CAAN;AAAA,IAAP;AACA,G;;cAMME,S,wBAAY;AAClB,UAAOL,WAAWM,OAAOC,UAAzB;AACA,G;;cAMMH,G,gBAAID,I,EAAM;AAChBF,eAAYI,SAAZ,GAAwBF,IAAxB,EAA8B;AAC7BK,WAAO,eAASC,GAAT,EAAcC,KAAd,EAAqBC,KAArB,EAA4B;AAClC,SAAIC,KAAKD,QAAQE,eAAeC,WAAvB,GAAqCD,eAAeE,WAA7D;AACA,SAAIC,OAAO,CACVP,GADU,EAEV,IAFU,EAGV,EAHU,CAAX;AAKA,UAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIP,MAAMQ,MAA1B,EAAkCD,GAAlC,EAAuC;AACtCD,WAAKG,IAAL,CAAUT,MAAMO,CAAN,EAASG,IAAnB,EAAyBV,MAAMO,CAAN,EAASI,KAAlC;AACA;AACDT,QAAGU,KAAH,CAAS,IAAT,EAAeN,IAAf;AACA,KAZ4B;;AAc7BO,SAAK,aAASd,GAAT,EAAc;AAClBI,oBAAeW,YAAf,CAA4Bf,GAA5B;AACA,KAhB4B;;AAkB7BgB,WAAO,eAASC,IAAT,EAAe;AACrBb,oBAAea,IAAf,CAAoBA,IAApB;AACA;AApB4B,IAA9B;AAsBA,G;;cAWMC,S,sBAAUC,S,EAAW;AAC3B5B,aAAU4B,SAAV;AACA,G;;;;;mBAGa3B,W","file":"node_modules/html2incdom/src/HTML2IncDom.js","sourcesContent":["'use strict';\n\nimport unescape from './unescape';\n\nvar parser_;\n\nclass HTML2IncDom {\n\t/**\n\t * Should convert the given html string to a function with calls to\n\t * incremental dom methods.\n\t * @param {string} html\n\t * @return {!function()} Function with incremental dom calls for building\n\t *     the given html string.\n\t */\n\tstatic buildFn(html) {\n\t\treturn () => HTML2IncDom.run(html);\n\t}\n\n\t/**\n\t * Gets the html parser being currently used.\n\t * @return {!function()}\n\t */\n\tstatic getParser() {\n\t\treturn parser_ || window.HTMLParser;\n\t}\n\n\t/**\n\t * Should convert the given html string to calls to incremental dom methods.\n\t * @param {string} html\n\t */\n\tstatic run(html) {\n\t\tHTML2IncDom.getParser()(html, {\n\t\t\tstart: function(tag, attrs, unary) {\n\t\t\t\tvar fn = unary ? IncrementalDOM.elementVoid : IncrementalDOM.elementOpen;\n\t\t\t\tvar args = [\n\t\t\t\t\ttag,\n\t\t\t\t\tnull,\n\t\t\t\t\t[]\n\t\t\t\t];\n\t\t\t\tfor (var i = 0; i < attrs.length; i++) {\n\t\t\t\t\targs.push(attrs[i].name, attrs[i].value);\n\t\t\t\t}\n\t\t\t\tfn.apply(null, args);\n\t\t\t},\n\n\t\t\tend: function(tag) {\n\t\t\t\tIncrementalDOM.elementClose(tag);\n\t\t\t},\n\n\t\t\tchars: function(text) {\n\t\t\t\tIncrementalDOM.text(text, unescape);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Changes the function that will be used to parse html strings. By default\n\t * this will use the `HTMLParser` function from\n\t * https://github.com/blowsie/Pure-JavaScript-HTML5-Parser. This will accept\n\t * any function that follows that same api, basically accepting the html\n\t * string and an object with `start`, `end` and `chars` functions to be called\n\t * during the parsing.\n\t * @param {!function(string, !Object} newParser\n\t */\n\tstatic setParser(newParser) {\n\t\tparser_ = newParser;\n\t}\n}\n\nexport default HTML2IncDom;\n"],"sourceRoot":"/source/"}