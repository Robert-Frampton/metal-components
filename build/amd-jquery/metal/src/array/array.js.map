{"version":3,"sources":["array.js"],"names":["array","equal","arr1","arr2","length","i","firstDefinedValue","arr","undefined","flatten","opt_output","output","Array","isArray","push","remove","obj","indexOf","rv","removeAt","prototype","splice","call","slice","start","opt_end","sliced","end","isDef"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;KAIMA,K;;;;;QAOEC,K,kBAAMC,I,EAAMC,I,EAAM;AACxB,OAAID,KAAKE,MAAL,KAAgBD,KAAKC,MAAzB,EAAiC;AAChC,WAAO,KAAP;AACA;AACD,QAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,KAAKE,MAAzB,EAAiCC,GAAjC,EAAsC;AACrC,QAAIH,KAAKG,CAAL,MAAYF,KAAKE,CAAL,CAAhB,EAAyB;AACxB,YAAO,KAAP;AACA;AACD;AACD,UAAO,IAAP;AACA,G;;QAOMC,iB,8BAAkBC,G,EAAK;AAC7B,QAAK,IAAIF,IAAI,CAAb,EAAgBA,IAAIE,IAAIH,MAAxB,EAAgCC,GAAhC,EAAqC;AACpC,QAAIE,IAAIF,CAAJ,MAAWG,SAAf,EAA0B;AACzB,YAAOD,IAAIF,CAAJ,CAAP;AACA;AACD;AACD,G;;QAQMI,O,oBAAQF,G,EAAKG,U,EAAY;AAC/B,OAAIC,SAASD,cAAc,EAA3B;AACA,QAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAIE,IAAIH,MAAxB,EAAgCC,GAAhC,EAAqC;AACpC,QAAIO,MAAMC,OAAN,CAAcN,IAAIF,CAAJ,CAAd,CAAJ,EAA2B;AAC1BL,WAAMS,OAAN,CAAcF,IAAIF,CAAJ,CAAd,EAAsBM,MAAtB;AACA,KAFD,MAEO;AACNA,YAAOG,IAAP,CAAYP,IAAIF,CAAJ,CAAZ;AACA;AACD;AACD,UAAOM,MAAP;AACA,G;;QASMI,M,mBAAOR,G,EAAKS,G,EAAK;AACvB,OAAIX,IAAIE,IAAIU,OAAJ,CAAYD,GAAZ,CAAR;AACA,OAAIE,EAAJ;AACA,OAAMA,KAAKb,KAAK,CAAhB,EAAqB;AACpBL,UAAMmB,QAAN,CAAeZ,GAAf,EAAoBF,CAApB;AACA;AACD,UAAOa,EAAP;AACA,G;;QAQMC,Q,qBAASZ,G,EAAKF,C,EAAG;AACvB,UAAOO,MAAMQ,SAAN,CAAgBC,MAAhB,CAAuBC,IAAvB,CAA4Bf,GAA5B,EAAiCF,CAAjC,EAAoC,CAApC,EAAuCD,MAAvC,KAAkD,CAAzD;AACA,G;;QAYMmB,K,kBAAMhB,G,EAAKiB,K,EAAOC,O,EAAS;AACjC,OAAIC,SAAS,EAAb;AACA,OAAIC,MAAM,eAAKC,KAAL,CAAWH,OAAX,IAAsBA,OAAtB,GAAgClB,IAAIH,MAA9C;AACA,QAAK,IAAIC,IAAImB,KAAb,EAAoBnB,IAAIsB,GAAxB,EAA6BtB,GAA7B,EAAkC;AACjCqB,WAAOZ,IAAP,CAAYP,IAAIF,CAAJ,CAAZ;AACA;AACD,UAAOqB,MAAP;AACA,G;;;;;mBAGa1B,K","file":"node_modules/metal/src/array/array.js","sourcesContent":["'use strict';\n\nimport core from '../core';\n\nclass array {\n\t/**\n\t * Checks if the given arrays have the same content.\n\t * @param {!Array<*>} arr1\n\t * @param {!Array<*>} arr2\n\t * @return {boolean}\n\t */\n\tstatic equal(arr1, arr2) {\n\t\tif (arr1.length !== arr2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (var i = 0; i < arr1.length; i++) {\n\t\t\tif (arr1[i] !== arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the first value in the given array that isn't undefined.\n\t * @param {!Array} arr\n\t * @return {*}\n\t */\n\tstatic firstDefinedValue(arr) {\n\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\tif (arr[i] !== undefined) {\n\t\t\t\treturn arr[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms the input nested array to become flat.\n\t * @param {Array.<*|Array.<*>>} arr Nested array to flatten.\n\t * @param {Array.<*>} opt_output Optional output array.\n\t * @return {Array.<*>} Flat array.\n\t */\n\tstatic flatten(arr, opt_output) {\n\t\tvar output = opt_output || [];\n\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\tif (Array.isArray(arr[i])) {\n\t\t\t\tarray.flatten(arr[i], output);\n\t\t\t} else {\n\t\t\t\toutput.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Removes the first occurrence of a particular value from an array.\n\t * @param {Array.<T>} arr Array from which to remove value.\n\t * @param {T} obj Object to remove.\n\t * @return {boolean} True if an element was removed.\n\t * @template T\n\t */\n\tstatic remove(arr, obj) {\n\t\tvar i = arr.indexOf(obj);\n\t\tvar rv;\n\t\tif ( (rv = i >= 0) ) {\n\t\t\tarray.removeAt(arr, i);\n\t\t}\n\t\treturn rv;\n\t}\n\n\t/**\n\t * Removes from an array the element at index i\n\t * @param {Array} arr Array or array like object from which to remove value.\n\t * @param {number} i The index to remove.\n\t * @return {boolean} True if an element was removed.\n\t */\n\tstatic removeAt(arr, i) {\n\t\treturn Array.prototype.splice.call(arr, i, 1).length === 1;\n\t}\n\n\t/**\n\t * Slices the given array, just like Array.prototype.slice, but this\n\t * is faster and working on all array-like objects (like arguments).\n\t * @param {!Object} arr Array-like object to slice.\n\t * @param {number} start The index that should start the slice.\n\t * @param {number=} opt_end The index where the slice should end, not\n\t *   included in the final array. If not given, all elements after the\n\t *   start index will be included.\n\t * @return {!Array}\n\t */\n\tstatic slice(arr, start, opt_end) {\n\t\tvar sliced = [];\n\t\tvar end = core.isDef(opt_end) ? opt_end : arr.length;\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tsliced.push(arr[i]);\n\t\t}\n\t\treturn sliced;\n\t}\n}\n\nexport default array;\n"],"sourceRoot":"/source/"}