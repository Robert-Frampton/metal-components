{"version":3,"sources":["ComponentRenderer.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAQM,iB;;;AACL;;;;;AAKA,6BAAY,SAAZ,EAAuB;AAAA;;AAAA,gDACtB,wBADsB;;AAEtB,SAAK,UAAL,GAAkB,SAAlB;;AAEA,SAAK,wBAAL,GAAgC,0BAAhC;AACA,SAAK,wBAAL,CAA8B,GAA9B,CACC,MAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB,EAA+B,MAAK,MAAL,CAAY,IAAZ,OAA/B,CADD;AAGA,SAAK,EAAL,CAAQ,UAAR,EAAoB,MAAK,eAAzB;;AAEA,OAAI,UAAU,UAAU,cAAV,EAAd;AACA,OAAI,MAAK,UAAL,CAAgB,WAAhB,CAA4B,mBAAhC,EAAqD;AACpD,UAAK,wBAAL,CAA8B,GAA9B,CACC,QAAQ,EAAR,CACC,iBADD,EAEC,MAAK,6BAAL,CAAmC,IAAnC,OAFD,CADD;AAMA,IAPD,MAOO;AACN,UAAK,wBAAL,CAA8B,GAA9B,CACC,QAAQ,EAAR,CACC,aADD,EAEC,MAAK,yBAAL,CAA+B,IAA/B,OAFD,CADD;AAMA;AAzBqB;AA0BtB;;AAED;;;;;8BAGA,e,8BAAkB;AACjB,QAAK,wBAAL,CAA8B,kBAA9B;AACA,QAAK,wBAAL,GAAgC,IAAhC;AACA,G;;8BAWD,yB,sCAA0B,O,EAAS;AAClC,OAAI,KAAK,eAAL,EAAJ,EAA4B;AAC3B,SAAK,MAAL,CAAY,OAAZ;AACA;AACD,G;;8BASD,6B,0CAA8B,I,EAAM;AACnC,OAAI,KAAK,eAAL,EAAJ,EAA4B;AAC3B,SAAK,MAAL,CAAY;AACX,kCACE,KAAK,GADP,EACa,IADb;AADW,KAAZ;AAKA;AACD,G;;8BAMD,e,8BAAkB;AACjB,QAAK,WAAL,GAAmB,IAAnB;AACA,G;;8BAKD,M,qBAAS;AACR,OAAI,CAAC,KAAK,UAAL,CAAgB,OAArB,EAA8B;AAC7B,SAAK,UAAL,CAAgB,OAAhB,GAA0B,SAAS,aAAT,CAAuB,KAAvB,CAA1B;AACA;AACD,QAAK,IAAL,CAAU,UAAV,EAAsB,CAAC,KAAK,WAA5B;AACA,G;;8BAOD,e,8BAAkB;AACjB,UAAO,KAAK,WAAL,IAAoB,CAAC,KAAK,YAAjC;AACA,G;;8BAKD,gB,+BAAmB;AAClB,QAAK,YAAL,GAAoB,IAApB;AACA,G;;8BAKD,e,8BAAkB;AACjB,QAAK,YAAL,GAAoB,KAApB;AACA,G;;8BASD,M,qBAAS,CAAE,C;;;;;mBAGG,iB","file":"node_modules/metal-component/src/ComponentRenderer.js","sourcesContent":["'use strict';\n\nimport { EventEmitter, EventHandler } from 'metal-events';\n\n/**\n * Base class that component renderers should extend from. It defines the\n * required methods all renderers should have.\n */\nclass ComponentRenderer extends EventEmitter {\n\t/**\n\t * Constructor function for `ComponentRenderer`.\n\t * @param {!Component} component The component that this renderer is\n\t *     responsible for.\n\t */\n\tconstructor(component) {\n\t\tsuper();\n\t\tthis.component_ = component;\n\n\t\tthis.componentRendererEvents_ = new EventHandler();\n\t\tthis.componentRendererEvents_.add(\n\t\t\tthis.component_.once('render', this.render.bind(this))\n\t\t);\n\t\tthis.on('rendered', this.handleRendered_);\n\n\t\tvar manager = component.getDataManager();\n\t\tif (this.component_.constructor.SYNC_UPDATES_MERGED) {\n\t\t\tthis.componentRendererEvents_.add(\n\t\t\t\tmanager.on(\n\t\t\t\t\t'dataPropChanged',\n\t\t\t\t\tthis.handleManagerDataPropChanged_.bind(this)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tthis.componentRendererEvents_.add(\n\t\t\t\tmanager.on(\n\t\t\t\t\t'dataChanged',\n\t\t\t\t\tthis.handleManagerDataChanged_.bind(this)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.componentRendererEvents_.removeAllListeners();\n\t\tthis.componentRendererEvents_ = null;\n\t}\n\n\t/**\n\t * Handles a `dataChanged` event from the component's data manager. Calls the\n\t * `update` function if the component has already been rendered for the first\n\t * time.\n\t * @param {!Object<string, Object>} changes Object containing the names\n\t *     of all changed state keys, each mapped to an object with its new\n\t *     (newVal) and previous (prevVal) values.\n\t * @protected\n\t */\n\thandleManagerDataChanged_(changes) {\n\t\tif (this.shouldRerender_()) {\n\t\t\tthis.update(changes);\n\t\t}\n\t}\n\n\t/**\n\t * Handles a `dataPropChanged` event from the component's data manager. This\n\t * is similar to `handleManagerDataChanged_`, but only called for\n\t * components that have requested updates to happen synchronously.\n\t * @param {!{key: string, newVal: *, prevVal: *}} data\n\t * @protected\n\t */\n\thandleManagerDataPropChanged_(data) {\n\t\tif (this.shouldRerender_()) {\n\t\t\tthis.update({\n\t\t\t\tchanges: {\n\t\t\t\t\t[data.key]: data\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Handles the \"rendered\" event.\n\t * @protected\n\t */\n\thandleRendered_() {\n\t\tthis.isRendered_ = true;\n\t}\n\n\t/**\n\t * Renders the component's whole content (including its main element).\n\t */\n\trender() {\n\t\tif (!this.component_.element) {\n\t\t\tthis.component_.element = document.createElement('div');\n\t\t}\n\t\tthis.emit('rendered', !this.isRendered_);\n\t}\n\n\t/**\n\t * Checks if changes should cause a rerender right now.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldRerender_() {\n\t\treturn this.isRendered_ && !this.skipUpdates_;\n\t}\n\n\t/**\n\t * Skips updates until `stopSkipUpdates` is called.\n\t */\n\tstartSkipUpdates() {\n\t\tthis.skipUpdates_ = true;\n\t}\n\n\t/**\n\t * Stops skipping updates.\n\t */\n\tstopSkipUpdates() {\n\t\tthis.skipUpdates_ = false;\n\t}\n\n\t/**\n\t * Updates the component's element html. This is automatically called when\n\t * the value of at least one of the component's state keys has changed.\n\t * @param {Object.<string, Object>} changes Object containing the names\n\t *     of all changed state keys, each mapped to an object with its new\n\t *     (newVal) and previous (prevVal) values.\n\t */\n\tupdate() {}\n}\n\nexport default ComponentRenderer;\n"],"sourceRoot":"/source/"}