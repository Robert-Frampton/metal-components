{"version":3,"sources":["ComponentDataManager.js"],"names":[],"mappings":"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","file":"node_modules/metal-component/src/ComponentDataManager.js","sourcesContent":["'use strict';\n\nimport { array, core, object } from 'metal';\nimport { EventEmitter, EventEmitterProxy } from 'metal-events';\nimport State from 'metal-state';\n\nclass ComponentDataManager extends EventEmitter {\n\t/**\n\t * Constructor for `ComponentDataManager`.\n\t * @param {!Component} component\n\t * @param {!Object} data\n\t */\n\tconstructor(component, data) {\n\t\tsuper();\n\t\tthis.component_ = component;\n\n\t\tcore.mergeSuperClassesProperty(\n\t\t\tthis.constructor,\n\t\t\t'BLACKLIST',\n\t\t\tarray.firstDefinedValue\n\t\t);\n\t\tState.mergeStateStatic(this.component_.constructor);\n\n\t\tthis.createState_(data, this.component_);\n\t}\n\n\t/**\n\t * Adds a state property to the component.\n\t * @param {string} name\n\t * @param {!Object} config\n\t * @param {*} opt_initialValue\n\t */\n\tadd(name, config, opt_initialValue) {\n\t\tthis.state_.addToState(name, config, opt_initialValue);\n\t}\n\n\t/**\n\t * Builds the configuration data that will be passed to the `State` instance.\n\t * @param {!Object} data\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildStateInstanceData_(data) {\n\t\treturn object.mixin({}, data, this.component_.constructor.STATE_MERGED);\n\t}\n\n\t/**\n\t * Creates the `State` instance that will handle the main component data.\n\t * @param {!Object} data\n\t * @param {!Object} holder The object that should hold the data properties.\n\t * @protected\n\t */\n\tcreateState_(data, holder) {\n\t\tconst state = new State({}, holder, this.component_);\n\t\tstate.setKeysBlacklist_(this.constructor.BLACKLIST_MERGED);\n\t\tstate.addToState(\n\t\t\tthis.buildStateInstanceData_(data),\n\t\t\tthis.component_.getInitialConfig()\n\t\t);\n\n\t\tconst listener = this.emit_.bind(this);\n\t\tstate.on('stateChanged', listener);\n\t\tstate.on('stateKeyChanged', listener);\n\t\tthis.state_ = state;\n\n\t\tthis.proxy_ = new EventEmitterProxy(state, this.component_);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\n\t\tthis.state_.dispose();\n\t\tthis.state_ = null;\n\n\t\tthis.proxy_.dispose();\n\t\tthis.proxy_ = null;\n\t}\n\n\t/**\n\t * Emits the specified event.\n\t * @param {!Object} data\n\t * @param {!Object} event\n\t * @protected\n\t */\n\temit_(data, event) {\n\t\tconst orig = event.type;\n\t\tconst name = orig === 'stateChanged' ? 'dataChanged' : 'dataPropChanged';\n\t\tthis.emit(name, data);\n\t}\n\n\t/**\n\t * Gets the data with the given name.\n\t * @param {string} name\n\t * @return {*}\n\t */\n\tget(name) {\n\t\treturn this.state_.get(name);\n\t}\n\n\t/**\n\t * Gets the keys for state data that can be synced via `sync` functions.\n\t * @return {!Array<string>}\n\t */\n\tgetSyncKeys() {\n\t\treturn this.state_.getStateKeys();\n\t}\n\n\t/**\n\t * Gets the keys for state data.\n\t * @return {!Array<string>}\n\t */\n\tgetStateKeys() {\n\t\treturn this.state_.getStateKeys();\n\t}\n\n\t/**\n\t * Gets the whole state data.\n\t * @return {!Object}\n\t */\n\tgetState() {\n\t\treturn this.state_.getState();\n\t}\n\n\t/**\n\t * Gets the `State` instance being used.\n\t * @return {!Object}\n\t */\n\tgetStateInstance() {\n\t\treturn this.state_;\n\t}\n\n\t/**\n\t * Updates all non internal data with the given values (or to the default\n\t * value if none is given).\n\t * @param {!Object} data\n\t */\n\treplaceNonInternal(data) {\n\t\tComponentDataManager.replaceNonInternal(data, this.state_);\n\t}\n\n\t/**\n\t * Updates all non internal data with the given values (or to the default\n\t * value if none is given).\n\t * @param {!Object} data\n\t * @param {!State} state\n\t */\n\tstatic replaceNonInternal(data, state) {\n\t\tconst keys = state.getStateKeys();\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst key = keys[i];\n\t\t\tif (!state.getStateKeyConfig(key).internal) {\n\t\t\t\tif (data.hasOwnProperty(key)) {\n\t\t\t\t\tstate.set(key, data[key]);\n\t\t\t\t} else {\n\t\t\t\t\tstate.setDefaultValue(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of all the specified state keys.\n\t * @param {!Object.<string,*>} values A map of state keys to the values they\n\t *   should be set to.\n\t * @param {function()=} opt_callback An optional function that will be run\n\t *   after the next batched update is triggered.\n\t */\n\tsetState(state, opt_callback) {\n\t\tthis.state_.setState(state, opt_callback);\n\t}\n}\n\nComponentDataManager.BLACKLIST = {\n\tcomponents: true,\n\telement: true,\n\twasRendered: true\n};\n\nexport default ComponentDataManager;\n"],"sourceRoot":"/source/"}