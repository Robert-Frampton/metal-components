{"version":3,"sources":["AutocompleteBase.js"],"names":["AutocompleteBase","created","eventHandler_","on","select","attached","inputElement","add","handleUserInput_","bind","detached","removeAllListeners","request","value","query","self","pendingRequest","cancel","deferredData","data","isPromise","resolve","then","Array","isArray","map","format","filter","isDefAndNotNull","val","setData_","isFunction","STATE","setter","identityFunction","validator","toElement","selectedValue","text","focus","visible","isBoolean","register"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAWMA,gB;;;;;;;;;6BAILC,O,sBAAU;AACT,QAAKC,aAAL,GAAqB,0BAArB;AACA,QAAKC,EAAL,CAAQ,QAAR,EAAkB,KAAKC,MAAvB;AACA,G;;6BAKDC,Q,uBAAW;AACV,OAAI,KAAKC,YAAT,EAAuB;AACtB,SAAKJ,aAAL,CAAmBK,GAAnB,CAAuB,cAAIJ,EAAJ,CAAO,KAAKG,YAAZ,EAA0B,OAA1B,EAAmC,KAAKE,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAnC,CAAvB;AACA;AACD,G;;6BAKDC,Q,uBAAW;AACV,QAAKR,aAAL,CAAmBS,kBAAnB;AACA,G;;6BAODH,gB,+BAAmB;AAClB,QAAKI,OAAL,CAAa,KAAKN,YAAL,CAAkBO,KAA/B;AACA,G;;6BAODD,O,oBAAQE,K,EAAO;AACd,OAAIC,OAAO,IAAX;;AAEA,OAAI,KAAKC,cAAT,EAAyB;AACxB,SAAKA,cAAL,CAAoBC,MAApB,CAA2B,8BAA3B;AACA;;AAED,OAAIC,eAAeH,KAAKI,IAAL,CAAUL,KAAV,CAAnB;AACA,OAAI,CAAC,gBAAKM,SAAL,CAAeF,YAAf,CAAL,EAAmC;AAClCA,mBAAe,kBAAmBG,OAAnB,CAA2BH,YAA3B,CAAf;AACA;;AAED,QAAKF,cAAL,GAAsBE,aAAaI,IAAb,CAAkB,UAASH,IAAT,EAAe;AACtD,QAAII,MAAMC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;AACxB,YAAOA,KAAKM,GAAL,CAASV,KAAKW,MAAL,CAAYjB,IAAZ,CAAiBM,IAAjB,CAAT,EAAiCY,MAAjC,CAAwC;AAAA,aAAO,gBAAKC,eAAL,CAAqBC,GAArB,CAAP;AAAA,MAAxC,CAAP;AACA;AACD,IAJqB,CAAtB;;AAMA,UAAO,KAAKb,cAAZ;AACA,G;;6BASDc,Q,qBAASD,G,EAAK;AACb,OAAI,CAAC,gBAAKE,UAAL,CAAgBF,GAAhB,CAAL,EAA2B;AAC1B,WAAO,YAAW;AACjB,YAAOA,GAAP;AACA,KAFD;AAGA;AACD,UAAOA,GAAP;AACA,G;;;;;AAGF;;;;;AAKA7B,kBAAiBgC,KAAjB,GAAyB;AACxB;;;;;;AAMAb,QAAM;AACLc,WAAQ;AADH,GAPkB;;AAWxB;;;;;AAKAP,UAAQ;AACPb,UAAO,gBAAKqB,gBADL;AAEPC,cAAW,gBAAKJ;AAFT,GAhBgB;;AAqBxB;;;;AAIAzB,gBAAc;AACb2B,WAAQ,cAAIG;AADC,GAzBU;;AA6BxB;;;;;;;;;;AAUAhC,UAAQ;AACPS,UAAO,eAASwB,aAAT,EAAwB;AAC9B,SAAK/B,YAAL,CAAkBO,KAAlB,GAA0BwB,cAAcC,IAAxC;AACA,SAAKhC,YAAL,CAAkBiC,KAAlB;AACA,IAJM;AAKPJ,cAAW,gBAAKJ;AALT,GAvCgB;;AA+CxB;;;;AAIAS,WAAS;AACRL,cAAW,gBAAKM,SADR;AAER5B,UAAO;AAFC;AAnDe,EAAzB;;mBAyDeb,gB;AACoD,yBAAc0C,QAAd,CAAuB,kBAAvB,EAA2C1C,gBAA3C","file":"node_modules/metal-autocomplete/src/AutocompleteBase.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\nimport Component from 'metal-component';\nimport { EventHandler } from 'metal-events';\n\n/*\n * AutocompleteBase component.\n */\nclass AutocompleteBase extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\tthis.eventHandler_ = new EventHandler();\n\t\tthis.on('select', this.select);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tif (this.inputElement) {\n\t\t\tthis.eventHandler_.add(dom.on(this.inputElement, 'input', this.handleUserInput_.bind(this)));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tthis.eventHandler_.removeAllListeners();\n\t}\n\n\t/**\n\t * Handles the user input.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleUserInput_() {\n\t\tthis.request(this.inputElement.value);\n\t}\n\n\t/**\n\t * Cancels pending request and starts a request for the user input.\n\t * @param {string} query\n\t * @return {!CancellablePromise} Deferred request.\n\t */\n\trequest(query) {\n\t\tvar self = this;\n\n\t\tif (this.pendingRequest) {\n\t\t\tthis.pendingRequest.cancel('Cancelled by another request');\n\t\t}\n\n\t\tvar deferredData = self.data(query);\n\t\tif (!core.isPromise(deferredData)) {\n\t\t\tdeferredData = CancellablePromise.resolve(deferredData);\n\t\t}\n\n\t\tthis.pendingRequest = deferredData.then(function(data) {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\treturn data.map(self.format.bind(self)).filter(val => core.isDefAndNotNull(val));\n\t\t\t}\n\t\t});\n\n\t\treturn this.pendingRequest;\n\t}\n\n\t/**\n\t * Normalizes the provided data value. If the value is not a function, the\n\t * value will be wrapped in a function which returns the provided value.\n\t * @param {Array.<object>|Promise|function} val The provided value which\n\t *     have to be normalized.\n\t * @protected\n\t */\n\tsetData_(val) {\n\t\tif (!core.isFunction(val)) {\n\t\t\treturn function() {\n\t\t\t\treturn val;\n\t\t\t};\n\t\t}\n\t\treturn val;\n\t}\n}\n\n/**\n * AutocompleteBase state definition.\n * @type {!Object}\n * @static\n */\nAutocompleteBase.STATE = {\n\t/**\n\t * Function or array, which have to return the results from the query.\n\t * If function, it should return an `array` or a `Promise`. In case of\n\t * Promise, it should be resolved with an array containing the results.\n\t * @type {Array.<object>|function}\n\t */\n\tdata: {\n\t\tsetter: 'setData_'\n\t},\n\n\t/**\n\t * Function that formats each item of the data.\n\t * @type {function}\n\t * @default Identity function.\n\t */\n\tformat: {\n\t\tvalue: core.identityFunction,\n\t\tvalidator: core.isFunction\n\t},\n\n\t/**\n\t * The element which will be used source for the data queries.\n\t * @type {DOMElement|string}\n\t */\n\tinputElement: {\n\t\tsetter: dom.toElement\n\t},\n\n\t/**\n\t * Handles item selection. It will receive two parameters - the selected\n\t * value from the user and the current value from the input element.\n\t * @type {function}\n\t * @default\n\t *   function(selectedValue) {\n\t *\t   this.inputElement.value = selectedValue;\n\t *\t   this.inputElement.focus();\n\t *   }\n\t */\n\tselect: {\n\t\tvalue: function(selectedValue) {\n\t\t\tthis.inputElement.value = selectedValue.text;\n\t\t\tthis.inputElement.focus();\n\t\t},\n\t\tvalidator: core.isFunction\n\t},\n\n\t/**\n\t * Indicates if the component is visible or not.\n\t * @type {boolean}\n\t */\n\tvisible: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: false\n\t}\n};\n\nexport default AutocompleteBase;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('autocompleteBase', AutocompleteBase);"],"sourceRoot":"/source/"}